{
  "address": "0x64C9B0d04c596D3238fc557369987ac0A0D7406c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oldId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "landIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gameIds",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes32",
              "name": "uri",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct EstateBaseToken.EstateCRUDData",
          "name": "update",
          "type": "tuple"
        }
      ],
      "name": "EstateTokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oldId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256[][]",
              "name": "landAndGameAssociationsToAdd",
              "type": "uint256[][]"
            },
            {
              "internalType": "uint256[][]",
              "name": "landAndGameAssociationsToRemove",
              "type": "uint256[][]"
            },
            {
              "internalType": "uint256[]",
              "name": "gameIdsToReuse",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "landIdsToAdd",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "landIdsToRemove",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes32",
              "name": "uri",
              "type": "bytes32"
            }
          ],
          "indexed": false,
          "internalType": "struct EstateBaseToken.UpdateEstateData",
          "name": "update",
          "type": "tuple"
        }
      ],
      "name": "EstateTokenUpdatedII",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oldId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "landIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gameIds",
              "type": "uint256[]"
            }
          ],
          "indexed": false,
          "internalType": "struct EstateBaseToken.EstateData",
          "name": "update",
          "type": "tuple"
        }
      ],
      "name": "EstateTokenUpdatedV3",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldMinter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "MinterChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SuperOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approveFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "changeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "landIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gameIds",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes32",
              "name": "uri",
              "type": "bytes32"
            }
          ],
          "internalType": "struct EstateBaseToken.EstateCRUDData",
          "name": "creation",
          "type": "tuple"
        }
      ],
      "name": "createEstate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "estateId",
          "type": "uint256"
        }
      ],
      "name": "getEstateData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "landIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gameIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct EstateBaseToken.EstateData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getLandsForGame",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getStorageId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "contract LandToken",
          "name": "land",
          "type": "address"
        },
        {
          "internalType": "contract GameBaseToken",
          "name": "gameToken",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "chainIndex",
          "type": "uint8"
        }
      ],
      "name": "initV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "estateId",
          "type": "uint256"
        }
      ],
      "name": "isBurned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "landIds",
          "type": "uint256[]"
        }
      ],
      "name": "isItInArray",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isSuperOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAllFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setSuperOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "estateId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "landIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "gameIds",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct EstateBaseToken.EstateData",
          "name": "associatioToRetrieve",
          "type": "tuple"
        }
      ],
      "name": "transferFromBurnedEstate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "estateId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256[][]",
              "name": "landAndGameAssociationsToAdd",
              "type": "uint256[][]"
            },
            {
              "internalType": "uint256[][]",
              "name": "landAndGameAssociationsToRemove",
              "type": "uint256[][]"
            },
            {
              "internalType": "uint256[]",
              "name": "gameIdsToReuse",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "landIdsToAdd",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "landIdsToRemove",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes32",
              "name": "uri",
              "type": "bytes32"
            }
          ],
          "internalType": "struct EstateBaseToken.UpdateEstateData",
          "name": "update",
          "type": "tuple"
        }
      ],
      "name": "updateEstateV2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe8ecfc17ff9317ab3959e364494b5d6979fdee1bbced6c6616f8fd5d4b6008eb",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x64C9B0d04c596D3238fc557369987ac0A0D7406c",
    "transactionIndex": 23,
    "gasUsed": "4845705",
    "logsBloom": "0x
    "blockHash": "0x03843036750e9163b835f9f8130334dd84addd9e2593134bfba801a6992184a3",
    "transactionHash": "0xe8ecfc17ff9317ab3959e364494b5d6979fdee1bbced6c6616f8fd5d4b6008eb",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 24684728,
        "transactionHash": "0xe8ecfc17ff9317ab3959e364494b5d6979fdee1bbced6c6616f8fd5d4b6008eb",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001137249d361a0000000000000000000000000000000000000000000000000019161f7eceab7252000000000000000000000000000000000000000000000599e0c024183cd33a9a0000000000000000000000000000000000000000000000001904e85a31755852000000000000000000000000000000000000000000000599e0d15b3cda09549a",
        "logIndex": 52,
        "blockHash": "0x03843036750e9163b835f9f8130334dd84addd9e2593134bfba801a6992184a3"
      }
    ],
    "blockNumber": 24684728,
    "cumulativeGasUsed": "8682405",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c98e50b6aaa9e2d9246638fbda3bd3e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"landIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gameIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"uri\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct EstateBaseToken.EstateCRUDData\",\"name\":\"update\",\"type\":\"tuple\"}],\"name\":\"EstateTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[][]\",\"name\":\"landAndGameAssociationsToAdd\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"landAndGameAssociationsToRemove\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"gameIdsToReuse\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"landIdsToAdd\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"landIdsToRemove\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"uri\",\"type\":\"bytes32\"}],\"indexed\":false,\"internalType\":\"struct EstateBaseToken.UpdateEstateData\",\"name\":\"update\",\"type\":\"tuple\"}],\"name\":\"EstateTokenUpdatedII\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"landIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gameIds\",\"type\":\"uint256[]\"}],\"indexed\":false,\"internalType\":\"struct EstateBaseToken.EstateData\",\"name\":\"update\",\"type\":\"tuple\"}],\"name\":\"EstateTokenUpdatedV3\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldMinter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SuperOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approveFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"changeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"landIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gameIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"uri\",\"type\":\"bytes32\"}],\"internalType\":\"struct EstateBaseToken.EstateCRUDData\",\"name\":\"creation\",\"type\":\"tuple\"}],\"name\":\"createEstate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"estateId\",\"type\":\"uint256\"}],\"name\":\"getEstateData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"landIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gameIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct EstateBaseToken.EstateData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getLandsForGame\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getStorageId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"contract LandToken\",\"name\":\"land\",\"type\":\"address\"},{\"internalType\":\"contract GameBaseToken\",\"name\":\"gameToken\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"chainIndex\",\"type\":\"uint8\"}],\"name\":\"initV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"estateId\",\"type\":\"uint256\"}],\"name\":\"isBurned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"landIds\",\"type\":\"uint256[]\"}],\"name\":\"isItInArray\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSuperOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"estateId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"landIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"gameIds\",\"type\":\"uint256[]\"}],\"internalType\":\"struct EstateBaseToken.EstateData\",\"name\":\"associatioToRetrieve\",\"type\":\"tuple\"}],\"name\":\"transferFromBurnedEstate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"estateId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[][]\",\"name\":\"landAndGameAssociationsToAdd\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[][]\",\"name\":\"landAndGameAssociationsToRemove\",\"type\":\"uint256[][]\"},{\"internalType\":\"uint256[]\",\"name\":\"gameIdsToReuse\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"landIdsToAdd\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"landIdsToRemove\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"uri\",\"type\":\"bytes32\"}],\"internalType\":\"struct EstateBaseToken.UpdateEstateData\",\"name\":\"update\",\"type\":\"tuple\"}],\"name\":\"updateEstateV2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"id\":\"The id of the token.\",\"operator\":\"The address receiving the approval.\"}},\"approveFor(address,address,uint256)\":{\"params\":{\"id\":\"The id of the token.\",\"operator\":\"The address receiving the approval.\",\"sender\":\"The address giving the approval.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address to look for.\"},\"returns\":{\"_0\":\"The number of tokens owned by the address.\"}},\"batchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"ids\":\"The ids of the tokens.\",\"to\":\"The recipient of the token.\"}},\"burn(uint256)\":{\"params\":{\"id\":\"The token which will be burnt.\"}},\"burnFrom(address,uint256)\":{\"params\":{\"from\":\"address whose token is to be burnt.\",\"id\":\"The token which will be burnt.\"}},\"changeAdmin(address)\":{\"details\":\"Change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"The address of the new administrator.\"}},\"changeMinter(address)\":{\"details\":\"Change the minter to be `newMinter`.\",\"params\":{\"newMinter\":\"The address of the new minter.\"}},\"createEstate(address,address,(uint256[],uint256[],bytes32))\":{\"params\":{\"creation\":\"The data to use to create the estate.\",\"from\":\"The address of the one creating the estate.\",\"to\":\"The address that will own the estate.\"}},\"getAdmin()\":{\"details\":\"Get the current administrator of this contract.\",\"returns\":{\"_0\":\"The current administrator of this contract.\"}},\"getApproved(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"_0\":\"The address of the operator.\"}},\"getMinter()\":{\"details\":\"Get the current minter of this contract.\",\"returns\":{\"_0\":\"The current minter of this contract.\"}},\"getStorageId(uint256)\":{\"params\":{\"tokenId\":\"The tokenId for which to find the first token Id.\"},\"returns\":{\"_0\":\"The storage id for this token.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address of the operator.\",\"owner\":\"The address of the owner.\"},\"returns\":{\"isOperator\":\"The status of the approval.\"}},\"isSuperOperator(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has superOperator rights.\"}},\"name()\":{\"returns\":{\"_0\":\"The name of the token contract.\"}},\"ownerOf(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"owner\":\"The address of the token owner.\"}},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"ids\":\"The ids of the tokens.\",\"to\":\"The recipient of the token.\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The send of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"The determination of the approval.\",\"operator\":\"The address receiving the approval.\"}},\"setApprovalForAllFor(address,address,bool)\":{\"params\":{\"approved\":\"The determination of the approval.\",\"operator\":\"The address receiving the approval.\",\"sender\":\"The address giving the approval.\"}},\"setSuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"id\":\"The id of the interface.\"},\"returns\":{\"_0\":\"Whether the interface is supported.\"}},\"symbol()\":{\"returns\":{\"_0\":\"the symbol of the token contract.\"}},\"tokenURI(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"uri\":\"The URI of the token metadata.\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"transferFromBurnedEstate(address,address,uint256,(uint256[],uint256[]))\":{\"params\":{\"estateId\":\"The estate to recover lands from.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the senders behalf.\"},\"approveFor(address,address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the sender behalf.\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens owned by an address.\"},\"batchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses.\"},\"burn(uint256)\":{\"notice\":\"Burns token `id`.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burn token`id` from `from`.\"},\"createEstate(address,address,(uint256[],uint256[],bytes32))\":{\"notice\":\"Create a new estate token with lands.\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved operator for a specific token.\"},\"getStorageId(uint256)\":{\"notice\":\"Get the storageID (no chainIndex or version data), which is constant for a given token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Check if the sender approved the operator.\"},\"isSuperOperator(address)\":{\"notice\":\"check whether address `who` is given superOperator rights.\"},\"name()\":{\"notice\":\"Return the name of the token contract.\"},\"ownerOf(uint256)\":{\"notice\":\"Get the owner of a token.\"},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses, while ensuring the receiving contract has a receiver method.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver know of the transfer.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender.\"},\"setApprovalForAllFor(address,address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender.\"},\"setSuperOperator(address,bool)\":{\"notice\":\"Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check if the contract supports an interface. 0x01ffc9a7 is ERC-165. 0x80ac58cd is ERC-721\"},\"symbol()\":{\"notice\":\"Get the symbol of the token contract.\"},\"tokenURI(uint256)\":{\"notice\":\"Return the URI of a specific token.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/child/ChildEstateTokenV1.sol\":\"ChildEstateTokenV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-0.8/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x71e0d1cc75b67306382e055b789b6d3ffe34a9e2e55380d3c9895a36a42229e1\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x72b6a1d297cd3b033d7c2e4a7e7864934bb767db6453623f1c3082c6534547f4\",\"license\":\"MIT\"},\"src/solc_0.8/Game/GameBaseToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../common/BaseWithStorage/ImmutableERC721.sol\\\";\\nimport \\\"../common/BaseWithStorage/WithMinter.sol\\\";\\nimport \\\"../common/interfaces/IAssetToken.sol\\\";\\nimport \\\"../common/interfaces/IGameToken.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract GameBaseToken is ImmutableERC721, WithMinter, Initializable, IGameToken {\\n    ///////////////////////////////  Data //////////////////////////////\\n\\n    IAssetToken internal _asset;\\n\\n    bytes4 private constant ERC1155_RECEIVED = 0xf23a6e61;\\n    bytes4 private constant ERC1155_BATCH_RECEIVED = 0xbc197c81;\\n\\n    mapping(uint256 => mapping(uint256 => uint256)) private _gameAssets;\\n    mapping(uint256 => address) private _creatorship; // creatorship transfer\\n\\n    mapping(uint256 => bytes32) private _metaData;\\n    mapping(address => mapping(address => bool)) private _gameEditors;\\n    mapping(uint256 => uint256) internal _exactNumOfLandsRequired;\\n    ///////////////////////////////  Events //////////////////////////////\\n\\n    /// @dev Emits when a game is updated.\\n    /// @param oldId The id of the previous erc721 GAME token.\\n    /// @param newId The id of the newly minted token.\\n    /// @param update The changes made to the Game: new assets, removed assets, uri\\n\\n    event GameTokenUpdated(uint256 indexed oldId, uint256 indexed newId, IGameToken.GameData update);\\n\\n    /// @dev Emits when creatorship of a GAME token is transferred.\\n    /// @param original The original creator of the GAME token.\\n    /// @param from The current 'creator' of the token.\\n    /// @param to The new 'creator' of the token.\\n    event CreatorshipTransfer(address indexed original, address indexed from, address indexed to);\\n\\n    /// @dev Emits when an address has its gameEditor status changed.\\n    /// @param gameOwner The owner of the GAME token.\\n    /// @param gameEditor The address whose editor rights to update.\\n    /// @param isEditor WHether the address 'gameEditor' should be an editor.\\n    event GameEditorSet(address indexed gameOwner, address gameEditor, bool isEditor);\\n\\n    function initV1(\\n        address trustedForwarder,\\n        address admin,\\n        IAssetToken asset,\\n        uint8 chainIndex\\n    ) public initializer() {\\n        _admin = admin;\\n        _asset = asset;\\n        ERC721BaseToken.__ERC721BaseToken_initialize(chainIndex);\\n        ERC2771Handler.__ERC2771Handler_initialize(trustedForwarder);\\n    }\\n\\n    ///////////////////////////////  Modifiers //////////////////////////////\\n\\n    modifier notToZero(address to) {\\n        require(to != address(0), \\\"DESTINATION_ZERO_ADDRESS\\\");\\n        _;\\n    }\\n\\n    modifier notToThis(address to) {\\n        require(to != address(this), \\\"DESTINATION_GAME_CONTRACT\\\");\\n        _;\\n    }\\n\\n    ///////////////////////////////  Functions //////////////////////////////\\n\\n    /// @notice Create a new GAME token.\\n    /// @param from The address of the one creating the game (may be different from msg.sender if metaTx).\\n    /// @param to The address who will be assigned ownership of this game.\\n    /// @param creation The struct containing ids & ammounts of assets to add to this game,\\n    /// along with the uri to set.\\n    /// @param editor The address to allow to edit (can also be set later).\\n    /// @param subId A random id created on the backend.\\n    /// @return id The id of the new GAME token (erc721).\\n    function createGame(\\n        address from,\\n        address to,\\n        GameData calldata creation,\\n        address editor,\\n        uint64 subId\\n    ) external override onlyMinter() notToZero(to) notToThis(to) returns (uint256 id) {\\n        require(creation.exactNumOfLandsRequired > 0, \\\"EXACT_NUM_OF_LANDS_REQUIRED_ZERO\\\");\\n        (uint256 gameId, uint256 strgId) = _mintGame(from, to, subId, 0, true);\\n\\n        if (editor != address(0)) {\\n            _setGameEditor(to, editor, true);\\n        }\\n        if (creation.assetIdsToAdd.length != 0) {\\n            _addAssets(from, strgId, creation.assetIdsToAdd, creation.assetAmountsToAdd);\\n        }\\n\\n        _metaData[strgId] = creation.uri;\\n        _exactNumOfLandsRequired[strgId] = creation.exactNumOfLandsRequired;\\n        emit GameTokenUpdated(0, gameId, creation);\\n        return gameId;\\n    }\\n\\n    /// @notice Update an existing GAME token.This actually burns old token\\n    /// and mints new token with same basId & incremented version.\\n    /// @param from The one updating the GAME token.\\n    /// @param gameId The current id of the GAME token.\\n    /// @param update The values to use for the update.\\n    /// @return The new gameId.\\n    function updateGame(\\n        address from,\\n        uint256 gameId,\\n        IGameToken.GameData memory update\\n    ) external override onlyMinter() returns (uint256) {\\n        require(update.exactNumOfLandsRequired > 0, \\\"EXACT_NUM_OF_LANDS_REQUIRED_ZERO\\\");\\n        uint256 id = _storageId(gameId);\\n        _addAssets(from, id, update.assetIdsToAdd, update.assetAmountsToAdd);\\n        _removeAssets(id, update.assetIdsToRemove, update.assetAmountsToRemove, _ownerOf(gameId));\\n        _metaData[id] = update.uri;\\n        _exactNumOfLandsRequired[id] = update.exactNumOfLandsRequired;\\n        uint256 newId = _bumpGameVersion(from, gameId);\\n        emit GameTokenUpdated(gameId, newId, update);\\n        return newId;\\n    }\\n\\n    /// @notice Allow token owner to set game editors.\\n    /// @param gameOwner The address of a GAME token creator.\\n    /// @param editor The address of the editor to set.\\n    /// @param isEditor Add or remove the ability to edit.\\n    function setGameEditor(\\n        address gameOwner,\\n        address editor,\\n        bool isEditor\\n    ) external override {\\n        require(_msgSender() == gameOwner, \\\"EDITOR_ACCESS_DENIED\\\");\\n        _setGameEditor(gameOwner, editor, isEditor);\\n    }\\n\\n    /// @notice Transfers creatorship of `original` from `sender` to `to`.\\n    /// @param gameId The current id of the GAME token.\\n    /// @param sender The address of current registered creator.\\n    /// @param to The address to transfer the creatorship to\\n    function transferCreatorship(\\n        uint256 gameId,\\n        address sender,\\n        address to\\n    ) external override notToZero(to) {\\n        require(_ownerOf(gameId) != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        uint256 id = _storageId(gameId);\\n        address msgSender = _msgSender();\\n        require(msgSender == sender || _superOperators[msgSender], \\\"TRANSFER_ACCESS_DENIED\\\");\\n        require(sender != address(0), \\\"NOT_FROM_ZEROADDRESS\\\");\\n        address originalCreator = address(uint160(id / CREATOR_OFFSET_MULTIPLIER));\\n        address current = creatorOf(gameId);\\n        require(current != to, \\\"CURRENT_=_TO\\\");\\n        require(current == sender, \\\"CURRENT_!=_SENDER\\\");\\n        _creatorship[id] = to;\\n        emit CreatorshipTransfer(originalCreator, current, to);\\n    }\\n\\n    /// @notice Burn a GAME token and recover assets.\\n    /// @param from The address of the one destroying the game.\\n    /// @param to The address to send all GAME assets to.\\n    /// @param gameId The id of the GAME to destroy.\\n    /// @param assetIds The assets to recover from the burnt GAME.\\n    function burnAndRecover(\\n        address from,\\n        address to,\\n        uint256 gameId,\\n        uint256[] calldata assetIds\\n    ) external override {\\n        _burnGame(from, gameId);\\n        _recoverAssets(from, to, gameId, assetIds);\\n    }\\n\\n    /// @notice Burn a GAME token.\\n    /// @param gameId The id of the GAME to destroy.\\n    function burn(uint256 gameId) external override(ERC721BaseToken, IGameToken) {\\n        _burnGame(_msgSender(), gameId);\\n    }\\n\\n    /// @notice Burn a GAME token on behalf of owner.\\n    /// @param from The address whose GAME is being burnt.\\n    /// @param gameId The id of the GAME to burn.\\n    function burnFrom(address from, uint256 gameId) external override(ERC721BaseToken, IGameToken) {\\n        require(from != address(0), \\\"NOT_FROM_ZEROADDRESS\\\");\\n        _burnGame(from, gameId);\\n    }\\n\\n    /// @notice Transfer assets from a burnt GAME.\\n    /// @param from Previous owner of the burnt game.\\n    /// @param to Address that will receive the assets.\\n    /// @param gameId Id of the burnt GAME token.\\n    /// @param assetIds The assets to recover from the burnt GAME.\\n    function recoverAssets(\\n        address from,\\n        address to,\\n        uint256 gameId,\\n        uint256[] memory assetIds\\n    ) public override {\\n        _recoverAssets(from, to, gameId, assetIds);\\n    }\\n\\n    /// @notice Get the amount of each assetId in a GAME.\\n    /// @param gameId The game to query.\\n    /// @param assetIds The assets to get balances for.\\n    function getAssetBalances(uint256 gameId, uint256[] calldata assetIds)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        uint256 storageId = _storageId(gameId);\\n        require(_ownerOf(gameId) != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        uint256 length = assetIds.length;\\n        uint256[] memory assets;\\n        assets = new uint256[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            assets[i] = _gameAssets[storageId][assetIds[i]];\\n        }\\n        return assets;\\n    }\\n\\n    function getExactNumOfLandsRequired(uint256 gameId) external view override returns (uint256) {\\n        uint256 storageId = _storageId(gameId);\\n        return _exactNumOfLandsRequired[storageId];\\n    }\\n\\n    /// @notice Get game editor status.\\n    /// @param gameOwner The address of the owner of the GAME.\\n    /// @param editor The address of the editor to set.\\n    /// @return isEditor Editor status of editor for given tokenId.\\n    function isGameEditor(address gameOwner, address editor) external view override returns (bool isEditor) {\\n        return _gameEditors[gameOwner][editor];\\n    }\\n\\n    /// @notice Called by other contracts to check if this can receive erc1155 batch.\\n    /// @param operator The address of the operator in the current tx.\\n    /// @return the bytes4 value 0xbc197c81.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address, /*from*/\\n        uint256[] calldata, /*ids*/\\n        uint256[] calldata, /*values*/\\n        bytes calldata /*data*/\\n    ) external view override returns (bytes4) {\\n        if (operator == address(this)) {\\n            return ERC1155_BATCH_RECEIVED;\\n        }\\n        revert(\\\"ERC1155_BATCH_REJECTED\\\");\\n    }\\n\\n    /// @notice Called by other contracts to check if this can receive erc1155 tokens.\\n    /// @param operator The address of the operator in the current tx.\\n    /// @return the bytes4 value 0xf23a6e61.\\n    function onERC1155Received(\\n        address operator,\\n        address, /*from*/\\n        uint256, /*id*/\\n        uint256, /*value*/\\n        bytes calldata /*data*/\\n    ) external view override returns (bytes4) {\\n        if (operator == address(this)) {\\n            return ERC1155_RECEIVED;\\n        }\\n        revert(\\\"ERC1155_REJECTED\\\");\\n    }\\n\\n    /// @notice Return the name of the token contract.\\n    /// @return The name of the token contract.\\n    function name() external pure override returns (string memory) {\\n        return \\\"The Sandbox: GAME token\\\";\\n    }\\n\\n    /// @notice Get the symbol of the token contract.\\n    /// @return the symbol of the token contract.\\n    function symbol() external pure override returns (string memory) {\\n        return \\\"GAME\\\";\\n    }\\n\\n    /// @notice Get the creator of the token type `id`.\\n    /// @param gameId The id of the token to get the creator of.\\n    /// @return the creator of the token type `id`.\\n    function creatorOf(uint256 gameId) public view override returns (address) {\\n        require(gameId != uint256(0), \\\"GAME_NEVER_MINTED\\\");\\n        uint256 id = _storageId(gameId);\\n        address originalCreator = address(uint160(id / CREATOR_OFFSET_MULTIPLIER));\\n        address newCreator = _creatorship[id];\\n        if (newCreator != address(0)) {\\n            return newCreator;\\n        }\\n        return originalCreator;\\n    }\\n\\n    /// @notice Return the URI of a specific token.\\n    /// @param gameId The id of the token.\\n    /// @return uri The URI of the token metadata.\\n    function tokenURI(uint256 gameId) public view override returns (string memory uri) {\\n        require(_ownerOf(gameId) != address(0), \\\"BURNED_OR_NEVER_MINTED\\\");\\n        uint256 id = _storageId(gameId);\\n        return _toFullURI(_metaData[id]);\\n    }\\n\\n    /// @notice Check if the contract supports an interface.\\n    /// 0x01ffc9a7 is ERC-165.\\n    /// 0x80ac58cd is ERC-721.\\n    /// @param id The id of the interface.\\n    /// @return if the interface is supported.\\n    function supportsInterface(bytes4 id) public pure override returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd || id == 0x5b5e139f;\\n    }\\n\\n    /// @notice Add assets to an existing GAME.\\n    /// @param from The address of the current owner of assets.\\n    /// @param strgId The storageId of the GAME to add assets to.\\n    /// @param assetIds The id of the asset to add to GAME.\\n    /// @param amounts The amount of each asset to add to GAME.\\n    function _addAssets(\\n        address from,\\n        uint256 strgId,\\n        uint256[] memory assetIds,\\n        uint256[] memory amounts\\n    ) internal {\\n        if (assetIds.length == 0) {\\n            return;\\n        }\\n        require(assetIds.length == amounts.length, \\\"INVALID_INPUT_LENGTHS\\\");\\n        uint256 currentValue;\\n        for (uint256 i = 0; i < assetIds.length; i++) {\\n            currentValue = _gameAssets[strgId][assetIds[i]];\\n            require(amounts[i] != 0, \\\"INVALID_ASSET_ADDITION\\\");\\n            _gameAssets[strgId][assetIds[i]] = currentValue + amounts[i];\\n        }\\n        if (assetIds.length == 1) {\\n            _asset.safeTransferFrom(from, address(this), assetIds[0], amounts[0], \\\"\\\");\\n        } else {\\n            _asset.safeBatchTransferFrom(from, address(this), assetIds, amounts, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Remove assets from a GAME.\\n    /// @param id The storageId of the GAME to remove assets from.\\n    /// @param assetIds An array of asset Ids to remove.\\n    /// @param values An array of the number of each asset id to remove.\\n    /// @param to The address to send removed assets to.\\n    function _removeAssets(\\n        uint256 id,\\n        uint256[] memory assetIds,\\n        uint256[] memory values,\\n        address to\\n    ) internal {\\n        if (assetIds.length == 0) {\\n            return;\\n        }\\n        require(assetIds.length == values.length && assetIds.length != 0, \\\"INVALID_INPUT_LENGTHS\\\");\\n        uint256 currentValue;\\n        for (uint256 i = 0; i < assetIds.length; i++) {\\n            currentValue = _gameAssets[id][assetIds[i]];\\n            require(currentValue != 0 && values[i] != 0 && values[i] <= currentValue, \\\"INVALID_ASSET_REMOVAL\\\");\\n            _gameAssets[id][assetIds[i]] = currentValue - values[i];\\n        }\\n\\n        if (assetIds.length == 1) {\\n            _asset.safeTransferFrom(address(this), to, assetIds[0], values[0], \\\"\\\");\\n        } else {\\n            _asset.safeBatchTransferFrom(address(this), to, assetIds, values, \\\"\\\");\\n        }\\n    }\\n\\n    /// @dev See burn / burnFrom.\\n    function _burnGame(address from, uint256 gameId) internal {\\n        uint256 storageId = _storageId(gameId);\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(storageId);\\n        address msgSender = _msgSender();\\n        require(\\n            msgSender == owner ||\\n                (operatorEnabled && _operators[storageId] == msgSender) ||\\n                _superOperators[msgSender] ||\\n                _operatorsForAll[from][msgSender],\\n            \\\"UNAUTHORIZED_BURN\\\"\\n        );\\n\\n        delete _metaData[storageId];\\n        delete _exactNumOfLandsRequired[storageId];\\n        _creatorship[gameId] = address(0);\\n        _burn(from, owner, gameId);\\n    }\\n\\n    /// @dev See recoverAssets.\\n    function _recoverAssets(\\n        address from,\\n        address to,\\n        uint256 gameId,\\n        uint256[] memory assetIds\\n    ) internal notToZero(to) notToThis(to) {\\n        require(_ownerOf(gameId) == address(0), \\\"ONLY_FROM_BURNED_TOKEN\\\");\\n        uint256 storageId = _storageId(gameId);\\n        require(from == _msgSender(), \\\"INVALID_RECOVERY\\\");\\n        _check_withdrawal_authorized(from, gameId);\\n        require(assetIds.length > 0, \\\"WITHDRAWAL_COMPLETE\\\");\\n        uint256[] memory values;\\n        values = new uint256[](assetIds.length);\\n        for (uint256 i = 0; i < assetIds.length; i++) {\\n            values[i] = _gameAssets[storageId][assetIds[i]];\\n            delete _gameAssets[storageId][assetIds[i]];\\n        }\\n        _asset.safeBatchTransferFrom(address(this), to, assetIds, values, \\\"\\\");\\n\\n        GameData memory recovery;\\n        recovery.assetIdsToRemove = assetIds;\\n        recovery.assetAmountsToRemove = values;\\n        emit GameTokenUpdated(gameId, 0, recovery);\\n    }\\n\\n    /// @dev Create a new gameId and associate it with an owner.\\n    /// @param from The address of one creating the game.\\n    /// @param to The address of the Game owner.\\n    /// @param subId The id to use when generating the new GameId.\\n    /// @param version The version number part of the gameId.\\n    /// @param isCreation Whether this is a brand new GAME (as opposed to an update).\\n    /// @return id The newly created gameId.\\n    function _mintGame(\\n        address from,\\n        address to,\\n        uint64 subId,\\n        uint16 version,\\n        bool isCreation\\n    ) internal returns (uint256 id, uint256 storageId) {\\n        uint16 idVersion;\\n        uint256 gameId;\\n        uint256 strgId;\\n        if (isCreation) {\\n            idVersion = 1;\\n            gameId = _generateTokenId(from, subId, _chainIndex, idVersion);\\n            strgId = _storageId(gameId);\\n            require(_owners[strgId] == 0, \\\"STORAGE_ID_REUSE_FORBIDDEN\\\");\\n        } else {\\n            idVersion = version;\\n            gameId = _generateTokenId(from, subId, _chainIndex, idVersion);\\n            strgId = _storageId(gameId);\\n        }\\n\\n        _owners[strgId] = (uint256(idVersion) << 200) + uint256(uint160(to));\\n        _numNFTPerAddress[to]++;\\n        emit Transfer(address(0), to, gameId);\\n        return (gameId, strgId);\\n    }\\n\\n    /// @dev Allow token owner to set game editors.\\n    /// @param gameCreator The address of a GAME creator,\\n    /// @param editor The address of the editor to set.\\n    /// @param isEditor Add or remove the ability to edit.\\n    function _setGameEditor(\\n        address gameCreator,\\n        address editor,\\n        bool isEditor\\n    ) internal {\\n        emit GameEditorSet(gameCreator, editor, isEditor);\\n        _gameEditors[gameCreator][editor] = isEditor;\\n    }\\n\\n    /// @dev Bumps the version number of a game token, buring the previous\\n    /// version and minting a new one.\\n    /// @param from The address of the GAME token owner.\\n    /// @param gameId The Game token to bump the version of.\\n    /// @return The new gameId.\\n    function _bumpGameVersion(address from, uint256 gameId) internal returns (uint256) {\\n        address originalCreator = address(uint160(gameId / CREATOR_OFFSET_MULTIPLIER));\\n        uint64 subId = uint64(gameId / SUBID_MULTIPLIER);\\n        uint16 version = uint16(gameId);\\n        version++;\\n        address owner = _ownerOf(gameId);\\n        if (from == owner) {\\n            // caller is owner or metaTx on owner's behalf\\n            _burn(from, owner, gameId);\\n        } else if (_gameEditors[owner][from]) {\\n            // caller is editor or metaTx on editor's behalf, so we need to pass owner\\n            // instead of from or _burn will fail\\n            _burn(owner, owner, gameId);\\n        }\\n        (uint256 newId, ) = _mintGame(originalCreator, owner, subId, version, false);\\n        address newOwner = _ownerOf(newId);\\n        assert(owner == newOwner);\\n        return newId;\\n    }\\n\\n    /// @dev Get the a full URI string for a given hash + gameId.\\n    /// @param hash The 32 byte IPFS hash.\\n    /// @return The URI string.\\n    function _toFullURI(bytes32 hash) internal pure override returns (string memory) {\\n        return string(abi.encodePacked(\\\"ipfs://bafybei\\\", hash2base32(hash), \\\"/\\\", \\\"game.json\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0x0091eaeb111847035947eee09004e04439155a727b5690cf68bab462ede5b192\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down.\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\n\\ncontract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78a86fc419fc78e618cb6c7892c2c66c4d4a9cac7848d33d91d68aab755caa\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC721BaseToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n/* solhint-disable func-order, code-complexity */\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"./WithSuperOperators.sol\\\";\\nimport \\\"../interfaces/IERC721MandatoryTokenReceiver.sol\\\";\\nimport \\\"./ERC2771Handler.sol\\\";\\n\\ncontract ERC721BaseToken is IERC721Upgradeable, WithSuperOperators, ERC2771Handler {\\n    using AddressUpgradeable for address;\\n\\n    bytes4 internal constant _ERC721_RECEIVED = 0x150b7a02;\\n    bytes4 internal constant _ERC721_BATCH_RECEIVED = 0x4b808c46;\\n\\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\\n    bytes4 internal constant ERC721_MANDATORY_RECEIVER = 0x5e8bf644;\\n\\n    uint256 internal constant NOT_ADDRESS = 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000;\\n    uint256 internal constant OPERATOR_FLAG = (2**255);\\n    uint256 internal constant NOT_OPERATOR_FLAG = OPERATOR_FLAG - 1;\\n    uint256 internal constant BURNED_FLAG = (2**160);\\n\\n    mapping(address => uint256) internal _numNFTPerAddress;\\n    mapping(uint256 => uint256) internal _owners;\\n    mapping(address => mapping(address => bool)) internal _operatorsForAll;\\n    mapping(uint256 => address) internal _operators;\\n    uint8 internal _chainIndex;\\n\\n    function __ERC721BaseToken_initialize(uint8 chainIndex) internal {\\n        _chainIndex = chainIndex;\\n    }\\n\\n    /// @notice Approve an operator to spend tokens on the senders behalf.\\n    /// @param operator The address receiving the approval.\\n    /// @param id The id of the token.\\n    function approve(address operator, uint256 id) external override {\\n        uint256 ownerData = _owners[_storageId(id)];\\n        address owner = _ownerOf(id);\\n        address msgSender = _msgSender();\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(\\n            owner == msgSender || _superOperators[msgSender] || _operatorsForAll[owner][msgSender],\\n            \\\"UNAUTHORIZED_APPROVAL\\\"\\n        );\\n        _approveFor(ownerData, operator, id);\\n    }\\n\\n    /// @notice Approve an operator to spend tokens on the sender behalf.\\n    /// @param sender The address giving the approval.\\n    /// @param operator The address receiving the approval.\\n    /// @param id The id of the token.\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) external {\\n        uint256 ownerData = _owners[_storageId(id)];\\n        address msgSender = _msgSender();\\n        require(sender != address(0), \\\"ZERO_ADDRESS_SENDER\\\");\\n        require(\\n            msgSender == sender || _superOperators[msgSender] || _operatorsForAll[sender][msgSender],\\n            \\\"UNAUTHORIZED_APPROVAL\\\"\\n        );\\n        require(address(uint160(ownerData)) == sender, \\\"OWNER_NOT_SENDER\\\");\\n        _approveFor(ownerData, operator, id);\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external override {\\n        _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            require(_checkOnERC721Received(_msgSender(), from, to, id, \\\"\\\"), \\\"ERC721_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver know of the transfer.\\n    /// @param from The send of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external override {\\n        safeTransferFrom(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @notice Transfer many tokens between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external {\\n        _batchTransferFrom(from, to, ids, data, false);\\n    }\\n\\n    /// @notice Transfer many tokens between 2 addresses, while\\n    /// ensuring the receiving contract has a receiver method.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external {\\n        _batchTransferFrom(from, to, ids, data, true);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param sender The address giving the approval.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external {\\n        require(sender != address(0), \\\"Invalid sender address\\\");\\n        address msgSender = _msgSender();\\n        require(msgSender == sender || _superOperators[msgSender], \\\"UNAUTHORIZED_APPROVE_FOR_ALL\\\");\\n\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAll(address operator, bool approved) external override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @notice Burns token `id`.\\n    /// @param id The token which will be burnt.\\n    function burn(uint256 id) external virtual {\\n        _burn(_msgSender(), _ownerOf(id), id);\\n    }\\n\\n    /// @notice Burn token`id` from `from`.\\n    /// @param from address whose token is to be burnt.\\n    /// @param id The token which will be burnt.\\n    function burnFrom(address from, uint256 id) external virtual {\\n        require(from != address(0), \\\"NOT_FROM_ZEROADDRESS\\\");\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        address msgSender = _msgSender();\\n        require(\\n            msgSender == from ||\\n                (operatorEnabled && _operators[id] == msgSender) ||\\n                _superOperators[msgSender] ||\\n                _operatorsForAll[from][msgSender],\\n            \\\"UNAUTHORIZED_BURN\\\"\\n        );\\n        _burn(from, owner, id);\\n    }\\n\\n    /// @notice Get the number of tokens owned by an address.\\n    /// @param owner The address to look for.\\n    /// @return The number of tokens owned by the address.\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS_OWNER\\\");\\n        return _numNFTPerAddress[owner];\\n    }\\n\\n    /// @notice Get the owner of a token.\\n    /// @param id The id of the token.\\n    /// @return owner The address of the token owner.\\n    function ownerOf(uint256 id) external view override returns (address owner) {\\n        owner = _ownerOf(id);\\n        require(owner != address(0), \\\"NONEXISTANT_TOKEN\\\");\\n    }\\n\\n    /// @notice Get the approved operator for a specific token.\\n    /// @param id The id of the token.\\n    /// @return The address of the operator.\\n    function getApproved(uint256 id) external view override returns (address) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        if (operatorEnabled) {\\n            return _operators[id];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Check if the sender approved the operator.\\n    /// @param owner The address of the owner.\\n    /// @param operator The address of the operator.\\n    /// @return isOperator The status of the approval.\\n    function isApprovedForAll(address owner, address operator) external view override returns (bool isOperator) {\\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    /// @param data Additional data.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public override {\\n        _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract()) {\\n            require(_checkOnERC721Received(_msgSender(), from, to, id, data), \\\"ERC721_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @notice Check if the contract supports an interface.\\n    /// 0x01ffc9a7 is ERC-165.\\n    /// 0x80ac58cd is ERC-721\\n    /// @param id The id of the interface.\\n    /// @return Whether the interface is supported.\\n    function supportsInterface(bytes4 id) public pure virtual override returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd;\\n    }\\n\\n    function isBurned(uint256 estateId) public view returns (bool) {\\n        uint256 storageId = _storageId(estateId);\\n        return (_owners[storageId] & BURNED_FLAG) == BURNED_FLAG;\\n    }\\n\\n    /// @dev By overriding this function in an implementation which inherits this contract, you can enable versioned tokenIds without the extra overhead of writing to a new storage slot in _owners each time a version is incremented. See GameToken._storageId() for an example, where the storageId is the tokenId minus the version number.\\n    /// !!! Caution !!! Overriding this function without taking appropriate care could lead to\\n    /// ownerOf() returning an owner for non-existent tokens. Tests should be written to\\n    /// guard against introducing this bug.\\n    /// @param id The id of a token.\\n    /// @return The id used for storage mappings.\\n    function _storageId(uint256 id) internal view virtual returns (uint256) {\\n        return id;\\n    }\\n\\n    function _updateOwnerData(\\n        uint256 id,\\n        uint256 oldData,\\n        address newOwner,\\n        bool hasOperator\\n    ) internal virtual {\\n        if (hasOperator) {\\n            _owners[_storageId(id)] = (oldData & NOT_ADDRESS) | OPERATOR_FLAG | uint256(uint160(newOwner));\\n        } else {\\n            _owners[_storageId(id)] = ((oldData & NOT_ADDRESS) & NOT_OPERATOR_FLAG) | uint256(uint160(newOwner));\\n        }\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal {\\n        _numNFTPerAddress[from]--;\\n        _numNFTPerAddress[to]++;\\n        _updateOwnerData(id, _owners[_storageId(id)], to, false);\\n        emit Transfer(from, to, id);\\n    }\\n\\n    /// @dev See approveFor.\\n    function _approveFor(\\n        uint256 ownerData,\\n        address operator,\\n        uint256 id\\n    ) internal {\\n        address owner = _ownerOf(id);\\n        if (operator == address(0)) {\\n            _updateOwnerData(id, ownerData, owner, false);\\n        } else {\\n            _updateOwnerData(id, ownerData, owner, true);\\n            _operators[id] = operator;\\n        }\\n        emit Approval(owner, operator, id);\\n    }\\n\\n    /// @dev See batchTransferFrom.\\n    function _batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory data,\\n        bool safe\\n    ) internal {\\n        address msgSender = _msgSender();\\n        bool authorized = msgSender == from || _superOperators[msgSender] || _operatorsForAll[from][msgSender];\\n\\n        require(from != address(0), \\\"NOT_FROM_ZEROADDRESS\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n\\n        uint256 numTokens = ids.length;\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            if (id == 0) {\\n                numTokens--;\\n                continue;\\n            }\\n            (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n            require(owner == from, \\\"BATCHTRANSFERFROM_NOT_OWNER\\\");\\n            require(authorized || (operatorEnabled && _operators[id] == msgSender), \\\"NOT_AUTHORIZED\\\");\\n            _updateOwnerData(id, _owners[_storageId(id)], to, false);\\n            emit Transfer(from, to, id);\\n        }\\n        if (from != to) {\\n            _numNFTPerAddress[from] -= numTokens;\\n            _numNFTPerAddress[to] += numTokens;\\n        }\\n        if (to.isContract() && (safe || _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER))) {\\n            require(_checkOnERC721BatchReceived(msgSender, from, to, ids, data), \\\"ERC721_BATCH_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @dev See setApprovalForAll.\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(!_superOperators[operator], \\\"INVALID_APPROVAL_CHANGE\\\");\\n        _operatorsForAll[sender][operator] = approved;\\n\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @dev See burn.\\n    function _burn(\\n        address from,\\n        address owner,\\n        uint256 id\\n    ) internal {\\n        require(from == owner, \\\"NOT_OWNER\\\");\\n        uint256 storageId = _storageId(id);\\n        _owners[storageId] = (_owners[storageId] & NOT_OPERATOR_FLAG) | BURNED_FLAG; // record as non owner but keep track of last owner\\n        _numNFTPerAddress[from]--;\\n        emit Transfer(from, address(0), id);\\n    }\\n\\n    /// @dev Check if receiving contract accepts erc721 transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The adddress we want to transfer to.\\n    /// @param tokenId The id of the token we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    /// @return Whether the expected value of 0x150b7a02 is returned.\\n    function _checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = IERC721ReceiverUpgradeable(to).onERC721Received(operator, from, tokenId, _data);\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /// @dev Check if receiving contract accepts erc721 batch transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The adddress we want to transfer to.\\n    /// @param ids The ids of the tokens we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    /// @return Whether the expected value of 0x4b808c46 is returned.\\n    function _checkOnERC721BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = IERC721MandatoryTokenReceiver(to).onERC721BatchReceived(operator, from, ids, _data);\\n        return (retval == _ERC721_BATCH_RECEIVED);\\n    }\\n\\n    /// @dev See ownerOf\\n    function _ownerOf(uint256 id) internal view virtual returns (address) {\\n        uint256 data = _owners[_storageId(id)];\\n        if ((data & BURNED_FLAG) == BURNED_FLAG) {\\n            return address(0);\\n        }\\n        return address(uint160(data));\\n    }\\n\\n    /// @dev Get the owner and operatorEnabled status of a token.\\n    /// @param id The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\\n    function _ownerAndOperatorEnabledOf(uint256 id)\\n        internal\\n        view\\n        virtual\\n        returns (address owner, bool operatorEnabled)\\n    {\\n        uint256 data = _owners[_storageId(id)];\\n        if ((data & BURNED_FLAG) == BURNED_FLAG) {\\n            owner = address(0);\\n        } else {\\n            owner = address(uint160(data));\\n        }\\n        operatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n    }\\n\\n    /// @dev Check whether a transfer is a meta Transaction or not.\\n    /// @param from The address who initiated the transfer (may differ from msg.sender).\\n    /// @param to The address recieving the token.\\n    /// @param id The token being transferred.\\n    /// @return isMetaTx Whether or not the transaction is a MetaTx.\\n    function _checkTransfer(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal view returns (bool isMetaTx) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        address msgSender = _msgSender();\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(owner == from, \\\"CHECKTRANSFER_NOT_OWNER\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(\\n            msgSender == owner ||\\n                _superOperators[msgSender] ||\\n                _operatorsForAll[from][msgSender] ||\\n                (operatorEnabled && _operators[id] == msgSender),\\n            \\\"UNAUTHORIZED_TRANSFER\\\"\\n        );\\n        return true;\\n    }\\n\\n    /// @dev Check if there was enough gas.\\n    /// @param _contract The address of the contract to check.\\n    /// @param interfaceId The id of the interface we want to test.\\n    /// @return Whether or not this check succeeded.\\n    function _checkInterfaceWith10000Gas(address _contract, bytes4 interfaceId) internal view returns (bool) {\\n        bool success;\\n        bool result;\\n        bytes memory callData = abi.encodeWithSelector(ERC165ID, interfaceId);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let call_ptr := add(0x20, callData)\\n            let call_size := mload(callData)\\n            let output := mload(0x40) // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(output, 0x0)\\n            success := staticcall(10000, _contract, call_ptr, call_size, output, 0x20) // 32 bytes\\n            result := mload(output)\\n        }\\n        // (10000 / 63) \\\"not enough for supportsInterface(...)\\\" // consume all gas, so caller can potentially know that there was not enough gas\\n        assert(gasleft() > 158);\\n        return success && result;\\n    }\\n}\\n\",\"keccak256\":\"0x97ed60ed2a69e25bdbf833cef61761a4a7fbf73e126647ce29ebaba23fdd89bf\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ImmutableERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../BaseWithStorage/ERC721BaseToken.sol\\\";\\n\\ncontract ImmutableERC721 is ERC721BaseToken {\\n    uint256 internal constant CREATOR_OFFSET_MULTIPLIER = uint256(2)**(256 - 160);\\n    uint256 internal constant SUBID_MULTIPLIER = uint256(2)**(256 - 224);\\n    uint256 internal constant CHAIN_INDEX_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 64 - 16);\\n    uint256 internal constant STORAGE_ID_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000;\\n    uint256 internal constant VERSION_MASK = 0x000000FFFFFFFF00000000000000000000000000000000000000000000000000;\\n\\n    bytes32 internal constant base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n\\n    /// @dev An implementation which handles versioned tokenIds.\\n    /// @param id The tokenId to get the owner of.\\n    /// @return The address of the owner.\\n    function _ownerOf(uint256 id) internal view virtual override returns (address) {\\n        uint256 packedData = _owners[_storageId(id)];\\n        uint16 idVersion = uint16(id);\\n        uint16 storageVersion = uint16((packedData & VERSION_MASK) >> 200);\\n\\n        if (((packedData & BURNED_FLAG) == BURNED_FLAG) || idVersion != storageVersion) {\\n            return address(0); //should be here\\n        }\\n\\n        return address(uint160(packedData));\\n    }\\n\\n    /// @dev Check if a withdrawal is allowed.\\n    /// @param from The address requesting the withdrawal.\\n    /// @param tokenId The id of the token to withdraw assets from.\\n    function _check_withdrawal_authorized(address from, uint256 tokenId) internal view virtual {\\n        require(from != address(uint160(0)), \\\"SENDER_ZERO_ADDRESS\\\");\\n        require(from == _withdrawalOwnerOf(tokenId), \\\"LAST_OWNER_NOT_EQUAL_SENDER\\\");\\n    }\\n\\n    /// @dev Get the address allowed to withdraw associated tokens from the parent token.\\n    /// If too many associated tokens in TOKEN, block.gaslimit won't allow detroy and withdraw in 1 tx.\\n    /// An owner may destroy their token, then withdraw associated tokens in a later tx (even\\n    /// though ownerOf(id) would be address(0) after burning.)\\n    /// @param id The id of the token to query.\\n    /// @return the address of the owner before burning.\\n    function _withdrawalOwnerOf(uint256 id) internal view virtual returns (address) {\\n        uint256 packedData = _owners[_storageId(id)];\\n        return address(uint160(packedData));\\n    }\\n\\n    /// @notice Get the storageID (no chainIndex or version data), which is constant for a given token.\\n    /// @param tokenId The tokenId for which to find the first token Id.\\n    /// @return The storage id for this token.\\n    function getStorageId(uint256 tokenId) external pure virtual returns (uint256) {\\n        return _storageId(tokenId);\\n    }\\n\\n    /// @dev Get the storageId (full id without the version number) from the full tokenId.\\n    /// @param id The full tokenId for the GAME token.\\n    /// @return The storageId.\\n    function _storageId(uint256 id) internal pure virtual override returns (uint256) {\\n        return uint256(id & STORAGE_ID_MASK);\\n    }\\n\\n    /// @dev Get the a full URI string for a given hash + gameId.\\n    /// @param hash The 32 byte IPFS hash.\\n    /// @return The URI string.\\n    function _toFullURI(bytes32 hash) internal pure virtual returns (string memory) {\\n        return string(abi.encodePacked(\\\"ipfs://bafybei\\\", hash2base32(hash), \\\"/\\\", \\\"token.json\\\"));\\n    }\\n\\n    /// @dev Create a new tokenId and associate it with an owner.\\n    /// This is a packed id, consisting of 4 parts:\\n    /// the creator's address, a uint64 subId, a uint18 chainIndex and a uint16 version.\\n    /// @param creator The address of the Token creator.\\n    /// @param subId The id used to generate the id.\\n    /// @param version The publicversion used to generate the id.\\n    function _generateTokenId(\\n        address creator,\\n        uint64 subId,\\n        uint8 chainIndex,\\n        uint16 version\\n    ) internal pure returns (uint256) {\\n        return\\n            uint256(uint160(creator)) *\\n            CREATOR_OFFSET_MULTIPLIER +\\n            uint64(subId) *\\n            SUBID_MULTIPLIER +\\n            chainIndex *\\n            CHAIN_INDEX_OFFSET_MULTIPLIER +\\n            uint16(version);\\n    }\\n\\n    /// @dev Convert a 32 byte hash to a base 32 string.\\n    /// @param hash A 32 byte (IPFS) hash.\\n    /// @return _uintAsString The hash as a base 32 string.\\n    // solhint-disable-next-line security/no-assign-params\\n    function hash2base32(bytes32 hash) internal pure returns (string memory _uintAsString) {\\n        uint256 _i = uint256(hash);\\n        uint256 k = 52;\\n        bytes memory bstr = new bytes(k);\\n        bstr[--k] = base32Alphabet[uint8((_i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (_i % (2**s)) << (5-s)\\n        _i /= 8;\\n        while (k > 0) {\\n            bstr[--k] = base32Alphabet[_i % 32];\\n            _i /= 32;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0x6d94104194529bc414a00e952a32aa90e9c8b82ac3cedfb72b173e4a1826bb8e\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithAdmin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ncontract WithAdmin {\\n    address internal _admin;\\n\\n    /// @dev Emits when the contract administrator is changed.\\n    /// @param oldAdmin The address of the previous administrator.\\n    /// @param newAdmin The address of the new administrator.\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @dev Get the current administrator of this contract.\\n    /// @return The current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"ADMIN_ACCESS_DENIED\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0xf2ce40f1b23052a50a5b2d5ad61fbc04ab6c9fb2e5b1dba17ccddf4507e4649f\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithMinter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"./WithAdmin.sol\\\";\\n\\ncontract WithMinter is WithAdmin {\\n    address internal _minter;\\n\\n    /// @dev Emits when the Minter address is changed\\n    /// @param oldMinter The previous Minter address\\n    /// @param newMinter The new Minter address\\n    event MinterChanged(address oldMinter, address newMinter);\\n\\n    modifier onlyMinter() {\\n        require(msg.sender == _minter, \\\"MINTER_ACCESS_DENIED\\\");\\n        _;\\n    }\\n\\n    /// @dev Get the current minter of this contract.\\n    /// @return The current minter of this contract.\\n    function getMinter() external view returns (address) {\\n        return _minter;\\n    }\\n\\n    /// @dev Change the minter to be `newMinter`.\\n    /// @param newMinter The address of the new minter.\\n    function changeMinter(address newMinter) external onlyAdmin() {\\n        emit MinterChanged(_minter, newMinter);\\n        _minter = newMinter;\\n    }\\n}\\n\",\"keccak256\":\"0xf9b764b1596ab97154b71ca8b57980695a9787f5f9f7f970976193065bde2206\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithSuperOperators.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"./WithAdmin.sol\\\";\\n\\ncontract WithSuperOperators is WithAdmin {\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address superOperator, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external {\\n        require(msg.sender == _admin, \\\"only admin is allowed to add super operators\\\");\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0xa0d9b0e08ccae5e6b1f56e41ef750a68686d8958bc398369ac283aa4440f87ab\",\"license\":\"MIT\"},\"src/solc_0.8/common/Libraries/UintToUintMap.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts-0.8/utils/structs/EnumerableSet.sol\\\";\\n\\nlibrary EnumerableMap {\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    struct Map {\\n        // Storage of keys\\n        EnumerableSet.UintSet _keys;\\n        mapping(uint256 => uint256) _values;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        uint256 key,\\n        uint256 value\\n    ) private returns (bool) {\\n        map._values[key] = value;\\n        return map._keys.add(key);\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, uint256 key) private returns (bool) {\\n        delete map._values[key];\\n        return map._keys.remove(key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, uint256 key) private view returns (bool) {\\n        return map._keys.contains(key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._keys.length();\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index) private view returns (uint256, uint256) {\\n        uint256 key = map._keys.at(index);\\n        return (key, map._values[key]);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     */\\n    function _tryGet(Map storage map, uint256 key) private view returns (bool, uint256) {\\n        uint256 value = map._values[key];\\n        if (value == uint256(0)) {\\n            return (_contains(map, key), uint256(0));\\n        } else {\\n            return (true, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, uint256 key) private view returns (uint256) {\\n        uint256 value = map._values[key];\\n        require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n        return value;\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\\n     */\\n    function _get(\\n        Map storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) private view returns (uint256) {\\n        uint256 value = map._values[key];\\n        require(value != 0 || _contains(map, key), errorMessage);\\n        return value;\\n    }\\n\\n    struct UintToUintMap {\\n        EnumerableMap.Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _set(map._inner, uint256(key), uint256(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key) internal returns (bool) {\\n        return _remove(map._inner, uint256(key));\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key) internal view returns (bool) {\\n        return _contains(map._inner, uint256(key));\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index) internal view returns (uint256, uint256) {\\n        (uint256 key, uint256 value) = _at(map._inner, index);\\n        return (key, value);\\n    }\\n\\n    /**\\n     * @dev Tries to returns the value associated with `key`.  O(1).\\n     * Does not revert if `key` is not in the map.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryGet(UintToUintMap storage map, uint256 key) internal view returns (bool, uint256) {\\n        (bool success, uint256 value) = _tryGet(map._inner, uint256(key));\\n        return (success, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key) internal view returns (uint256) {\\n        return uint256(_get(map._inner, key));\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryGet}.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return uint256(_get(map._inner, key, errorMessage));\\n    }\\n}\\n\",\"keccak256\":\"0x35a59631b269d07b687c95ef7587214e54a49ebf0288b69b328c5b346de4cfea\"},\"src/solc_0.8/common/interfaces/IAssetToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ninterface IAssetToken {\\n    function mint(\\n        address creator,\\n        uint40 packId,\\n        bytes32 hash,\\n        uint256 supply,\\n        uint8 rarity,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256 id);\\n\\n    function mintMultiple(\\n        address creator,\\n        uint40 packId,\\n        bytes32 hash,\\n        uint256[] calldata supplies,\\n        bytes calldata rarityPack,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256[] memory ids);\\n\\n    // fails on non-NFT or nft who do not have collection (was a mistake)\\n    function collectionOf(uint256 id) external view returns (uint256);\\n\\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\\n\\n    // return true for Non-NFT ERC1155 tokens which exists\\n    function isCollection(uint256 id) external view returns (bool);\\n\\n    function collectionIndexOf(uint256 id) external view returns (uint256);\\n\\n    function extractERC721From(\\n        address sender,\\n        uint256 id,\\n        address to\\n    ) external returns (uint256 newId);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n\\n    function isSuperOperator(address who) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb031abbf5d18794cc8f466bda0d029f61d507ac08be2a14aa57a704e3c7d6563\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721MandatoryTokenReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5e8bf644.\\ninterface IERC721MandatoryTokenReceiver {\\n    function onERC721BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x4b808c46\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x150b7a02\\n\\n    // needs to implements EIP-165\\n    // function supportsInterface(bytes4 interfaceId)\\n    //     external\\n    //     view\\n    //     returns (bool);\\n}\\n\",\"keccak256\":\"0xb2a8c2fcf496f383bedc0f2925fb9ff51e7a725828fcc73a22fd24f66c57c857\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IGameToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @title Interface for the Game token\\n\\ninterface IGameToken {\\n    struct GameData {\\n        uint256[] assetIdsToRemove;\\n        uint256[] assetAmountsToRemove;\\n        uint256[] assetIdsToAdd;\\n        uint256[] assetAmountsToAdd;\\n        bytes32 uri; // ipfs hash (without the prefix, assume cidv1 folder)\\n        uint256 exactNumOfLandsRequired;\\n    }\\n\\n    function createGame(\\n        address from,\\n        address to,\\n        GameData calldata creation,\\n        address editor,\\n        uint64 subId\\n    ) external returns (uint256 id);\\n\\n    function burn(uint256 gameId) external;\\n\\n    function burnFrom(address from, uint256 gameId) external;\\n\\n    function recoverAssets(\\n        address from,\\n        address to,\\n        uint256 gameId,\\n        uint256[] calldata assetIds\\n    ) external;\\n\\n    function burnAndRecover(\\n        address from,\\n        address to,\\n        uint256 gameId,\\n        uint256[] calldata assetIds\\n    ) external;\\n\\n    function updateGame(\\n        address from,\\n        uint256 gameId,\\n        GameData calldata update\\n    ) external returns (uint256);\\n\\n    function getAssetBalances(uint256 gameId, uint256[] calldata assetIds) external view returns (uint256[] calldata);\\n\\n    function getExactNumOfLandsRequired(uint256 gameId) external view returns (uint256);\\n\\n    function setGameEditor(\\n        address gameCreator,\\n        address editor,\\n        bool isEditor\\n    ) external;\\n\\n    function isGameEditor(address gameOwner, address editor) external view returns (bool isEditor);\\n\\n    function creatorOf(uint256 id) external view returns (address);\\n\\n    function transferCreatorship(\\n        uint256 gameId,\\n        address sender,\\n        address to\\n    ) external;\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function tokenURI(uint256 gameId) external returns (string memory uri);\\n\\n    function onERC1155Received(\\n        address operator,\\n        address, /*from*/\\n        uint256, /*id*/\\n        uint256, /*value*/\\n        bytes calldata /*data*/\\n    ) external view returns (bytes4);\\n\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address, /*from*/\\n        uint256[] calldata, /*ids*/\\n        uint256[] calldata, /*values*/\\n        bytes calldata /*data*/\\n    ) external view returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd34d80865a5d3eaa47108b91ce04f9cd67b528eb7ac4d48a3f72b0f278a325d8\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/ILandToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\ninterface LandToken {\\n    function batchTransferQuad(\\n        address from,\\n        address to,\\n        uint256[] calldata sizes,\\n        uint256[] calldata xs,\\n        uint256[] calldata ys,\\n        bytes calldata data\\n    ) external;\\n\\n    function transferQuad(\\n        address from,\\n        address to,\\n        uint256 size,\\n        uint256 x,\\n        uint256 y,\\n        bytes calldata data\\n    ) external;\\n\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function getX(uint256 id) external view returns (uint256);\\n\\n    function getY(uint256 id) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xf5f9f51b2b78d69db5ab7c099d32fe5a22ff5c80bc1dbc65ea77d9e0af2335d9\",\"license\":\"MIT\"},\"src/solc_0.8/estate/EstateBaseToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable code-complexity\\npragma solidity 0.8.2;\\n\\nimport \\\"../common/BaseWithStorage/ImmutableERC721.sol\\\";\\nimport \\\"../common/interfaces/ILandToken.sol\\\";\\nimport \\\"../Game/GameBaseToken.sol\\\";\\nimport \\\"../common/interfaces/IERC721MandatoryTokenReceiver.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../common/Libraries/UintToUintMap.sol\\\";\\nimport \\\"../common/BaseWithStorage/WithMinter.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @dev An updated Estate Token contract using a simplified verison of LAND with no Quads\\n\\ncontract EstateBaseToken is ImmutableERC721, Initializable, WithMinter {\\n    using EnumerableMap for EnumerableMap.UintToUintMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    uint8 internal constant OWNER = 0;\\n    uint8 internal constant ADD = 1;\\n    uint8 internal constant BREAK = 2;\\n    uint8 internal constant WITHDRAWAL = 3;\\n    uint16 internal constant GRID_SIZE = 408;\\n    uint64 internal _nextId; // max uint64 = 18,446,744,073,709,551,615\\n    mapping(uint256 => bytes32) internal _metaData;\\n\\n    // estates key = storageId\\n    // EnumerableMap.UintToUintMap keys = land ids\\n    // EnumerableMap.UintToUintMap values = game ids\\n    //map to a map\\n    mapping(uint256 => EnumerableMap.UintToUintMap) internal estates;\\n\\n    // gamesToLands key = gameId, value = landIds\\n    mapping(uint256 => EnumerableSet.UintSet) internal gamesToLands;\\n\\n    LandToken internal _land;\\n    GameBaseToken internal _gameToken;\\n\\n    /// @param landIds LAND tokenIds added, Games added, Games removed, uri\\n    /// @param gameId Games added\\n    /// @param uri ipfs hash (without the prefix, assume cidv1 folder)\\n    struct EstateCRUDData {\\n        uint256[] landIds;\\n        uint256[] gameIds;\\n        bytes32 uri;\\n    }\\n    struct EstateData {\\n        uint256[] landIds;\\n        uint256[] gameIds;\\n    }\\n\\n    /// @dev struct used for an update with multiple changes\\n    /// @dev gameIdsToReuse should be the first n gameIds from landAndGameAssociationsToRemove for minimum gas consumption\\n    struct UpdateEstateData {\\n        uint256[][] landAndGameAssociationsToAdd;\\n        uint256[][] landAndGameAssociationsToRemove;\\n        uint256[] gameIdsToReuse;\\n        uint256[] landIdsToAdd;\\n        uint256[] landIdsToRemove;\\n        bytes32 uri;\\n    }\\n\\n    /// @dev Emits when a estate is updated.\\n    /// @param oldId The id of the previous erc721 ESTATE token.\\n    /// @param newId The id of the newly minted token.\\n    /// @param update The changes made to the Estate.\\n    event EstateTokenUpdated(uint256 indexed oldId, uint256 indexed newId, EstateCRUDData update);\\n\\n    /// @dev Emits when a estate is updated.\\n    /// @param oldId The id of the previous erc721 ESTATE token.\\n    /// @param newId The id of the newly minted token.\\n    /// @param update The changes made to the Estate.\\n    event EstateTokenUpdatedII(uint256 indexed oldId, uint256 indexed newId, UpdateEstateData update);\\n\\n    event EstateTokenUpdatedV3(uint256 indexed oldId, uint256 indexed newId, EstateData update);\\n\\n    function initV1(\\n        address trustedForwarder,\\n        LandToken land,\\n        GameBaseToken gameToken,\\n        uint8 chainIndex\\n    ) public initializer {\\n        _gameToken = gameToken;\\n        _land = land;\\n        ERC721BaseToken.__ERC721BaseToken_initialize(chainIndex);\\n    }\\n\\n    // @todo Add access-control: minter-only? could inherit WithMinter.sol, the game token creator is minter only\\n    /// @notice Create a new estate token with lands.\\n    /// @param from The address of the one creating the estate.\\n    /// @param to The address that will own the estate.\\n    /// @param creation The data to use to create the estate.\\n    function createEstate(\\n        address from,\\n        address to,\\n        EstateCRUDData calldata creation\\n    ) external returns (uint256) {\\n        _check_authorized(from, ADD);\\n        require(creation.landIds.length == creation.gameIds.length, \\\"DIFFERENT_LENGTH_LANDS_GAMES\\\");\\n        (uint256 estateId, uint256 storageId) = _mintEstate(from, to, _nextId++, 1, true);\\n        _metaData[storageId] = creation.uri;\\n        _addLandsGames(from, storageId, creation.landIds, creation.gameIds);\\n        emit EstateTokenUpdated(0, estateId, creation);\\n        return estateId;\\n    }\\n\\n    function updateEstateV2(\\n        address from,\\n        address to,\\n        uint256 estateId,\\n        UpdateEstateData memory update\\n    ) external returns (uint256) {\\n        _check_hasOwnerRights(from, estateId);\\n        uint256 storageId = _storageId(estateId);\\n        _metaData[storageId] = update.uri;\\n        _check_authorized(from, ADD);\\n\\n        uint256 gameToAddLength = update.landAndGameAssociationsToAdd[1].length;\\n        uint256 gameToRemoveLength = update.landAndGameAssociationsToRemove[1].length;\\n        uint256 gameIdsToReuseLength = update.gameIdsToReuse.length;\\n\\n        /** add lands */\\n        //what if there are no lands?\\n        _addLands(storageId, from, update.landIdsToAdd);\\n\\n        /** remove association*/\\n        if (gameToRemoveLength > 0) {\\n            console.log(\\\"we should be here\\\");\\n            require(\\n                gameToRemoveLength == update.landAndGameAssociationsToRemove[0].length,\\n                \\\"DIFFERENT_LENGTH_LANDS_GAMES\\\"\\n            );\\n            require(update.gameIdsToReuse.length <= gameToAddLength, \\\"GAMES_TO_REUSE_MUST_BE_PRESENT_IN_GAMES_TO_ADD\\\");\\n            require(\\n                update.gameIdsToReuse.length < gameToRemoveLength,\\n                \\\"GAMES_TO_REUSE_MUST_BE_PRESENT_IN_GAMES_TO_REMOVE\\\"\\n            );\\n            for (uint256 i = 0; i < gameIdsToReuseLength; i++) {\\n                require(\\n                    update.gameIdsToReuse[i] == update.landAndGameAssociationsToAdd[1][i],\\n                    \\\"GAMES_TO_REUSE_MUST_BE_PRESENT_IN_GAMES_TO_ADD\\\"\\n                );\\n            }\\n            uint256 newLength = gameToRemoveLength - gameIdsToReuseLength;\\n            uint256[] memory gamesToTransfer = new uint256[](newLength);\\n            for (uint256 i = gameIdsToReuseLength; i < gameToRemoveLength; i++) {\\n                gamesToTransfer[i - gameIdsToReuseLength] = update.landAndGameAssociationsToRemove[1][i];\\n            } //there's a problem here, we're sending 0 games\\n\\n            _removeGamesOfLands(from, storageId, update.landAndGameAssociationsToRemove[1], gamesToTransfer);\\n        }\\n\\n        /** add association*/\\n        if (gameToAddLength > 0) {\\n            require(gameToAddLength == update.landAndGameAssociationsToAdd[0].length, \\\"DIFFERENT_LENGTH_LANDS_GAMES\\\");\\n            _addLandsGamesAssociation(\\n                from,\\n                storageId,\\n                update.landAndGameAssociationsToAdd[0],\\n                update.landAndGameAssociationsToAdd[1]\\n            );\\n        }\\n\\n        /** remove lands */\\n        console.log(\\\"here we should enter remove lands\\\");\\n        _removeLands(storageId, from, update.landIdsToRemove, false);\\n\\n        uint256 newId = _incrementTokenVersion(to, estateId);\\n        EstateData memory estateState = getEstateData(storageId);\\n        emit EstateTokenUpdatedII(estateId, newId, update);\\n    }\\n\\n    function _addLandsGames(\\n        address sender,\\n        uint256 storageId,\\n        uint256[] memory landIdsToAdd,\\n        uint256[] memory gameIds\\n    ) internal {\\n        require(landIdsToAdd.length > 0, \\\"EMPTY_LAND_IDS_ARRAY\\\");\\n\\n        //(uint256[] memory sizes, uint256[] memory xs, uint256[] memory ys) = _separateId(landIdsToAdd);\\n\\n        //_land.batchTransferQuad(sender, address(this), sizes, xs, ys, \\\"\\\");\\n        _land.batchTransferFrom(sender, address(this), landIdsToAdd, \\\"\\\");\\n        _addLandsGamesAssociation(sender, storageId, landIdsToAdd, gameIds);\\n    }\\n\\n    function _addLandsGamesAssociation(\\n        address sender,\\n        uint256 storageId,\\n        uint256[] memory landIds,\\n        uint256[] memory gameIds\\n    ) internal {\\n        //this was assuming that n lands = n games\\n        uint256[] memory gamesToAdd = new uint256[](gameIds.length);\\n\\n        for (uint256 i = 0; i < landIds.length; i++) {\\n            uint256 gameId = gameIds[i];\\n\\n            (bool occupied, uint256 key) = estates[storageId].tryGet(landIds[i]);\\n            console.log(key);\\n\\n            require(\\n                (/* !occupied && */\\n                key == 0),\\n                \\\"LAND_ALREADY_OCCUPIED\\\"\\n            );\\n\\n            estates[storageId].set(landIds[i], gameId);\\n            gamesToLands[gameId].add(landIds[i]);\\n\\n            if (gameId != 0) {\\n                if (gameIds.length > 1) {\\n                    if ((i == 0 || gameId != gameIds[i - 1]) && _gameToken.ownerOf(gameId) != address(this)) {\\n                        gamesToAdd[i] = gameId;\\n                    }\\n                } else {\\n                    if (_gameToken.ownerOf(gameId) != address(this)) {\\n                        gamesToAdd[i] = gameId;\\n                    }\\n                }\\n            }\\n        }\\n\\n        if (gamesToAdd.length > 0) {\\n            console.log(\\\"inside _addLandsGamesAssociation \\\");\\n            for (uint256 i = 0; i < gamesToAdd.length; i++) {\\n                console.log(gamesToAdd[i]);\\n            }\\n            _gameToken.batchTransferFrom(sender, address(this), gamesToAdd, \\\"\\\");\\n        }\\n    }\\n\\n    function _removeGamesOfLands(\\n        address from,\\n        uint256 storageId,\\n        uint256[] memory gameAssociationsToRemove,\\n        uint256[] memory gameIdsToRemove\\n    ) internal {\\n        console.log(\\\"do I enter here?\\\");\\n        console.log(gameAssociationsToRemove.length);\\n        console.log(gameIdsToRemove.length);\\n        uint256[] memory landsFromGames;\\n\\n        for (uint256 i = 0; i < gameAssociationsToRemove.length; i++) {\\n            console.log(\\\"gameAssociationsToRemove\\\");\\n            console.log(gameAssociationsToRemove[i]);\\n\\n            landsFromGames = getLandsForGame(gameAssociationsToRemove[i]);\\n            delete (gamesToLands[gameAssociationsToRemove[i]]);\\n            for (uint256 j = 0; j < landsFromGames.length; j++) {\\n                estates[storageId].set(landsFromGames[j], 0);\\n            }\\n        }\\n\\n        _gameToken.batchTransferFrom(address(this), from, gameIdsToRemove, \\\"\\\");\\n    }\\n\\n    function _addLands(\\n        uint256 storageId,\\n        address from,\\n        uint256[] memory landIdsToAdd\\n    ) internal {\\n        uint256 len = landIdsToAdd.length;\\n\\n        for (uint256 i = 0; i < len; i++) {\\n            estates[storageId].set(landIdsToAdd[i], 0);\\n        }\\n\\n        _land.batchTransferFrom(from, address(this), landIdsToAdd, \\\"\\\");\\n    }\\n\\n    function _removeLands(\\n        uint256 storageId,\\n        address from,\\n        uint256[] memory landIdsToRemove,\\n        bool isBurned\\n    ) internal {\\n        console.log(\\\"inside remove lalnds\\\");\\n\\n        uint256 len = landIdsToRemove.length;\\n        for (uint256 i = 0; i < len; i++) {\\n            console.log(landIdsToRemove[i]);\\n            (bool occupied, uint256 key) = estates[storageId].tryGet(landIdsToRemove[i]);\\n            console.log(\\\"Remove lands\\\");\\n            console.log(key);\\n            require(\\n                /* !occupied */\\n                isBurned || key == 0,\\n                \\\"GAME_STILL_HOLDS_A_LAND\\\"\\n            );\\n            require(estates[storageId].remove(landIdsToRemove[i]), \\\"LAND_DOES_NOT_EXIST\\\");\\n        }\\n        _land.batchTransferFrom(address(this), from, landIdsToRemove, \\\"\\\");\\n    }\\n\\n    /// @notice Burns token `id`.\\n    /// @param id The token which will be burnt.\\n    function burn(uint256 id) public override {\\n        address sender = _msgSender();\\n        _check_authorized(sender, BREAK);\\n        _check_hasOwnerRights(sender, id);\\n        _burn(sender, _ownerOf(id), id);\\n    }\\n\\n    /// @notice Burn token`id` from `from`.\\n    /// @param from address whose token is to be burnt.\\n    /// @param id The token which will be burnt.\\n    function burnFrom(address from, uint256 id) external override {\\n        require(from != address(uint160(0)), \\\"NOT_FROM_ZERO_ADDRESS\\\");\\n\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n\\n        require(owner != address(uint160(0)), \\\"NONEXISTENT_TOKEN\\\");\\n\\n        address msgSender = _msgSender();\\n\\n        require(\\n            msgSender == from ||\\n                (operatorEnabled && _operators[id] == msgSender) ||\\n                _superOperators[msgSender] ||\\n                _operatorsForAll[from][msgSender],\\n            \\\"UNAUTHORIZED_BURN\\\"\\n        );\\n\\n        _burn(from, owner, id);\\n    }\\n\\n    /// @notice Used to recover Land tokens from a burned estate.\\n    /// Note: Implemented separately from burn to avoid hitting the block gas-limit if estate has too many lands.\\n    /// @param sender The sender of the request.\\n    // / @param to The recipient of the Land tokens.\\n    // / @param num The number of Lands to transfer.\\n    /// @param estateId The estate to recover lands from.\\n    function transferFromBurnedEstate(\\n        address sender,\\n        address to,\\n        uint256 estateId,\\n        EstateData calldata associatioToRetrieve\\n    ) public {\\n        require(isBurned(estateId), \\\"ASSET_NOT_BURNED\\\");\\n        require(sender != address(this), \\\"NOT_FROM_THIS\\\");\\n        uint256 storageId = _storageId(estateId);\\n        address msgSender = _msgSender();\\n        require(msgSender == sender || _superOperators[msgSender], \\\"NOT_AUTHORIZED\\\");\\n        _check_withdrawal_authorized(sender, estateId);\\n        //_removeLandsGames(to, estateId, landsToRemove);\\n        _removeGamesOfLands(to, estateId, associatioToRetrieve.gameIds, associatioToRetrieve.gameIds);\\n        _removeLands(storageId, to, associatioToRetrieve.landIds, true);\\n    }\\n\\n    function getEstateData(uint256 estateId) public view returns (EstateData memory) {\\n        uint256 storageId = _storageId(estateId);\\n        uint256 length = estates[storageId].length();\\n        console.log(\\\"length from estate data\\\");\\n        console.log(length);\\n        uint256[] memory landIds = new uint256[](length);\\n        uint256[] memory gameIds = new uint256[](length);\\n        //if (!isBurned(estateId)) {\\n        //console.log(\\\"do we enter the burned part for estate? \\\");\\n        for (uint256 i = 0; i < length; i++) {\\n            (uint256 landId, uint256 gameId) = estates[storageId].at(i);\\n            landIds[i] = landId;\\n            gameIds[i] = gameId;\\n        }\\n        //}\\n        return EstateData({landIds: landIds, gameIds: gameIds});\\n    }\\n\\n    function getLandsForGame(uint256 gameId) public view returns (uint256[] memory) {\\n        uint256[] memory landIds = new uint256[](gamesToLands[gameId].length());\\n        for (uint256 i = 0; i < gamesToLands[gameId].length(); i++) {\\n            landIds[i] = gamesToLands[gameId].at(i);\\n        }\\n\\n        return landIds; //gamesToLands[gameId].values();\\n    }\\n\\n    /// @notice Return the name of the token contract.\\n    /// @return The name of the token contract.\\n    function name() external pure returns (string memory) {\\n        return \\\"The Sandbox: ESTATE token\\\";\\n    }\\n\\n    /// @notice Get the symbol of the token contract.\\n    /// @return the symbol of the token contract.\\n    function symbol() external pure returns (string memory) {\\n        return \\\"ESTATE\\\";\\n    }\\n\\n    /// @notice Return the URI of a specific token.\\n    /// @param id The id of the token.\\n    /// @return uri The URI of the token metadata.\\n    function tokenURI(uint256 id) public view returns (string memory uri) {\\n        require(_ownerOf(id) != address(0), \\\"BURNED_OR_NEVER_MINTED\\\");\\n        uint256 immutableId = _storageId(id);\\n        return _toFullURI(_metaData[immutableId]);\\n    }\\n\\n    function onERC721BatchReceived(\\n        address, // operator,\\n        address, // from,\\n        uint256[] calldata, // ids,\\n        bytes calldata // data\\n    ) external pure returns (bytes4) {\\n        revert(\\\"please call createEstate or updateEstate functions\\\");\\n    }\\n\\n    function onERC721Received(\\n        address, // operator,\\n        address, // from,\\n        uint256, // tokenId,\\n        bytes calldata // data\\n    ) external pure returns (bytes4) {\\n        revert(\\\"please call createEstate or updateEstate functions\\\");\\n    }\\n\\n    // //////////////////////////////////////////////////////////////////////////////////////////////////////\\n\\n    //this is a function to separate land ids into its x and y coordianates\\n    function _separateId(\\n        uint256[] memory landIds //sizes are always 1\\n    )\\n        internal\\n        returns (\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        uint256 numLds = landIds.length;\\n        uint256[] memory sizes = new uint256[](numLds);\\n        uint256[] memory xs = new uint256[](numLds);\\n        uint256[] memory ys = new uint256[](numLds);\\n\\n        for (uint256 i = 0; i < numLds; i++) {\\n            sizes[i] = 1;\\n            xs[i] = _land.getX(landIds[i]);\\n            ys[i] = _land.getY(landIds[i]);\\n        }\\n        return (sizes, xs, ys);\\n    }\\n\\n    /// @dev used to increment the version in a tokenId by burning the original and reminting a new token. Mappings to token-specific data are preserved via the storageId mechanism.\\n    /// @param from The address of the token owner.\\n    /// @param estateId The tokenId to increment.\\n    /// @return the version-incremented tokenId.\\n    function _incrementTokenVersion(address from, uint256 estateId) internal returns (uint256) {\\n        address originalCreator = address(uint160(estateId / CREATOR_OFFSET_MULTIPLIER));\\n\\n        uint64 subId = uint64(estateId / SUBID_MULTIPLIER);\\n\\n        uint16 version = uint16(estateId);\\n\\n        version++;\\n\\n        address owner = _ownerOf(estateId);\\n\\n        if (from == owner) {\\n            _burn(from, owner, estateId);\\n        }\\n\\n        (uint256 newId, ) = _mintEstate(originalCreator, owner, subId, version, false);\\n\\n        address newOwner = _ownerOf(newId);\\n\\n        require(owner == newOwner, \\\"NOT_OWNER\\\");\\n\\n        return newId;\\n    }\\n\\n    /// @dev Create a new (or incremented) estateId and associate it with an owner.\\n    /// @param from The address of one creating the Estate.\\n    /// @param to The address of the Estate owner.\\n    /// @param subId The id to use when generating the new estateId.\\n    /// @param version The version number part of the estateId.\\n    /// @param isCreation Whether this is a brand new Estate (as opposed to an update).\\n    /// @return id The newly created estateId.\\n    /// @return storageId The staorage Id for the token.\\n    function _mintEstate(\\n        address from,\\n        address to,\\n        uint64 subId,\\n        uint16 version,\\n        bool isCreation\\n    ) internal returns (uint256, uint256 storageId) {\\n        require(to != address(uint160(0)), \\\"CAN'T_SEND_TO_ZERO_ADDRESS\\\");\\n        uint16 idVersion;\\n        uint256 estateId;\\n\\n        uint256 strgId;\\n\\n        if (isCreation) {\\n            idVersion = 1;\\n            estateId = _generateTokenId(from, subId, _chainIndex, idVersion);\\n            strgId = _storageId(estateId);\\n            require(_owners[strgId] == 0, \\\"STORAGE_ID_REUSE_FORBIDDEN\\\");\\n        } else {\\n            idVersion = version;\\n            estateId = _generateTokenId(from, subId, _chainIndex, idVersion);\\n            strgId = _storageId(estateId);\\n        }\\n\\n        _owners[strgId] = (uint256(idVersion) << 200) + uint256(uint160(to));\\n        _numNFTPerAddress[to]++;\\n        emit Transfer(address(0), to, estateId);\\n        return (estateId, strgId);\\n    }\\n\\n    function _check_authorized(address sender, uint8 action) internal view {\\n        require(sender != address(uint160(0)), \\\"SENDER_IS_ZERO_ADDRESS\\\");\\n        address msgSender = _msgSender();\\n        if (action == ADD) {\\n            address minter = _minter;\\n            require(msgSender == minter || msgSender == sender, \\\"UNAUTHORIZED_ADD\\\");\\n        } else {\\n            require(msgSender == sender, \\\"NOT_AUTHORIZED\\\");\\n        }\\n    }\\n\\n    function _check_hasOwnerRights(address sender, uint256 estateId) internal view {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(estateId);\\n\\n        require(owner != address(uint160(0)), \\\"TOKEN_DOES_NOT_EXIST\\\");\\n\\n        address msgSender = _msgSender();\\n\\n        require(\\n            owner == sender ||\\n                _superOperators[msgSender] ||\\n                _operatorsForAll[sender][msgSender] ||\\n                (operatorEnabled && _operators[estateId] == msgSender),\\n            \\\"NOT_APPROVED\\\"\\n        );\\n    }\\n\\n    function _encode(\\n        uint16 x,\\n        uint16 y,\\n        uint8 size\\n    ) internal pure returns (uint24) {\\n        return uint24(size) * uint24(2**18) + (uint24(x) + uint24(y) * GRID_SIZE);\\n    }\\n\\n    function _decode(uint24 data)\\n        internal\\n        pure\\n        returns (\\n            uint16 x,\\n            uint16 y,\\n            uint8 size\\n        )\\n    {\\n        size = uint8(data / (2**18));\\n        y = uint16((data % (2**18)) / GRID_SIZE);\\n        x = uint16(data % GRID_SIZE);\\n    }\\n\\n    /// @dev Get the a full URI string for a given hash + gameId.\\n    /// @param hash The 32 byte IPFS hash.\\n    /// @return The URI string.\\n    function _toFullURI(bytes32 hash) internal pure override returns (string memory) {\\n        return string(abi.encodePacked(\\\"ipfs://bafybei\\\", hash2base32(hash), \\\"/\\\", \\\"estate.json\\\"));\\n    }\\n\\n    function isItInArray(uint256 id, uint256[] memory landIds) public pure returns (bool) {\\n        uint256 size = landIds.length;\\n        bool flag = false;\\n\\n        for (uint256 i = 0; i < size; i++) {\\n            if (landIds[i] == id) {\\n                flag = true;\\n                break;\\n            }\\n        }\\n\\n        return flag;\\n    }\\n\\n    // solhint-enable code-complexity\\n}\\n\",\"keccak256\":\"0x0cca11bdc6ba8c5d6a273131c11a46cd59de6f563d05bdd8ce6f8ad9d3ea4013\",\"license\":\"MIT\"},\"src/solc_0.8/estate/EstateBaseToken2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable code-complexity\\npragma solidity 0.8.2;\\n\\nimport \\\"../common/BaseWithStorage/ImmutableERC721.sol\\\";\\nimport \\\"../common/interfaces/ILandToken.sol\\\";\\nimport \\\"../Game/GameBaseToken.sol\\\";\\nimport \\\"../common/interfaces/IERC721MandatoryTokenReceiver.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport \\\"../common/Libraries/UintToUintMap.sol\\\";\\nimport \\\"../common/BaseWithStorage/WithMinter.sol\\\";\\nimport \\\"@openzeppelin/contracts-0.8/utils/structs/EnumerableSet.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\n/// @dev An updated Estate Token contract using a simplified verison of LAND with no Quads\\n\\ncontract EstateBaseToken2 is ImmutableERC721, Initializable, WithMinter {\\n    using EnumerableMap for EnumerableMap.UintToUintMap;\\n    uint8 internal constant OWNER = 0;\\n    uint8 internal constant ADD = 1;\\n    uint8 internal constant BREAK = 2;\\n    uint8 internal constant WITHDRAWAL = 3;\\n    uint16 internal constant GRID_SIZE = 408;\\n    uint64 internal _nextId; // max uint64 = 18,446,744,073,709,551,615\\n    mapping(uint256 => bytes32) internal _metaData;\\n\\n    // estates key = storageId\\n    // EnumerableMap.UintToUintMap keys = land ids\\n    // EnumerableMap.UintToUintMap values = game ids\\n    //map to a map\\n    mapping(uint256 => EnumerableMap.UintToUintMap) internal estates;\\n\\n    LandToken internal _land;\\n    GameBaseToken internal _gameToken;\\n\\n    /// @param landIds LAND tokenIds added, Games added, Games removed, uri\\n    /// @param gameId Games added\\n    /// @param uri ipfs hash (without the prefix, assume cidv1 folder)\\n    struct EstateCRUDData {\\n        uint256[] landIds;\\n        uint256[] gameIds;\\n        bytes32 uri;\\n    }\\n    struct EstateData {\\n        uint256[] landIds;\\n        uint256[] gameIds;\\n    }\\n\\n    struct UpdateEstateData {\\n        uint256[][] landAndGameAssociations;\\n        //uint256[] lansdIdsToAdd;\\n        uint256[] gameIdsToAdd;\\n        uint256[] landIdsToRemove;\\n        uint256[] gameIdsToRemove;\\n        bytes32 uri;\\n    }\\n\\n    /// @dev Emits when a estate is updated.\\n    /// @param oldId The id of the previous erc721 ESTATE token.\\n    /// @param newId The id of the newly minted token.\\n    /// @param update The changes made to the Estate.\\n    event EstateTokenUpdated(uint256 indexed oldId, uint256 indexed newId, UpdateEstateData update);\\n\\n    /// @dev Emits when a estate is updated.\\n    /// @param oldId The id of the previous erc721 ESTATE token.\\n    /// @param newId The id of the newly minted token.\\n    /// @param update The changes made to the Estate.\\n    event EstateTokenUpdatedII(uint256 indexed oldId, uint256 indexed newId, UpdateEstateData update);\\n\\n    function initV1(\\n        address trustedForwarder,\\n        LandToken land,\\n        GameBaseToken gameToken,\\n        uint8 chainIndex\\n    ) public initializer() {\\n        _gameToken = gameToken;\\n        _land = land;\\n        ERC721BaseToken.__ERC721BaseToken_initialize(chainIndex);\\n    }\\n\\n    // @todo Add access-control: minter-only? could inherit WithMinter.sol, the game token creator is minter only\\n    /// @notice Create a new estate token with lands.\\n    /// @param from The address of the one creating the estate.\\n    /// @param to The address that will own the estate.\\n    /// @param creation The data to use to create the estate.\\n\\n    //creation\\n    //loop on landsToAdd -> creation of element estate[storageId] => (landId, 0)\\n    //(L1,G1),(L2,G1),(L3,G1),(L4,G2)\\n    //(L1,L2,L3,L4)\\n    //(G1,G2)\\n\\n    function helloWorld(\\n        address from,\\n        address to,\\n        UpdateEstateData calldata creation\\n    ) external returns (uint256) {\\n        (uint256 estateId, uint256 storageId) = _mintEstate(from, to, _nextId++, 1, true);\\n        for (uint256 i = 0; i < creation.landAndGameAssociations[0].length; i++) {\\n            estates[storageId].set(creation.landAndGameAssociations[0][i], creation.landAndGameAssociations[1][i]);\\n            //console.log(creation.landAndGameAssociations[0][i]);\\n            //console.log(creation.landAndGameAssociations[1][i]);\\n        }\\n\\n        (uint256[] memory sizes, uint256[] memory xs, uint256[] memory ys) =\\n            _separateId(creation.landAndGameAssociations[0]);\\n        //require _gameToken.landsNumber(gameId) == creation.landAndGameAssociations[0].length\\n        _land.batchTransferQuad(from, address(this), sizes, xs, ys, \\\"\\\");\\n        _gameToken.batchTransferFrom(from, address(this), creation.gameIdsToAdd, \\\"\\\");\\n        return 3;\\n    }\\n\\n    function createEstate(\\n        address from,\\n        address to,\\n        UpdateEstateData calldata creation\\n    ) external returns (uint256) {\\n        /* require(\\n            creation.landAndGameAssociations[0].length == creation.landAndGameAssociations[1].length,\\n            \\\"DIFFERENT_LENGTH_LANDS_GAMES\\\"\\n        );\\n        require(creation.landAndGameAssociations[0].length > 0, \\\"EMPTY_LAND_IDS_ARRAY\\\");\\n\\n        _check_authorized(from, ADD);\\n         */\\n        (uint256 estateId, uint256 storageId) = _mintEstate(from, to, _nextId++, 1, true);\\n        /* _metaData[storageId] = creation.uri;\\n         */\\n\\n        for (uint256 i = 0; i < creation.landAndGameAssociations.length; i++) {\\n            estates[storageId].set(creation.landAndGameAssociations[0][i], creation.landAndGameAssociations[1][i]);\\n        }\\n\\n        //final transfer\\n        /* (uint256[] memory sizes, uint256[] memory xs, uint256[] memory ys) =\\n            _separateId(creation.landAndGameAssociations[0]);\\n\\n\\n\\n        _land.batchTransferQuad(from, address(this), sizes, xs, ys, \\\"\\\");\\n        _gameToken.batchTransferFrom(from, address(this), creation.gameIdsToAdd, \\\"\\\");\\n */\\n        //emit EstateTokenUpdated(0, estateId, creation);\\n        return estateId;\\n    }\\n\\n    function _check_authorized(address sender, uint8 action) internal view {\\n        require(sender != address(uint160(0)), \\\"SENDER_IS_ZERO_ADDRESS\\\");\\n        address msgSender = _msgSender();\\n        if (action == ADD) {\\n            address minter = _minter;\\n            require(msgSender == minter || msgSender == sender, \\\"UNAUTHORIZED_ADD\\\");\\n        } else {\\n            require(msgSender == sender, \\\"NOT_AUTHORIZED\\\");\\n        }\\n    }\\n\\n    function _separateId(\\n        uint256[] memory landIds //sizes are always 1\\n    )\\n        internal\\n        returns (\\n            uint256[] memory,\\n            uint256[] memory,\\n            uint256[] memory\\n        )\\n    {\\n        uint256 numLds = landIds.length;\\n        uint256[] memory sizes = new uint256[](numLds);\\n        uint256[] memory xs = new uint256[](numLds);\\n        uint256[] memory ys = new uint256[](numLds);\\n\\n        for (uint256 i = 0; i < numLds; i++) {\\n            sizes[i] = 1;\\n            xs[i] = _land.getX(landIds[i]);\\n            ys[i] = _land.getY(landIds[i]);\\n        }\\n        return (sizes, xs, ys);\\n    }\\n\\n    /// @dev used to increment the version in a tokenId by burning the original and reminting a new token. Mappings to token-specific data are preserved via the storageId mechanism.\\n    /// @param from The address of the token owner.\\n    /// @param estateId The tokenId to increment.\\n    /// @return the version-incremented tokenId.\\n    function _incrementTokenVersion(address from, uint256 estateId) internal returns (uint256) {\\n        address originalCreator = address(uint160(estateId / CREATOR_OFFSET_MULTIPLIER));\\n        uint64 subId = uint64(estateId / SUBID_MULTIPLIER);\\n        uint16 version = uint16(estateId);\\n        version++;\\n        address owner = _ownerOf(estateId);\\n        if (from == owner) {\\n            _burn(from, owner, estateId);\\n        }\\n        (uint256 newId, ) = _mintEstate(originalCreator, owner, subId, version, false);\\n        address newOwner = _ownerOf(newId);\\n        require(owner == newOwner, \\\"NOT_OWNER\\\");\\n        return newId;\\n    }\\n\\n    /// @dev Create a new (or incremented) estateId and associate it with an owner.\\n    /// @param from The address of one creating the Estate.\\n    /// @param to The address of the Estate owner.\\n    /// @param subId The id to use when generating the new estateId.\\n    /// @param version The version number part of the estateId.\\n    /// @param isCreation Whether this is a brand new Estate (as opposed to an update).\\n    /// @return id The newly created estateId.\\n    /// @return storageId The staorage Id for the token.\\n    function _mintEstate(\\n        address from,\\n        address to,\\n        uint64 subId,\\n        uint16 version,\\n        bool isCreation\\n    ) internal returns (uint256, uint256 storageId) {\\n        require(to != address(uint160(0)), \\\"CAN'T_SEND_TO_ZERO_ADDRESS\\\");\\n        uint16 idVersion;\\n        uint256 estateId;\\n\\n        uint256 strgId;\\n\\n        if (isCreation) {\\n            idVersion = 1;\\n            estateId = _generateTokenId(from, subId, _chainIndex, idVersion);\\n            strgId = _storageId(estateId);\\n            require(_owners[strgId] == 0, \\\"STORAGE_ID_REUSE_FORBIDDEN\\\");\\n        } else {\\n            idVersion = version;\\n            estateId = _generateTokenId(from, subId, _chainIndex, idVersion);\\n            strgId = _storageId(estateId);\\n        }\\n\\n        _owners[strgId] = (uint256(idVersion) << 200) + uint256(uint160(to));\\n        _numNFTPerAddress[to]++;\\n        emit Transfer(address(0), to, estateId);\\n        return (estateId, strgId);\\n    }\\n}\\n\",\"keccak256\":\"0xe105927d06aadddc1257bba25aa9091c0250dbbbb8b1d11ab545c1f59dc84a27\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/child/ChildEstateTokenV1.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../../estate/EstateBaseToken.sol\\\";\\nimport \\\"../../estate/EstateBaseToken2.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ncontract ChildEstateTokenV1 is EstateBaseToken {\\n\\n}\\n\",\"keccak256\":\"0x9c9c78825b22be75e5f3de712eb5188323fd649fb4525f7fb687f38c8c2e39b1\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102925760003560e01c80636e9960c311610160578063a22cb465116100d8578063db44fe071161008c578063eeb5a5d111610071578063eeb5a5d114610604578063f366751714610617578063f56baa0e1461063057610292565b8063db44fe07146105c1578063e985e9c5146105f157610292565b8063b88d4fde116100bd578063b88d4fde1461058a578063c87b56dd1461059d578063ce1b815f146105b057610292565b8063a22cb46514610564578063ac9fe4211461057757610292565b80639381da6e1161012f5780639d765813116101145780639d7658131461052b5780639d7a3b871461053e5780639df4c3bf1461055157610292565b80639381da6e146104d257806395d89b41146104f257610292565b80636e9960c31461048857806370a082311461049957806379cc6790146104ac5780638f283970146104bf57610292565b806323b872dd1161020e57806342966c68116101c2578063572b6c05116101a7578063572b6c05146104275780636352211e14610449578063654b748a1461045c57610292565b806342966c68146104065780634b808c461461041957610292565b80632b991746116101f35780632b991746146103cd5780632c4d4d18146103e057806342842e0e146103f357610292565b806323b872dd146103a757806328cfbd46146103ba57610292565b80630a148eb31161026557806315ddc5351161024a57806315ddc5351461035357806321ab0c711461036657806322e695391461038757610292565b80630a148eb314610314578063150b7a021461032757610292565b806301ffc9a71461029757806306fdde03146102bf578063081812fc146102d4578063095ea7b3146102ff575b600080fd5b6102aa6102a5366004614ea7565b610643565b60405190151581526020015b60405180910390f35b6102c76106ae565b6040516102b691906151a6565b6102e76102e2366004614edf565b6106e6565b6040516001600160a01b0390911681526020016102b6565b61031261030d366004614e7c565b610785565b005b610312610322366004614c53565b6108d0565b61033a610335366004614b26565b610b10565b6040516001600160e01b031990911681526020016102b6565b61031261036136600461497b565b610b81565b610379610374366004614edf565b610bf3565b6040519081526020016102b6565b61039a610395366004614edf565b610c02565b6040516102b69190615193565b6103126103b5366004614ae6565b610cec565b6103126103c836600461497b565b610dba565b6103126103db366004614ae6565b610e2f565b6103126103ee36600461490b565b610fc7565b610312610401366004614ae6565b6110b0565b610312610414366004614edf565b6110cb565b61033a61033536600461497b565b6102aa61043536600461490b565b6002546001600160a01b0390811691161490565b6102e7610457366004614edf565b611103565b6102aa61046a36600461490b565b6001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b03166102e7565b6103796104a736600461490b565b611166565b6103126104ba366004614e7c565b6111da565b6103126104cd36600461490b565b61138e565b6104e56104e0366004614edf565b61145e565b6040516102b6919061521d565b60408051808201909152600681527f455354415445000000000000000000000000000000000000000000000000000060208201526102c7565b610312610539366004614e27565b61163d565b6102aa61054c366004614ef7565b611788565b61037961055f366004614cc1565b6117ed565b610312610572366004614df3565b611e20565b610312610585366004614df3565b611e32565b610312610598366004614b97565b611f15565b6102c76105ab366004614edf565b611fa2565b6002546001600160a01b03166102e7565b6102aa6105cf366004614edf565b63ffffffff1916600090815260046020526040902054600160a01b9081161490565b6102aa6105ff366004614943565b61202d565b610312610612366004614a3a565b61207f565b6102e7600754630100000090046001600160a01b031690565b61037961063e366004614a80565b612170565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b0319831614806106a657507f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b60408051808201909152601981527f5468652053616e64626f783a2045535441544520746f6b656e0000000000000060208201525b90565b60008060006106f484612324565b90925090506001600160a01b0382166107545760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e00000000000000000000000000000060448201526064015b60405180910390fd5b801561077a575050506000818152600660205260409020546001600160a01b03166106a9565b6000925050506106a9565b63ffffffff198116600090815260046020526040812054906107a683612369565b905060006107b26123c2565b90506001600160a01b03821661080a5760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161074b565b806001600160a01b0316826001600160a01b0316148061084257506001600160a01b03811660009081526001602052604090205460ff165b8061087257506001600160a01b0380831660009081526005602090815260408083209385168352929052205460ff165b6108be5760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c0000000000000000000000604482015260640161074b565b6108c983868661240c565b5050505050565b63ffffffff198216600090815260046020526040902054600160a01b9081161461093c5760405162461bcd60e51b815260206004820152601060248201527f41535345545f4e4f545f4255524e454400000000000000000000000000000000604482015260640161074b565b6001600160a01b0384163014156109955760405162461bcd60e51b815260206004820152600d60248201527f4e4f545f46524f4d5f5448495300000000000000000000000000000000000000604482015260640161074b565b63ffffffff19821660006109a76123c2565b9050856001600160a01b0316816001600160a01b031614806109e157506001600160a01b03811660009081526001602052604090205460ff165b610a2d5760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161074b565b610a3786856124c2565b610abf8585610a4960208701876152ff565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250610a889250505060208801886152ff565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061258f92505050565b610b088286610ace86806152ff565b80806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250600192506127c6915050565b505050505050565b60405162461bcd60e51b815260206004820152603260248201527f706c656173652063616c6c20637265617465457374617465206f72207570646160448201527f74654573746174652066756e6374696f6e730000000000000000000000000000606482015260009060840161074b565b610b08868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a01819004810282018101909252888152925088915087908190840183828082843760009201829052509250612a06915050565b600063ffffffff1982166106a6565b6000818152600a6020526040812060609190610c1d90612e0a565b67ffffffffffffffff811115610c4357634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610c6c578160200160208202803683370190505b50905060005b6000848152600a60205260409020610c8990612e0a565b811015610ce5576000848152600a60205260409020610ca89082612e14565b828281518110610cc857634e487b7160e01b600052603260045260246000fd5b602090810291909101015280610cdd816155c1565b915050610c72565b5092915050565b610cf7838383612e20565b50610d03838383613038565b6001600160a01b0382163b15158015610d415750610d41827f5e8bf644000000000000000000000000000000000000000000000000000000006130fd565b15610db557610d69610d516123c2565b848484604051806020016040528060008152506131c4565b610db55760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a45435445440000000000000000604482015260640161074b565b505050565b610b08868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a01819004810282018101909252888152925088915087908190840183828082843760009201919091525060019250612a06915050565b63ffffffff19811660009081526004602052604081205490610e4f6123c2565b90506001600160a01b038516610ea75760405162461bcd60e51b815260206004820152601360248201527f5a45524f5f414444524553535f53454e44455200000000000000000000000000604482015260640161074b565b846001600160a01b0316816001600160a01b03161480610edf57506001600160a01b03811660009081526001602052604090205460ff165b80610f0f57506001600160a01b0380861660009081526005602090815260408083209385168352929052205460ff165b610f5b5760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c0000000000000000000000604482015260640161074b565b846001600160a01b0316826001600160a01b031614610fbc5760405162461bcd60e51b815260206004820152601060248201527f4f574e45525f4e4f545f53454e44455200000000000000000000000000000000604482015260640161074b565b6108c982858561240c565b6000546001600160a01b031633146110215760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c5900000000000000000000000000000000000000000000604482015260640161074b565b600754604080516001600160a01b0363010000009093048316815291831660208301527f3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f6910160405180910390a1600780546001600160a01b039092166301000000027fffffffffffffffffff0000000000000000000000000000000000000000ffffff909216919091179055565b610db583838360405180602001604052806000815250611f15565b60006110d56123c2565b90506110e2816002613283565b6110ec81836133da565b6110ff816110f984612369565b8461352d565b5050565b600061110e82612369565b90506001600160a01b0381166106a95760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354414e545f544f4b454e000000000000000000000000000000604482015260640161074b565b60006001600160a01b0382166111be5760405162461bcd60e51b815260206004820152601260248201527f5a45524f5f414444524553535f4f574e45520000000000000000000000000000604482015260640161074b565b506001600160a01b031660009081526003602052604090205490565b6001600160a01b0382166112305760405162461bcd60e51b815260206004820152601560248201527f4e4f545f46524f4d5f5a45524f5f414444524553530000000000000000000000604482015260640161074b565b60008061123c83612324565b90925090506001600160a01b0382166112975760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161074b565b60006112a16123c2565b9050846001600160a01b0316816001600160a01b031614806112e457508180156112e457506000848152600660205260409020546001600160a01b038281169116145b8061130757506001600160a01b03811660009081526001602052604090205460ff165b8061133757506001600160a01b0380861660009081526005602090815260408083209385168352929052205460ff165b6113835760405162461bcd60e51b815260206004820152601160248201527f554e415554484f52495a45445f4255524e000000000000000000000000000000604482015260640161074b565b6108c985848661352d565b6000546001600160a01b031633146113e85760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e49454400000000000000000000000000604482015260640161074b565b600054604080516001600160a01b03928316815291831660208301527f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f910160405180910390a16000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6040805180820190915260608082526020820152600063ffffffff1983166000818152600960205260408120919250906114979061362b565b90506114d76040518060400160405280601781526020017f6c656e6774682066726f6d206573746174652064617461000000000000000000815250613636565b6114e0816136aa565b60008167ffffffffffffffff81111561150957634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611532578160200160208202803683370190505b50905060008267ffffffffffffffff81111561155e57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611587578160200160208202803683370190505b50905060005b8381101561162257600085815260096020526040812081906115af908461371d565b91509150818584815181106115d457634e487b7160e01b600052603260045260246000fd5b6020026020010181815250508084848151811061160157634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505050808061161a906155c1565b91505061158d565b50604080518082019091529182526020820152949350505050565b60075462010000900460ff1661165e57600754610100900460ff1615611662565b303b155b6116d45760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161074b565b60075462010000900460ff1615801561172157600780547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff62ff0000199091166201000017166101001790555b600c805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0386811691909117909255600b80549091169186169190911790556007805460ff191660ff841617905580156108c9576007805462ff0000191690555050505050565b805160009081805b828110156117e257858582815181106117b957634e487b7160e01b600052603260045260246000fd5b602002602001015114156117d057600191506117e2565b806117da816155c1565b915050611790565b509150505b92915050565b60006117f985846133da565b600063ffffffff19841660a08401516000828152600860205260409020559050611824866001613283565b6000836000015160018151811061184b57634e487b7160e01b600052603260045260246000fd5b60200260200101515190506000846020015160018151811061187d57634e487b7160e01b600052603260045260246000fd5b6020026020010151519050600085604001515190506118a1848a886060015161373b565b8115611caa576118e56040518060400160405280601181526020017f77652073686f756c642062652068657265000000000000000000000000000000815250613636565b856020015160008151811061190a57634e487b7160e01b600052603260045260246000fd5b60200260200101515182146119615760405162461bcd60e51b815260206004820152601c60248201527f444946464552454e545f4c454e4754485f4c414e44535f47414d455300000000604482015260640161074b565b8286604001515111156119dc5760405162461bcd60e51b815260206004820152602e60248201527f47414d45535f544f5f52455553455f4d5553545f42455f50524553454e545f4960448201527f4e5f47414d45535f544f5f414444000000000000000000000000000000000000606482015260840161074b565b8186604001515110611a565760405162461bcd60e51b815260206004820152603160248201527f47414d45535f544f5f52455553455f4d5553545f42455f50524553454e545f4960448201527f4e5f47414d45535f544f5f52454d4f5645000000000000000000000000000000606482015260840161074b565b60005b81811015611b6457865180516001908110611a8457634e487b7160e01b600052603260045260246000fd5b60200260200101518181518110611aab57634e487b7160e01b600052603260045260246000fd5b602002602001015187604001518281518110611ad757634e487b7160e01b600052603260045260246000fd5b602002602001015114611b525760405162461bcd60e51b815260206004820152602e60248201527f47414d45535f544f5f52455553455f4d5553545f42455f50524553454e545f4960448201527f4e5f47414d45535f544f5f414444000000000000000000000000000000000000606482015260840161074b565b80611b5c816155c1565b915050611a59565b506000611b718284615545565b905060008167ffffffffffffffff811115611b9c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611bc5578160200160208202803683370190505b509050825b84811015611c6e578860200151600181518110611bf757634e487b7160e01b600052603260045260246000fd5b60200260200101518181518110611c1e57634e487b7160e01b600052603260045260246000fd5b6020026020010151828583611c339190615545565b81518110611c5157634e487b7160e01b600052603260045260246000fd5b602090810291909101015280611c66816155c1565b915050611bca565b50611ca78b878a60200151600181518110611c9957634e487b7160e01b600052603260045260246000fd5b60200260200101518461258f565b50505b8215611d8c5785518051600090611cd157634e487b7160e01b600052603260045260246000fd5b6020026020010151518314611d285760405162461bcd60e51b815260206004820152601c60248201527f444946464552454e545f4c454e4754485f4c414e44535f47414d455300000000604482015260640161074b565b611d8c89858860000151600081518110611d5257634e487b7160e01b600052603260045260246000fd5b60200260200101518960000151600181518110611d7f57634e487b7160e01b600052603260045260246000fd5b6020026020010151613801565b611dad60405180606001604052806021815260200161567c60219139613636565b611dbe848a886080015160006127c6565b6000611dca8989613c60565b90506000611dd78661145e565b905081897f9e7c7d8ddece27ce406d7f0d11566fca4d42b7f4a641c0ef4efa85e359c6e4a58a604051611e0a9190615256565b60405180910390a3505050505050949350505050565b6110ff611e2b6123c2565b8383613d62565b6000546001600160a01b03163314611eb25760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f72730000000000000000000000000000000000000000606482015260840161074b565b6001600160a01b038216600081815260016020908152604091829020805460ff19168515159081179091558251938452908301527f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d8910160405180910390a15050565b611f20848484612e20565b50611f2c848484613038565b6001600160a01b0383163b15611f9c57611f50611f476123c2565b858585856131c4565b611f9c5760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a45435445440000000000000000604482015260640161074b565b50505050565b60606000611faf83612369565b6001600160a01b031614156120065760405162461bcd60e51b815260206004820152601660248201527f4255524e45445f4f525f4e455645525f4d494e54454400000000000000000000604482015260640161074b565b63ffffffff19821660008181526008602052604090205461202690613e38565b9392505050565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081205460ff16806120265750506001600160a01b031660009081526001602052604090205460ff16919050565b6001600160a01b0383166120d55760405162461bcd60e51b815260206004820152601660248201527f496e76616c69642073656e646572206164647265737300000000000000000000604482015260640161074b565b60006120df6123c2565b9050836001600160a01b0316816001600160a01b0316148061211957506001600160a01b03811660009081526001602052604090205460ff165b6121655760405162461bcd60e51b815260206004820152601c60248201527f554e415554484f52495a45445f415050524f56455f464f525f414c4c00000000604482015260640161074b565b611f9c848484613d62565b600061217d846001613283565b61218a60208301836152ff565b905061219683806152ff565b9050146121e55760405162461bcd60e51b815260206004820152601c60248201527f444946464552454e545f4c454e4754485f4c414e44535f47414d455300000000604482015260640161074b565b60008061224186866007601781819054906101000a900467ffffffffffffffff1680929190612213906155dc565b91906101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550600180613e69565b6000818152600860205260409081902090870135905590925090506122e1868261226b87806152ff565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506122aa9250505060208901896152ff565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061402a92505050565b8160007f0e1331b3d93257377695e09c5f57e70594445e5b47ebdd513b8db11f7ce9ed7b8660405161231391906151b9565b60405180910390a350949350505050565b63ffffffff1981166000908152600460205260408120548190600160a01b80821614156123545760009250612358565b8092505b600160ff1b80821614915050915091565b63ffffffff1981166000908152600460205260408120548260c882901c63ffffffff16600160a01b80841614806123a857508061ffff168261ffff1614155b156123b957600093505050506106a9565b50909392505050565b6002546000906001600160a01b031633141561240557507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c6106e3565b50336106e3565b600061241782612369565b90506001600160a01b0383166124395761243482858360006140ed565b61247b565b61244682858360016140ed565b6000828152600660205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790555b81836001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b6001600160a01b0382166125185760405162461bcd60e51b815260206004820152601360248201527f53454e4445525f5a45524f5f4144445245535300000000000000000000000000604482015260640161074b565b63ffffffff1981166000908152600460205260409020546001600160a01b0316826001600160a01b0316146110ff5760405162461bcd60e51b815260206004820152601b60248201527f4c4153545f4f574e45525f4e4f545f455155414c5f53454e4445520000000000604482015260640161074b565b6125cd6040518060400160405280601081526020017f646f204920656e74657220686572653f00000000000000000000000000000000815250613636565b6125d782516136aa565b6125e181516136aa565b606060005b83518110156127585761262d6040518060400160405280601881526020017f67616d654173736f63696174696f6e73546f52656d6f76650000000000000000815250613636565b61265d84828151811061265057634e487b7160e01b600052603260045260246000fd5b60200260200101516136aa565b61268d84828151811061268057634e487b7160e01b600052603260045260246000fd5b6020026020010151610c02565b9150600a60008583815181106126b357634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000808201600080820160006126df91906147c8565b5050505060005b82518110156127455761273283828151811061271257634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008981526009909252604082209161418f565b508061273d816155c1565b9150506126e6565b5080612750816155c1565b9150506125e6565b50600c546040516315ddc53560e01b81526001600160a01b03909116906315ddc5359061278d9030908990879060040161511d565b600060405180830381600087803b1580156127a757600080fd5b505af11580156127bb573d6000803e3d6000fd5b505050505050505050565b6128046040518060400160405280601481526020017f696e736964652072656d6f7665206c616c6e6473000000000000000000000000815250613636565b815160005b818110156129d15761283484828151811061265057634e487b7160e01b600052603260045260246000fd5b60008061288386848151811061285a57634e487b7160e01b600052603260045260246000fd5b6020026020010151600960008b81526020019081526020016000206141a490919063ffffffff16565b915091506128c56040518060400160405280600c81526020017f52656d6f7665206c616e64730000000000000000000000000000000000000000815250613636565b6128ce816136aa565b84806128d8575080155b6129245760405162461bcd60e51b815260206004820152601760248201527f47414d455f5354494c4c5f484f4c44535f415f4c414e44000000000000000000604482015260640161074b565b61297086848151811061294757634e487b7160e01b600052603260045260246000fd5b6020026020010151600960008b81526020019081526020016000206141b390919063ffffffff16565b6129bc5760405162461bcd60e51b815260206004820152601360248201527f4c414e445f444f45535f4e4f545f455849535400000000000000000000000000604482015260640161074b565b505080806129c9906155c1565b915050612809565b50600b546040516315ddc53560e01b81526001600160a01b03909116906315ddc5359061278d9030908890889060040161511d565b6000612a106123c2565b90506000866001600160a01b0316826001600160a01b03161480612a4c57506001600160a01b03821660009081526001602052604090205460ff165b80612a7c57506001600160a01b0380881660009081526005602090815260408083209386168352929052205460ff165b90506001600160a01b038716612ad45760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f41444452455353000000000000000000000000604482015260640161074b565b6001600160a01b038616612b2a5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161074b565b845160005b8651811015612ce8576000878281518110612b5a57634e487b7160e01b600052603260045260246000fd5b602002602001015190508060001415612b805782612b7781615588565b93505050612cd6565b600080612b8c83612324565b915091508b6001600160a01b0316826001600160a01b031614612bf15760405162461bcd60e51b815260206004820152601b60248201527f42415443485452414e5346455246524f4d5f4e4f545f4f574e45520000000000604482015260640161074b565b8580612c1e5750808015612c1e57506000838152600660205260409020546001600160a01b038881169116145b612c6a5760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161074b565b612c91836004600063ffffffff1983168152602001908152602001600020548d60006140ed565b828b6001600160a01b03168d6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505b80612ce0816155c1565b915050612b2f565b50866001600160a01b0316886001600160a01b031614612d5d576001600160a01b03881660009081526003602052604081208054839290612d2a908490615545565b90915550506001600160a01b03871660009081526003602052604081208054839290612d579084906153e3565b90915550505b6001600160a01b0387163b15158015612da257508380612da25750612da2877f5e8bf644000000000000000000000000000000000000000000000000000000006130fd565b15612e0057612db483898989896141bf565b612e005760405162461bcd60e51b815260206004820152601e60248201527f4552433732315f42415443485f5452414e534645525f52454a45435445440000604482015260640161074b565b5050505050505050565b60006106a6825490565b6000612026838361427e565b6000806000612e2e84612324565b915091506000612e3c6123c2565b90506001600160a01b038316612e945760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161074b565b866001600160a01b0316836001600160a01b031614612ef55760405162461bcd60e51b815260206004820152601760248201527f434845434b5452414e534645525f4e4f545f4f574e4552000000000000000000604482015260640161074b565b6001600160a01b038616612f4b5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161074b565b826001600160a01b0316816001600160a01b03161480612f8357506001600160a01b03811660009081526001602052604090205460ff165b80612fb357506001600160a01b0380881660009081526005602090815260408083209385168352929052205460ff165b80612fdf5750818015612fdf57506000858152600660205260409020546001600160a01b038281169116145b61302b5760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e534645520000000000000000000000604482015260640161074b565b5060019695505050505050565b6001600160a01b038316600090815260036020526040812080549161305c83615588565b90915550506001600160a01b0382166000908152600360205260408120805491613085836155c1565b91905055506130b781600460006130a08563ffffffff191690565b8152602001908152602001600020548460006140ed565b80826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b604080516001600160e01b031983166024808301919091528251808303909101815260449091018252602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a7000000000000000000000000000000000000000000000000000000001781528251935160008082529485948594909392908183858c612710fa955080519450505050609e5a116131b057634e487b7160e01b600052600160045260246000fd5b8280156131ba5750815b9695505050505050565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b81526004016131f99493929190615161565b602060405180830381600087803b15801561321357600080fd5b505af1158015613227573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061324b9190614ec3565b6001600160e01b0319167f150b7a02000000000000000000000000000000000000000000000000000000001491505095945050505050565b6001600160a01b0382166132d95760405162461bcd60e51b815260206004820152601660248201527f53454e4445525f49535f5a45524f5f4144445245535300000000000000000000604482015260640161074b565b60006132e36123c2565b905060ff821660011415613379576007546001600160a01b03630100000090910481169082168114806133275750836001600160a01b0316826001600160a01b0316145b6133735760405162461bcd60e51b815260206004820152601060248201527f554e415554484f52495a45445f41444400000000000000000000000000000000604482015260640161074b565b50610db5565b826001600160a01b0316816001600160a01b031614610db55760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161074b565b6000806133e683612324565b90925090506001600160a01b0382166134415760405162461bcd60e51b815260206004820152601460248201527f544f4b454e5f444f45535f4e4f545f4558495354000000000000000000000000604482015260640161074b565b600061344b6123c2565b9050846001600160a01b0316836001600160a01b0316148061348557506001600160a01b03811660009081526001602052604090205460ff165b806134b557506001600160a01b0380861660009081526005602090815260408083209385168352929052205460ff165b806134e157508180156134e157506000848152600660205260409020546001600160a01b038281169116145b6108c95760405162461bcd60e51b815260206004820152600c60248201527f4e4f545f415050524f5645440000000000000000000000000000000000000000604482015260640161074b565b816001600160a01b0316836001600160a01b03161461358e5760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e45520000000000000000000000000000000000000000000000604482015260640161074b565b63ffffffff198116600160a01b6135aa6001600160ff1b615545565b6000838152600460209081526040808320805494909416949094179092556001600160a01b038716815260039091529081208054916135e883615588565b909155505060405182906000906001600160a01b038716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a450505050565b60006106a68261432d565b6136a78160405160240161364a91906151a6565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f41304fac00000000000000000000000000000000000000000000000000000000179052614338565b50565b6136a7816040516024016136c091815260200190565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167ff5b1bba900000000000000000000000000000000000000000000000000000000179052614338565b600080808061372c8686614359565b909450925050505b9250929050565b805160005b8181101561379e5761378b83828151811061376b57634e487b7160e01b600052603260045260246000fd5b60209081029190910181015160008881526009909252604082209161418f565b5080613796816155c1565b915050613740565b50600b546040516315ddc53560e01b81526001600160a01b03909116906315ddc535906137d39086903090879060040161511d565b600060405180830381600087803b1580156137ed57600080fd5b505af1158015612e00573d6000803e3d6000fd5b6000815167ffffffffffffffff81111561382b57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015613854578160200160208202803683370190505b50905060005b8351811015613bc157600083828151811061388557634e487b7160e01b600052603260045260246000fd5b602002602001015190506000806138b587858151811061285a57634e487b7160e01b600052603260045260246000fd5b915091506138c2816136aa565b80156139105760405162461bcd60e51b815260206004820152601560248201527f4c414e445f414c52454144595f4f434355504945440000000000000000000000604482015260640161074b565b61395e87858151811061393357634e487b7160e01b600052603260045260246000fd5b602002602001015184600960008c815260200190815260200160002061418f9092919063ffffffff16565b506139ab87858151811061398257634e487b7160e01b600052603260045260246000fd5b6020026020010151600a600086815260200190815260200160002061438490919063ffffffff16565b508215613bab57600186511115613ada578315806139fa5750856139d0600186615545565b815181106139ee57634e487b7160e01b600052603260045260246000fd5b60200260200101518314155b8015613aa25750600c546040517f6352211e0000000000000000000000000000000000000000000000000000000081526004810185905230916001600160a01b031690636352211e9060240160206040518083038186803b158015613a5e57600080fd5b505afa158015613a72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a969190614927565b6001600160a01b031614155b15613ad55782858581518110613ac857634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b613bab565b600c546040517f6352211e0000000000000000000000000000000000000000000000000000000081526004810185905230916001600160a01b031690636352211e9060240160206040518083038186803b158015613b3757600080fd5b505afa158015613b4b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613b6f9190614927565b6001600160a01b031614613bab5782858581518110613b9e57634e487b7160e01b600052603260045260246000fd5b6020026020010181815250505b5050508080613bb9906155c1565b91505061385a565b508051156108c957613bea60405180606001604052806021815260200161569d60219139613636565b60005b8151811015613c2b57613c1982828151811061265057634e487b7160e01b600052603260045260246000fd5b80613c23816155c1565b915050613bed565b50600c546040516315ddc53560e01b81526001600160a01b03909116906315ddc5359061278d9088903090869060040161511d565b600080613c6f60606002615455565b613c7990846153fb565b90506000613c8960206002615455565b613c9390856153fb565b90508380613ca08161559f565b9150506000613cae86612369565b9050806001600160a01b0316876001600160a01b03161415613cd557613cd587828861352d565b6000613ce5858386866000613e69565b5090506000613cf382612369565b9050806001600160a01b0316836001600160a01b031614613d565760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e45520000000000000000000000000000000000000000000000604482015260640161074b565b50979650505050505050565b6001600160a01b03821660009081526001602052604090205460ff1615613dcb5760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f415050524f56414c5f4348414e4745000000000000000000604482015260640161074b565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6060613e4382614390565b604051602001613e539190615042565b6040516020818303038152906040529050919050565b6000806001600160a01b038616613ec25760405162461bcd60e51b815260206004820152601a60248201527f43414e27545f53454e445f544f5f5a45524f5f41444452455353000000000000604482015260640161074b565b60008060008515613f535760075460019350613ee5908b908a9060ff1686614533565b915063ffffffff19821660008181526004602052604090205490915015613f4e5760405162461bcd60e51b815260206004820152601a60248201527f53544f524147455f49445f52455553455f464f5242494444454e000000000000604482015260640161074b565b613f76565b600754879350613f6a908b908a9060ff1686614533565b91505063ffffffff1981165b613faa6001600160a01b038a167affff0000000000000000000000000000000000000000000000000060c886901b166153e3565b6000828152600460209081526040808320939093556001600160a01b038c16825260039052908120805491613fde836155c1565b909155505060405182906001600160a01b038b16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a490999098509650505050505050565b600082511161407b5760405162461bcd60e51b815260206004820152601460248201527f454d5054595f4c414e445f4944535f4152524159000000000000000000000000604482015260640161074b565b600b546040516315ddc53560e01b81526001600160a01b03909116906315ddc535906140af9087903090879060040161511d565b600060405180830381600087803b1580156140c957600080fd5b505af11580156140dd573d6000803e3d6000fd5b50505050611f9c84848484613801565b80156141395763ffffffff1984166000908152600460205260409020600160ff1b6001600160a01b03841673ffffffffffffffffffffffffffffffffffffffff19861617179055611f9c565b6001600160a01b0382166141526001600160ff1b615545565b841673ffffffffffffffffffffffffffffffffffffffff1916176004600063ffffffff198716815260208101919091526040016000205550505050565b600061419c8484846145b9565b949350505050565b600080808061372c86866145d6565b6000612026838361460f565b600080846001600160a01b0316634b808c46888887876040518563ffffffff1660e01b81526004016141f494939291906150d4565b602060405180830381600087803b15801561420e57600080fd5b505af1158015614222573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142469190614ec3565b6001600160e01b0319167f4b808c46000000000000000000000000000000000000000000000000000000001491505095945050505050565b815460009082106142f75760405162461bcd60e51b815260206004820152602260248201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e60448201527f6473000000000000000000000000000000000000000000000000000000000000606482015260840161074b565b82600001828154811061431a57634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905092915050565b60006106a682612e0a565b80516a636f6e736f6c652e6c6f67602083016000808483855afa5050505050565b600080806143678585612e14565b600081815260029690960160205260409095205494959350505050565b6000612026838361462c565b60408051603480825260608281019093528391600090826020820181803683370190505090507f6162636465666768696a6b6c6d6e6f707172737475767778797a32333435363760026143e46008866155fa565b901b60ff166020811061440757634e487b7160e01b600052603260045260246000fd5b1a60f81b8161441584615588565b9350838151811061443657634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506144706008846153fb565b92505b811561419c577f6162636465666768696a6b6c6d6e6f707172737475767778797a3233343536376144a56020856155fa565b602081106144c357634e487b7160e01b600052603260045260246000fd5b1a60f81b816144d184615588565b935083815181106144f257634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061452c6020846153fb565b9250614473565b600061ffff821661454660106002615455565b6145539060ff8616615526565b61455f60206002615455565b6145739067ffffffffffffffff8816615526565b61457f60606002615455565b614592906001600160a01b038a16615526565b61459c91906153e3565b6145a691906153e3565b6145b091906153e3565b95945050505050565b6000828152600284016020526040812082905561419c8484614384565b6000818152600283016020526040812054819080614604576145f8858561467b565b60009250925050613734565b600192509050613734565b600081815260028301602052604081208190556120268383614687565b6000818152600183016020526040812054614673575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556117e7565b5060006117e7565b60006120268383614693565b600061202683836146ab565b60008181526001830160205260408120541515612026565b600081815260018301602052604081205480156147be5760006146cf600183615545565b85549091506000906146e390600190615545565b9050600086600001828154811061470a57634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508087600001848154811061473b57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001556147528360016153e3565b6000828152600189016020526040902055865487908061478257634e487b7160e01b600052603160045260246000fd5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506117e7565b60009150506117e7565b50805460008255906000526020600020908101906136a791905b808211156147f657600081556001016147e2565b5090565b600082601f83011261480a578081fd5b8135602061481f61481a83615377565b615346565b82815281810190858301855b8581101561485457614842898684358b0101614861565b8452928401929084019060010161482b565b5090979650505050505050565b600082601f830112614871578081fd5b8135602061488161481a83615377565b828152818101908583018385028701840188101561489d578586fd5b855b858110156148545781358452928401929084019060010161489f565b803580151581146106a957600080fd5b60008083601f8401126148dc578182fd5b50813567ffffffffffffffff8111156148f3578182fd5b60208301915083602082850101111561373457600080fd5b60006020828403121561491c578081fd5b813561202681615650565b600060208284031215614938578081fd5b815161202681615650565b60008060408385031215614955578081fd5b823561496081615650565b9150602083013561497081615650565b809150509250929050565b60008060008060008060808789031215614993578182fd5b863561499e81615650565b955060208701356149ae81615650565b9450604087013567ffffffffffffffff808211156149ca578384fd5b818901915089601f8301126149dd578384fd5b8135818111156149eb578485fd5b8a602080830285010111156149fe578485fd5b602083019650809550506060890135915080821115614a1b578384fd5b50614a2889828a016148cb565b979a9699509497509295939492505050565b600080600060608486031215614a4e578283fd5b8335614a5981615650565b92506020840135614a6981615650565b9150614a77604085016148bb565b90509250925092565b600080600060608486031215614a94578081fd5b8335614a9f81615650565b92506020840135614aaf81615650565b9150604084013567ffffffffffffffff811115614aca578182fd5b840160608187031215614adb578182fd5b809150509250925092565b600080600060608486031215614afa578081fd5b8335614b0581615650565b92506020840135614b1581615650565b929592945050506040919091013590565b600080600080600060808688031215614b3d578283fd5b8535614b4881615650565b94506020860135614b5881615650565b935060408601359250606086013567ffffffffffffffff811115614b7a578182fd5b614b86888289016148cb565b969995985093965092949392505050565b60008060008060808587031215614bac578182fd5b8435614bb781615650565b9350602085810135614bc881615650565b935060408601359250606086013567ffffffffffffffff80821115614beb578384fd5b818801915088601f830112614bfe578384fd5b813581811115614c1057614c1061563a565b614c2284601f19601f84011601615346565b91508082528984828501011115614c37578485fd5b8084840185840137810190920192909252939692955090935050565b60008060008060808587031215614c68578182fd5b8435614c7381615650565b93506020850135614c8381615650565b925060408501359150606085013567ffffffffffffffff811115614ca5578182fd5b850160408188031215614cb6578182fd5b939692955090935050565b60008060008060808587031215614cd6578182fd5b8435614ce181615650565b93506020850135614cf181615650565b925060408501359150606085013567ffffffffffffffff80821115614d14578283fd5b9086019060c08289031215614d27578283fd5b614d3160c0615346565b823582811115614d3f578485fd5b614d4b8a8286016147fa565b825250602083013582811115614d5f578485fd5b614d6b8a8286016147fa565b602083015250604083013582811115614d82578485fd5b614d8e8a828601614861565b604083015250606083013582811115614da5578485fd5b614db18a828601614861565b606083015250608083013582811115614dc8578485fd5b614dd48a828601614861565b60808301525060a083013560a082015280935050505092959194509250565b60008060408385031215614e05578182fd5b8235614e1081615650565b9150614e1e602084016148bb565b90509250929050565b60008060008060808587031215614e3c578182fd5b8435614e4781615650565b93506020850135614e5781615650565b92506040850135614e6781615650565b9150606085013560ff81168114614cb6578182fd5b60008060408385031215614e8e578182fd5b8235614e9981615650565b946020939093013593505050565b600060208284031215614eb8578081fd5b813561202681615665565b600060208284031215614ed4578081fd5b815161202681615665565b600060208284031215614ef0578081fd5b5035919050565b60008060408385031215614f09578182fd5b82359150602083013567ffffffffffffffff811115614f26578182fd5b614f3285828601614861565b9150509250929050565b6000815180845260208085018081965082840281019150828601855b85811015614f82578284038952614f70848351614fdc565b98850198935090840190600101614f58565b5091979650505050505050565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115614fc0578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b8381101561500b57815187529582019590820190600101614fef565b509495945050505050565b6000815180845261502e81602086016020860161555c565b601f01601f19169290920160200192915050565b60007f697066733a2f2f626166796265690000000000000000000000000000000000008252825161507a81600e85016020870161555c565b7f2f00000000000000000000000000000000000000000000000000000000000000600e9390910192830152507f6573746174652e6a736f6e000000000000000000000000000000000000000000600f820152601a01919050565b60006001600160a01b038087168352808616602084015250608060408301526151006080830185614fdc565b82810360608401526151128185615016565b979650505050505050565b60006001600160a01b038086168352808516602084015250608060408301526151496080830184614fdc565b82810360609093019290925281526020019392505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526131ba6080830184615016565b6000602082526120266020830184614fdc565b6000602082526120266020830184615016565b6000602082526151c9838461539b565b606060208501526151de608085018284614f8f565b9150506151ee602085018561539b565b601f19858403016040860152615205838284614f8f565b92505050604084013560608401528091505092915050565b6000602082528251604060208401526152396060840182614fdc565b90506020840151601f198483030160408501526145b08282614fdc565b600060208252825160c0602084015261527260e0840182614f3c565b90506020840151601f19808584030160408601526152908383614f3c565b925060408601519150808584030160608601526152ad8383614fdc565b925060608601519150808584030160808601526152ca8383614fdc565b925060808601519150808584030160a0860152506152e88282614fdc565b91505060a084015160c08401528091505092915050565b6000808335601e19843603018112615315578283fd5b83018035915067ffffffffffffffff82111561532f578283fd5b602090810192508102360382131561373457600080fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561536f5761536f61563a565b604052919050565b600067ffffffffffffffff8211156153915761539161563a565b5060209081020190565b6000808335601e198436030181126153b1578283fd5b830160208101925035905067ffffffffffffffff8111156153d157600080fd5b60208102360383131561373457600080fd5b600082198211156153f6576153f661560e565b500190565b60008261540a5761540a615624565b500490565b80825b6001808611615421575061544c565b8187048211156154335761543361560e565b8086161561544057918102915b9490941c938002615412565b94509492505050565b600061202660001960ff85168460008261547157506001612026565b8161547e57506000612026565b8160018114615494576002811461549e576154cb565b6001915050612026565b60ff8411156154af576154af61560e565b6001841b9150848211156154c5576154c561560e565b50612026565b5060208310610133831016604e8410600b84101617156154fe575081810a838111156154f9576154f961560e565b612026565b61550b848484600161540f565b80860482111561551d5761551d61560e565b02949350505050565b60008160001904831182151516156155405761554061560e565b500290565b6000828210156155575761555761560e565b500390565b60005b8381101561557757818101518382015260200161555f565b83811115611f9c5750506000910152565b6000816155975761559761560e565b506000190190565b600061ffff808316818114156155b7576155b761560e565b6001019392505050565b60006000198214156155d5576155d561560e565b5060010190565b600067ffffffffffffffff808316818114156155b7576155b761560e565b60008261560957615609615624565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146136a757600080fd5b6001600160e01b0319811681146136a757600080fdfe686572652077652073686f756c6420656e7465722072656d6f7665206c616e6473696e73696465205f6164644c616e647347616d65734173736f63696174696f6e20a2646970667358221220f64d16ce02fccde93746938834820c9818288e8fba9f420a1573d87fa922faf664736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "id": "The id of the token.",
          "operator": "The address receiving the approval."
        }
      },
      "approveFor(address,address,uint256)": {
        "params": {
          "id": "The id of the token.",
          "operator": "The address receiving the approval.",
          "sender": "The address giving the approval."
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address to look for."
        },
        "returns": {
          "_0": "The number of tokens owned by the address."
        }
      },
      "batchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "ids": "The ids of the tokens.",
          "to": "The recipient of the token."
        }
      },
      "burn(uint256)": {
        "params": {
          "id": "The token which will be burnt."
        }
      },
      "burnFrom(address,uint256)": {
        "params": {
          "from": "address whose token is to be burnt.",
          "id": "The token which will be burnt."
        }
      },
      "changeAdmin(address)": {
        "details": "Change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "The address of the new administrator."
        }
      },
      "changeMinter(address)": {
        "details": "Change the minter to be `newMinter`.",
        "params": {
          "newMinter": "The address of the new minter."
        }
      },
      "createEstate(address,address,(uint256[],uint256[],bytes32))": {
        "params": {
          "creation": "The data to use to create the estate.",
          "from": "The address of the one creating the estate.",
          "to": "The address that will own the estate."
        }
      },
      "getAdmin()": {
        "details": "Get the current administrator of this contract.",
        "returns": {
          "_0": "The current administrator of this contract."
        }
      },
      "getApproved(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "_0": "The address of the operator."
        }
      },
      "getMinter()": {
        "details": "Get the current minter of this contract.",
        "returns": {
          "_0": "The current minter of this contract."
        }
      },
      "getStorageId(uint256)": {
        "params": {
          "tokenId": "The tokenId for which to find the first token Id."
        },
        "returns": {
          "_0": "The storage id for this token."
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "The address of the operator.",
          "owner": "The address of the owner."
        },
        "returns": {
          "isOperator": "The status of the approval."
        }
      },
      "isSuperOperator(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has superOperator rights."
        }
      },
      "name()": {
        "returns": {
          "_0": "The name of the token contract."
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "owner": "The address of the token owner."
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "ids": "The ids of the tokens.",
          "to": "The recipient of the token."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "The send of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "The determination of the approval.",
          "operator": "The address receiving the approval."
        }
      },
      "setApprovalForAllFor(address,address,bool)": {
        "params": {
          "approved": "The determination of the approval.",
          "operator": "The address receiving the approval.",
          "sender": "The address giving the approval."
        }
      },
      "setSuperOperator(address,bool)": {
        "params": {
          "enabled": "set whether the superOperator is enabled or disabled.",
          "superOperator": "address that will be given/removed superOperator right."
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "id": "The id of the interface."
        },
        "returns": {
          "_0": "Whether the interface is supported."
        }
      },
      "symbol()": {
        "returns": {
          "_0": "the symbol of the token contract."
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "uri": "The URI of the token metadata."
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "transferFromBurnedEstate(address,address,uint256,(uint256[],uint256[]))": {
        "params": {
          "estateId": "The estate to recover lands from."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approve an operator to spend tokens on the senders behalf."
      },
      "approveFor(address,address,uint256)": {
        "notice": "Approve an operator to spend tokens on the sender behalf."
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens owned by an address."
      },
      "batchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses."
      },
      "burn(uint256)": {
        "notice": "Burns token `id`."
      },
      "burnFrom(address,uint256)": {
        "notice": "Burn token`id` from `from`."
      },
      "createEstate(address,address,(uint256[],uint256[],bytes32))": {
        "notice": "Create a new estate token with lands."
      },
      "getApproved(uint256)": {
        "notice": "Get the approved operator for a specific token."
      },
      "getStorageId(uint256)": {
        "notice": "Get the storageID (no chainIndex or version data), which is constant for a given token."
      },
      "isApprovedForAll(address,address)": {
        "notice": "Check if the sender approved the operator."
      },
      "isSuperOperator(address)": {
        "notice": "check whether address `who` is given superOperator rights."
      },
      "name()": {
        "notice": "Return the name of the token contract."
      },
      "ownerOf(uint256)": {
        "notice": "Get the owner of a token."
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses, while ensuring the receiving contract has a receiver method."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses letting the receiver know of the transfer."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender."
      },
      "setApprovalForAllFor(address,address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender."
      },
      "setSuperOperator(address,bool)": {
        "notice": "Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights)."
      },
      "supportsInterface(bytes4)": {
        "notice": "Check if the contract supports an interface. 0x01ffc9a7 is ERC-165. 0x80ac58cd is ERC-721"
      },
      "symbol()": {
        "notice": "Get the symbol of the token contract."
      },
      "tokenURI(uint256)": {
        "notice": "Return the URI of a specific token."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 31849,
        "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
        "label": "_admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 32081,
        "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
        "label": "_superOperators",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 29950,
        "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 30134,
        "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
        "label": "_numNFTPerAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 30138,
        "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 30144,
        "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 30148,
        "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
        "label": "_operators",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 30150,
        "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
        "label": "_chainIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 2675,
        "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
        "label": "_initialized",
        "offset": 1,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 2678,
        "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
        "label": "_initializing",
        "offset": 2,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 31909,
        "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
        "label": "_minter",
        "offset": 3,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 34782,
        "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
        "label": "_nextId",
        "offset": 23,
        "slot": "7",
        "type": "t_uint64"
      },
      {
        "astId": 34786,
        "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
        "label": "_metaData",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 34791,
        "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
        "label": "estates",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(UintToUintMap)33199_storage)"
      },
      {
        "astId": 34796,
        "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
        "label": "gamesToLands",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_struct(UintSet)2158_storage)"
      },
      {
        "astId": 34799,
        "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
        "label": "_land",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(LandToken)34700"
      },
      {
        "astId": 34802,
        "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
        "label": "_gameToken",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(GameBaseToken)16197"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(GameBaseToken)16197": {
        "encoding": "inplace",
        "label": "contract GameBaseToken",
        "numberOfBytes": "20"
      },
      "t_contract(LandToken)34700": {
        "encoding": "inplace",
        "label": "contract LandToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_struct(UintSet)2158_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)2158_storage"
      },
      "t_mapping(t_uint256,t_struct(UintToUintMap)33199_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct EnumerableMap.UintToUintMap)",
        "numberOfBytes": "32",
        "value": "t_struct(UintToUintMap)33199_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Map)32969_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Map",
        "members": [
          {
            "astId": 32964,
            "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(UintSet)2158_storage"
          },
          {
            "astId": 32968,
            "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1754_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1749,
            "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1753,
            "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)2158_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 2157,
            "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1754_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintToUintMap)33199_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.UintToUintMap",
        "members": [
          {
            "astId": 33198,
            "contract": "src/solc_0.8/polygon/child/ChildEstateTokenV1.sol:ChildEstateTokenV1",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Map)32969_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}