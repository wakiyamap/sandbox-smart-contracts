{
  "address": "0x47E7f48C398b44682Fa6871fDda3dcb531C61b1c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "original",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "CreatorshipTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "gameOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "gameEditor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isEditor",
          "type": "bool"
        }
      ],
      "name": "GameEditorSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "oldId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "assetIdsToRemove",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "assetAmountsToRemove",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "assetIdsToAdd",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "assetAmountsToAdd",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes32",
              "name": "uri",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "exactNumOfLandsRequired",
              "type": "uint256"
            }
          ],
          "indexed": false,
          "internalType": "struct IGameToken.GameData",
          "name": "update",
          "type": "tuple"
        }
      ],
      "name": "GameTokenUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldMinter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "MinterChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "SuperOperator",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "approveFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "batchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "assetIds",
          "type": "uint256[]"
        }
      ],
      "name": "burnAndRecover",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "changeAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newMinter",
          "type": "address"
        }
      ],
      "name": "changeMinter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "assetIdsToRemove",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "assetAmountsToRemove",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "assetIdsToAdd",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "assetAmountsToAdd",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes32",
              "name": "uri",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "exactNumOfLandsRequired",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGameToken.GameData",
          "name": "creation",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "editor",
          "type": "address"
        },
        {
          "internalType": "uint64",
          "name": "subId",
          "type": "uint64"
        }
      ],
      "name": "createGame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "creatorOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "assetIds",
          "type": "uint256[]"
        }
      ],
      "name": "getAssetBalances",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "getExactNumOfLandsRequired",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMinter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getStorageId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTrustedForwarder",
      "outputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "internalType": "contract IAssetToken",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "chainIndex",
          "type": "uint8"
        }
      ],
      "name": "initV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isOperator",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "estateId",
          "type": "uint256"
        }
      ],
      "name": "isBurned",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gameOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "editor",
          "type": "address"
        }
      ],
      "name": "isGameEditor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isEditor",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "isSuperOperator",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "forwarder",
          "type": "address"
        }
      ],
      "name": "isTrustedForwarder",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "assetIds",
          "type": "uint256[]"
        }
      ],
      "name": "recoverAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "ids",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeBatchTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAllFor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "gameOwner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "editor",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isEditor",
          "type": "bool"
        }
      ],
      "name": "setGameEditor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "superOperator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "enabled",
          "type": "bool"
        }
      ],
      "name": "setSuperOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "id",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferCreatorship",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "gameId",
          "type": "uint256"
        },
        {
          "components": [
            {
              "internalType": "uint256[]",
              "name": "assetIdsToRemove",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "assetAmountsToRemove",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "assetIdsToAdd",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "assetAmountsToAdd",
              "type": "uint256[]"
            },
            {
              "internalType": "bytes32",
              "name": "uri",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "exactNumOfLandsRequired",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGameToken.GameData",
          "name": "update",
          "type": "tuple"
        }
      ],
      "name": "updateGame",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xccbaee630cd41e896197a30c924a4c023cf4d677f681fd7e5bad4f7a27607e24",
  "receipt": {
    "to": null,
    "from": "0x5F890c9522dCE5670d741D4277BFCC2d9cA8Af02",
    "contractAddress": "0x47E7f48C398b44682Fa6871fDda3dcb531C61b1c",
    "transactionIndex": 38,
    "gasUsed": "4389590",
    "logsBloom": "0x
    "blockHash": "0x6b96e3890602eaf9ec5fd18762b6c5c11cae903adb9835e9074ca5783130403d",
    "transactionHash": "0xccbaee630cd41e896197a30c924a4c023cf4d677f681fd7e5bad4f7a27607e24",
    "logs": [
      {
        "transactionIndex": 38,
        "blockNumber": 24684718,
        "transactionHash": "0xccbaee630cd41e896197a30c924a4c023cf4d677f681fd7e5bad4f7a27607e24",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005f890c9522dce5670d741d4277bfcc2d9ca8af02",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x000000000000000000000000000000000000000000000000001e411441ce0c7a000000000000000000000000000000000000000000000000193965896df23ae5000000000000000000000000000000000000000000000599ded0203a7664554f000000000000000000000000000000000000000000000000191b24752c242e6b000000000000000000000000000000000000000000000599deee614eb83261c9",
        "logIndex": 77,
        "blockHash": "0x6b96e3890602eaf9ec5fd18762b6c5c11cae903adb9835e9074ca5783130403d"
      }
    ],
    "blockNumber": 24684718,
    "cumulativeGasUsed": "10335761",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "c98e50b6aaa9e2d9246638fbda3bd3e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"original\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"CreatorshipTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"gameOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"gameEditor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isEditor\",\"type\":\"bool\"}],\"name\":\"GameEditorSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"oldId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"assetIdsToRemove\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"assetAmountsToRemove\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"assetIdsToAdd\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"assetAmountsToAdd\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"uri\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"exactNumOfLandsRequired\",\"type\":\"uint256\"}],\"indexed\":false,\"internalType\":\"struct IGameToken.GameData\",\"name\":\"update\",\"type\":\"tuple\"}],\"name\":\"GameTokenUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldMinter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"MinterChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"SuperOperator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"approveFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"assetIds\",\"type\":\"uint256[]\"}],\"name\":\"burnAndRecover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"changeAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newMinter\",\"type\":\"address\"}],\"name\":\"changeMinter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"assetIdsToRemove\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"assetAmountsToRemove\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"assetIdsToAdd\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"assetAmountsToAdd\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"uri\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"exactNumOfLandsRequired\",\"type\":\"uint256\"}],\"internalType\":\"struct IGameToken.GameData\",\"name\":\"creation\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"editor\",\"type\":\"address\"},{\"internalType\":\"uint64\",\"name\":\"subId\",\"type\":\"uint64\"}],\"name\":\"createGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"creatorOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"assetIds\",\"type\":\"uint256[]\"}],\"name\":\"getAssetBalances\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"getExactNumOfLandsRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMinter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getStorageId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTrustedForwarder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"contract IAssetToken\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"chainIndex\",\"type\":\"uint8\"}],\"name\":\"initV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isOperator\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"estateId\",\"type\":\"uint256\"}],\"name\":\"isBurned\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gameOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"editor\",\"type\":\"address\"}],\"name\":\"isGameEditor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isEditor\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"isSuperOperator\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"assetIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"ids\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeBatchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAllFor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"gameOwner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"editor\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isEditor\",\"type\":\"bool\"}],\"name\":\"setGameEditor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"superOperator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"enabled\",\"type\":\"bool\"}],\"name\":\"setSuperOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"id\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferCreatorship\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"gameId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256[]\",\"name\":\"assetIdsToRemove\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"assetAmountsToRemove\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"assetIdsToAdd\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"assetAmountsToAdd\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes32\",\"name\":\"uri\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"exactNumOfLandsRequired\",\"type\":\"uint256\"}],\"internalType\":\"struct IGameToken.GameData\",\"name\":\"update\",\"type\":\"tuple\"}],\"name\":\"updateGame\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"params\":{\"id\":\"The id of the token.\",\"operator\":\"The address receiving the approval.\"}},\"approveFor(address,address,uint256)\":{\"params\":{\"id\":\"The id of the token.\",\"operator\":\"The address receiving the approval.\",\"sender\":\"The address giving the approval.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address to look for.\"},\"returns\":{\"_0\":\"The number of tokens owned by the address.\"}},\"batchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"ids\":\"The ids of the tokens.\",\"to\":\"The recipient of the token.\"}},\"burn(uint256)\":{\"params\":{\"gameId\":\"The id of the GAME to destroy.\"}},\"burnAndRecover(address,address,uint256,uint256[])\":{\"params\":{\"assetIds\":\"The assets to recover from the burnt GAME.\",\"from\":\"The address of the one destroying the game.\",\"gameId\":\"The id of the GAME to destroy.\",\"to\":\"The address to send all GAME assets to.\"}},\"burnFrom(address,uint256)\":{\"params\":{\"from\":\"The address whose GAME is being burnt.\",\"gameId\":\"The id of the GAME to burn.\"}},\"changeAdmin(address)\":{\"details\":\"Change the administrator to be `newAdmin`.\",\"params\":{\"newAdmin\":\"The address of the new administrator.\"}},\"changeMinter(address)\":{\"details\":\"Change the minter to be `newMinter`.\",\"params\":{\"newMinter\":\"The address of the new minter.\"}},\"createGame(address,address,(uint256[],uint256[],uint256[],uint256[],bytes32,uint256),address,uint64)\":{\"params\":{\"creation\":\"The struct containing ids & ammounts of assets to add to this game, along with the uri to set.\",\"editor\":\"The address to allow to edit (can also be set later).\",\"from\":\"The address of the one creating the game (may be different from msg.sender if metaTx).\",\"subId\":\"A random id created on the backend.\",\"to\":\"The address who will be assigned ownership of this game.\"},\"returns\":{\"id\":\"The id of the new GAME token (erc721).\"}},\"creatorOf(uint256)\":{\"params\":{\"gameId\":\"The id of the token to get the creator of.\"},\"returns\":{\"_0\":\"the creator of the token type `id`.\"}},\"getAdmin()\":{\"details\":\"Get the current administrator of this contract.\",\"returns\":{\"_0\":\"The current administrator of this contract.\"}},\"getApproved(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"_0\":\"The address of the operator.\"}},\"getAssetBalances(uint256,uint256[])\":{\"params\":{\"assetIds\":\"The assets to get balances for.\",\"gameId\":\"The game to query.\"}},\"getMinter()\":{\"details\":\"Get the current minter of this contract.\",\"returns\":{\"_0\":\"The current minter of this contract.\"}},\"getStorageId(uint256)\":{\"params\":{\"tokenId\":\"The tokenId for which to find the first token Id.\"},\"returns\":{\"_0\":\"The storage id for this token.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address of the operator.\",\"owner\":\"The address of the owner.\"},\"returns\":{\"isOperator\":\"The status of the approval.\"}},\"isGameEditor(address,address)\":{\"params\":{\"editor\":\"The address of the editor to set.\",\"gameOwner\":\"The address of the owner of the GAME.\"},\"returns\":{\"isEditor\":\"Editor status of editor for given tokenId.\"}},\"isSuperOperator(address)\":{\"params\":{\"who\":\"The address to query.\"},\"returns\":{\"_0\":\"whether the address has superOperator rights.\"}},\"name()\":{\"returns\":{\"_0\":\"The name of the token contract.\"}},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"params\":{\"operator\":\"The address of the operator in the current tx.\"},\"returns\":{\"_0\":\"the bytes4 value 0xbc197c81.\"}},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"params\":{\"operator\":\"The address of the operator in the current tx.\"},\"returns\":{\"_0\":\"the bytes4 value 0xf23a6e61.\"}},\"ownerOf(uint256)\":{\"params\":{\"id\":\"The id of the token.\"},\"returns\":{\"owner\":\"The address of the token owner.\"}},\"recoverAssets(address,address,uint256,uint256[])\":{\"params\":{\"assetIds\":\"The assets to recover from the burnt GAME.\",\"from\":\"Previous owner of the burnt game.\",\"gameId\":\"Id of the burnt GAME token.\",\"to\":\"Address that will receive the assets.\"}},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"ids\":\"The ids of the tokens.\",\"to\":\"The recipient of the token.\"}},\"safeTransferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The send of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"params\":{\"data\":\"Additional data.\",\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"setApprovalForAll(address,bool)\":{\"params\":{\"approved\":\"The determination of the approval.\",\"operator\":\"The address receiving the approval.\"}},\"setApprovalForAllFor(address,address,bool)\":{\"params\":{\"approved\":\"The determination of the approval.\",\"operator\":\"The address receiving the approval.\",\"sender\":\"The address giving the approval.\"}},\"setGameEditor(address,address,bool)\":{\"params\":{\"editor\":\"The address of the editor to set.\",\"gameOwner\":\"The address of a GAME token creator.\",\"isEditor\":\"Add or remove the ability to edit.\"}},\"setSuperOperator(address,bool)\":{\"params\":{\"enabled\":\"set whether the superOperator is enabled or disabled.\",\"superOperator\":\"address that will be given/removed superOperator right.\"}},\"supportsInterface(bytes4)\":{\"params\":{\"id\":\"The id of the interface.\"},\"returns\":{\"_0\":\"if the interface is supported.\"}},\"symbol()\":{\"returns\":{\"_0\":\"the symbol of the token contract.\"}},\"tokenURI(uint256)\":{\"params\":{\"gameId\":\"The id of the token.\"},\"returns\":{\"uri\":\"The URI of the token metadata.\"}},\"transferCreatorship(uint256,address,address)\":{\"params\":{\"gameId\":\"The current id of the GAME token.\",\"sender\":\"The address of current registered creator.\",\"to\":\"The address to transfer the creatorship to\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"from\":\"The sender of the token.\",\"id\":\"The id of the token.\",\"to\":\"The recipient of the token.\"}},\"updateGame(address,uint256,(uint256[],uint256[],uint256[],uint256[],bytes32,uint256))\":{\"params\":{\"from\":\"The one updating the GAME token.\",\"gameId\":\"The current id of the GAME token.\",\"update\":\"The values to use for the update.\"},\"returns\":{\"_0\":\"The new gameId.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the senders behalf.\"},\"approveFor(address,address,uint256)\":{\"notice\":\"Approve an operator to spend tokens on the sender behalf.\"},\"balanceOf(address)\":{\"notice\":\"Get the number of tokens owned by an address.\"},\"batchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses.\"},\"burn(uint256)\":{\"notice\":\"Burn a GAME token.\"},\"burnAndRecover(address,address,uint256,uint256[])\":{\"notice\":\"Burn a GAME token and recover assets.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burn a GAME token on behalf of owner.\"},\"createGame(address,address,(uint256[],uint256[],uint256[],uint256[],bytes32,uint256),address,uint64)\":{\"notice\":\"Create a new GAME token.\"},\"creatorOf(uint256)\":{\"notice\":\"Get the creator of the token type `id`.\"},\"getApproved(uint256)\":{\"notice\":\"Get the approved operator for a specific token.\"},\"getAssetBalances(uint256,uint256[])\":{\"notice\":\"Get the amount of each assetId in a GAME.\"},\"getStorageId(uint256)\":{\"notice\":\"Get the storageID (no chainIndex or version data), which is constant for a given token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Check if the sender approved the operator.\"},\"isGameEditor(address,address)\":{\"notice\":\"Get game editor status.\"},\"isSuperOperator(address)\":{\"notice\":\"check whether address `who` is given superOperator rights.\"},\"name()\":{\"notice\":\"Return the name of the token contract.\"},\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\":{\"notice\":\"Called by other contracts to check if this can receive erc1155 batch.\"},\"onERC1155Received(address,address,uint256,uint256,bytes)\":{\"notice\":\"Called by other contracts to check if this can receive erc1155 tokens.\"},\"ownerOf(uint256)\":{\"notice\":\"Get the owner of a token.\"},\"recoverAssets(address,address,uint256,uint256[])\":{\"notice\":\"Transfer assets from a burnt GAME.\"},\"safeBatchTransferFrom(address,address,uint256[],bytes)\":{\"notice\":\"Transfer many tokens between 2 addresses, while ensuring the receiving contract has a receiver method.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver know of the transfer.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfer a token between 2 addresses letting the receiver knows of the transfer.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender.\"},\"setApprovalForAllFor(address,address,bool)\":{\"notice\":\"Set the approval for an operator to manage all the tokens of the sender.\"},\"setGameEditor(address,address,bool)\":{\"notice\":\"Allow token owner to set game editors.\"},\"setSuperOperator(address,bool)\":{\"notice\":\"Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\"},\"supportsInterface(bytes4)\":{\"notice\":\"Check if the contract supports an interface. 0x01ffc9a7 is ERC-165. 0x80ac58cd is ERC-721.\"},\"symbol()\":{\"notice\":\"Get the symbol of the token contract.\"},\"tokenURI(uint256)\":{\"notice\":\"Return the URI of a specific token.\"},\"transferCreatorship(uint256,address,address)\":{\"notice\":\"Transfers creatorship of `original` from `sender` to `to`.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer a token between 2 addresses.\"},\"updateGame(address,uint256,(uint256[],uint256[],uint256[],uint256[],bytes32,uint256))\":{\"notice\":\"Update an existing GAME token.This actually burns old token and mints new token with same basId & incremented version.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/solc_0.8/polygon/child/ChildGameTokenV1.sol\":\"ChildGameTokenV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x2f359f9d5c56394e60d74401487ab55d8ef0012907b07c9abbb8f998bf5ddfec\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x714a33fd66816f608f6eda908da24eb6009eee50adf4062c86639d4fe508a7b6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xc6cef87559d0aeffdf0a99803de655938a7779ec0a3cd5d4383483ad85565a09\",\"license\":\"MIT\"},\"src/solc_0.8/Game/GameBaseToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../common/BaseWithStorage/ImmutableERC721.sol\\\";\\nimport \\\"../common/BaseWithStorage/WithMinter.sol\\\";\\nimport \\\"../common/interfaces/IAssetToken.sol\\\";\\nimport \\\"../common/interfaces/IGameToken.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\ncontract GameBaseToken is ImmutableERC721, WithMinter, Initializable, IGameToken {\\n    ///////////////////////////////  Data //////////////////////////////\\n\\n    IAssetToken internal _asset;\\n\\n    bytes4 private constant ERC1155_RECEIVED = 0xf23a6e61;\\n    bytes4 private constant ERC1155_BATCH_RECEIVED = 0xbc197c81;\\n\\n    mapping(uint256 => mapping(uint256 => uint256)) private _gameAssets;\\n    mapping(uint256 => address) private _creatorship; // creatorship transfer\\n\\n    mapping(uint256 => bytes32) private _metaData;\\n    mapping(address => mapping(address => bool)) private _gameEditors;\\n    mapping(uint256 => uint256) internal _exactNumOfLandsRequired;\\n    ///////////////////////////////  Events //////////////////////////////\\n\\n    /// @dev Emits when a game is updated.\\n    /// @param oldId The id of the previous erc721 GAME token.\\n    /// @param newId The id of the newly minted token.\\n    /// @param update The changes made to the Game: new assets, removed assets, uri\\n\\n    event GameTokenUpdated(uint256 indexed oldId, uint256 indexed newId, IGameToken.GameData update);\\n\\n    /// @dev Emits when creatorship of a GAME token is transferred.\\n    /// @param original The original creator of the GAME token.\\n    /// @param from The current 'creator' of the token.\\n    /// @param to The new 'creator' of the token.\\n    event CreatorshipTransfer(address indexed original, address indexed from, address indexed to);\\n\\n    /// @dev Emits when an address has its gameEditor status changed.\\n    /// @param gameOwner The owner of the GAME token.\\n    /// @param gameEditor The address whose editor rights to update.\\n    /// @param isEditor WHether the address 'gameEditor' should be an editor.\\n    event GameEditorSet(address indexed gameOwner, address gameEditor, bool isEditor);\\n\\n    function initV1(\\n        address trustedForwarder,\\n        address admin,\\n        IAssetToken asset,\\n        uint8 chainIndex\\n    ) public initializer() {\\n        _admin = admin;\\n        _asset = asset;\\n        ERC721BaseToken.__ERC721BaseToken_initialize(chainIndex);\\n        ERC2771Handler.__ERC2771Handler_initialize(trustedForwarder);\\n    }\\n\\n    ///////////////////////////////  Modifiers //////////////////////////////\\n\\n    modifier notToZero(address to) {\\n        require(to != address(0), \\\"DESTINATION_ZERO_ADDRESS\\\");\\n        _;\\n    }\\n\\n    modifier notToThis(address to) {\\n        require(to != address(this), \\\"DESTINATION_GAME_CONTRACT\\\");\\n        _;\\n    }\\n\\n    ///////////////////////////////  Functions //////////////////////////////\\n\\n    /// @notice Create a new GAME token.\\n    /// @param from The address of the one creating the game (may be different from msg.sender if metaTx).\\n    /// @param to The address who will be assigned ownership of this game.\\n    /// @param creation The struct containing ids & ammounts of assets to add to this game,\\n    /// along with the uri to set.\\n    /// @param editor The address to allow to edit (can also be set later).\\n    /// @param subId A random id created on the backend.\\n    /// @return id The id of the new GAME token (erc721).\\n    function createGame(\\n        address from,\\n        address to,\\n        GameData calldata creation,\\n        address editor,\\n        uint64 subId\\n    ) external override onlyMinter() notToZero(to) notToThis(to) returns (uint256 id) {\\n        require(creation.exactNumOfLandsRequired > 0, \\\"EXACT_NUM_OF_LANDS_REQUIRED_ZERO\\\");\\n        (uint256 gameId, uint256 strgId) = _mintGame(from, to, subId, 0, true);\\n\\n        if (editor != address(0)) {\\n            _setGameEditor(to, editor, true);\\n        }\\n        if (creation.assetIdsToAdd.length != 0) {\\n            _addAssets(from, strgId, creation.assetIdsToAdd, creation.assetAmountsToAdd);\\n        }\\n\\n        _metaData[strgId] = creation.uri;\\n        _exactNumOfLandsRequired[strgId] = creation.exactNumOfLandsRequired;\\n        emit GameTokenUpdated(0, gameId, creation);\\n        return gameId;\\n    }\\n\\n    /// @notice Update an existing GAME token.This actually burns old token\\n    /// and mints new token with same basId & incremented version.\\n    /// @param from The one updating the GAME token.\\n    /// @param gameId The current id of the GAME token.\\n    /// @param update The values to use for the update.\\n    /// @return The new gameId.\\n    function updateGame(\\n        address from,\\n        uint256 gameId,\\n        IGameToken.GameData memory update\\n    ) external override onlyMinter() returns (uint256) {\\n        require(update.exactNumOfLandsRequired > 0, \\\"EXACT_NUM_OF_LANDS_REQUIRED_ZERO\\\");\\n        uint256 id = _storageId(gameId);\\n        _addAssets(from, id, update.assetIdsToAdd, update.assetAmountsToAdd);\\n        _removeAssets(id, update.assetIdsToRemove, update.assetAmountsToRemove, _ownerOf(gameId));\\n        _metaData[id] = update.uri;\\n        _exactNumOfLandsRequired[id] = update.exactNumOfLandsRequired;\\n        uint256 newId = _bumpGameVersion(from, gameId);\\n        emit GameTokenUpdated(gameId, newId, update);\\n        return newId;\\n    }\\n\\n    /// @notice Allow token owner to set game editors.\\n    /// @param gameOwner The address of a GAME token creator.\\n    /// @param editor The address of the editor to set.\\n    /// @param isEditor Add or remove the ability to edit.\\n    function setGameEditor(\\n        address gameOwner,\\n        address editor,\\n        bool isEditor\\n    ) external override {\\n        require(_msgSender() == gameOwner, \\\"EDITOR_ACCESS_DENIED\\\");\\n        _setGameEditor(gameOwner, editor, isEditor);\\n    }\\n\\n    /// @notice Transfers creatorship of `original` from `sender` to `to`.\\n    /// @param gameId The current id of the GAME token.\\n    /// @param sender The address of current registered creator.\\n    /// @param to The address to transfer the creatorship to\\n    function transferCreatorship(\\n        uint256 gameId,\\n        address sender,\\n        address to\\n    ) external override notToZero(to) {\\n        require(_ownerOf(gameId) != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        uint256 id = _storageId(gameId);\\n        address msgSender = _msgSender();\\n        require(msgSender == sender || _superOperators[msgSender], \\\"TRANSFER_ACCESS_DENIED\\\");\\n        require(sender != address(0), \\\"NOT_FROM_ZEROADDRESS\\\");\\n        address originalCreator = address(uint160(id / CREATOR_OFFSET_MULTIPLIER));\\n        address current = creatorOf(gameId);\\n        require(current != to, \\\"CURRENT_=_TO\\\");\\n        require(current == sender, \\\"CURRENT_!=_SENDER\\\");\\n        _creatorship[id] = to;\\n        emit CreatorshipTransfer(originalCreator, current, to);\\n    }\\n\\n    /// @notice Burn a GAME token and recover assets.\\n    /// @param from The address of the one destroying the game.\\n    /// @param to The address to send all GAME assets to.\\n    /// @param gameId The id of the GAME to destroy.\\n    /// @param assetIds The assets to recover from the burnt GAME.\\n    function burnAndRecover(\\n        address from,\\n        address to,\\n        uint256 gameId,\\n        uint256[] calldata assetIds\\n    ) external override {\\n        _burnGame(from, gameId);\\n        _recoverAssets(from, to, gameId, assetIds);\\n    }\\n\\n    /// @notice Burn a GAME token.\\n    /// @param gameId The id of the GAME to destroy.\\n    function burn(uint256 gameId) external override(ERC721BaseToken, IGameToken) {\\n        _burnGame(_msgSender(), gameId);\\n    }\\n\\n    /// @notice Burn a GAME token on behalf of owner.\\n    /// @param from The address whose GAME is being burnt.\\n    /// @param gameId The id of the GAME to burn.\\n    function burnFrom(address from, uint256 gameId) external override(ERC721BaseToken, IGameToken) {\\n        require(from != address(0), \\\"NOT_FROM_ZEROADDRESS\\\");\\n        _burnGame(from, gameId);\\n    }\\n\\n    /// @notice Transfer assets from a burnt GAME.\\n    /// @param from Previous owner of the burnt game.\\n    /// @param to Address that will receive the assets.\\n    /// @param gameId Id of the burnt GAME token.\\n    /// @param assetIds The assets to recover from the burnt GAME.\\n    function recoverAssets(\\n        address from,\\n        address to,\\n        uint256 gameId,\\n        uint256[] memory assetIds\\n    ) public override {\\n        _recoverAssets(from, to, gameId, assetIds);\\n    }\\n\\n    /// @notice Get the amount of each assetId in a GAME.\\n    /// @param gameId The game to query.\\n    /// @param assetIds The assets to get balances for.\\n    function getAssetBalances(uint256 gameId, uint256[] calldata assetIds)\\n        external\\n        view\\n        override\\n        returns (uint256[] memory)\\n    {\\n        uint256 storageId = _storageId(gameId);\\n        require(_ownerOf(gameId) != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        uint256 length = assetIds.length;\\n        uint256[] memory assets;\\n        assets = new uint256[](length);\\n        for (uint256 i = 0; i < length; i++) {\\n            assets[i] = _gameAssets[storageId][assetIds[i]];\\n        }\\n        return assets;\\n    }\\n\\n    function getExactNumOfLandsRequired(uint256 gameId) external view override returns (uint256) {\\n        uint256 storageId = _storageId(gameId);\\n        return _exactNumOfLandsRequired[storageId];\\n    }\\n\\n    /// @notice Get game editor status.\\n    /// @param gameOwner The address of the owner of the GAME.\\n    /// @param editor The address of the editor to set.\\n    /// @return isEditor Editor status of editor for given tokenId.\\n    function isGameEditor(address gameOwner, address editor) external view override returns (bool isEditor) {\\n        return _gameEditors[gameOwner][editor];\\n    }\\n\\n    /// @notice Called by other contracts to check if this can receive erc1155 batch.\\n    /// @param operator The address of the operator in the current tx.\\n    /// @return the bytes4 value 0xbc197c81.\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address, /*from*/\\n        uint256[] calldata, /*ids*/\\n        uint256[] calldata, /*values*/\\n        bytes calldata /*data*/\\n    ) external view override returns (bytes4) {\\n        if (operator == address(this)) {\\n            return ERC1155_BATCH_RECEIVED;\\n        }\\n        revert(\\\"ERC1155_BATCH_REJECTED\\\");\\n    }\\n\\n    /// @notice Called by other contracts to check if this can receive erc1155 tokens.\\n    /// @param operator The address of the operator in the current tx.\\n    /// @return the bytes4 value 0xf23a6e61.\\n    function onERC1155Received(\\n        address operator,\\n        address, /*from*/\\n        uint256, /*id*/\\n        uint256, /*value*/\\n        bytes calldata /*data*/\\n    ) external view override returns (bytes4) {\\n        if (operator == address(this)) {\\n            return ERC1155_RECEIVED;\\n        }\\n        revert(\\\"ERC1155_REJECTED\\\");\\n    }\\n\\n    /// @notice Return the name of the token contract.\\n    /// @return The name of the token contract.\\n    function name() external pure override returns (string memory) {\\n        return \\\"The Sandbox: GAME token\\\";\\n    }\\n\\n    /// @notice Get the symbol of the token contract.\\n    /// @return the symbol of the token contract.\\n    function symbol() external pure override returns (string memory) {\\n        return \\\"GAME\\\";\\n    }\\n\\n    /// @notice Get the creator of the token type `id`.\\n    /// @param gameId The id of the token to get the creator of.\\n    /// @return the creator of the token type `id`.\\n    function creatorOf(uint256 gameId) public view override returns (address) {\\n        require(gameId != uint256(0), \\\"GAME_NEVER_MINTED\\\");\\n        uint256 id = _storageId(gameId);\\n        address originalCreator = address(uint160(id / CREATOR_OFFSET_MULTIPLIER));\\n        address newCreator = _creatorship[id];\\n        if (newCreator != address(0)) {\\n            return newCreator;\\n        }\\n        return originalCreator;\\n    }\\n\\n    /// @notice Return the URI of a specific token.\\n    /// @param gameId The id of the token.\\n    /// @return uri The URI of the token metadata.\\n    function tokenURI(uint256 gameId) public view override returns (string memory uri) {\\n        require(_ownerOf(gameId) != address(0), \\\"BURNED_OR_NEVER_MINTED\\\");\\n        uint256 id = _storageId(gameId);\\n        return _toFullURI(_metaData[id]);\\n    }\\n\\n    /// @notice Check if the contract supports an interface.\\n    /// 0x01ffc9a7 is ERC-165.\\n    /// 0x80ac58cd is ERC-721.\\n    /// @param id The id of the interface.\\n    /// @return if the interface is supported.\\n    function supportsInterface(bytes4 id) public pure override returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd || id == 0x5b5e139f;\\n    }\\n\\n    /// @notice Add assets to an existing GAME.\\n    /// @param from The address of the current owner of assets.\\n    /// @param strgId The storageId of the GAME to add assets to.\\n    /// @param assetIds The id of the asset to add to GAME.\\n    /// @param amounts The amount of each asset to add to GAME.\\n    function _addAssets(\\n        address from,\\n        uint256 strgId,\\n        uint256[] memory assetIds,\\n        uint256[] memory amounts\\n    ) internal {\\n        if (assetIds.length == 0) {\\n            return;\\n        }\\n        require(assetIds.length == amounts.length, \\\"INVALID_INPUT_LENGTHS\\\");\\n        uint256 currentValue;\\n        for (uint256 i = 0; i < assetIds.length; i++) {\\n            currentValue = _gameAssets[strgId][assetIds[i]];\\n            require(amounts[i] != 0, \\\"INVALID_ASSET_ADDITION\\\");\\n            _gameAssets[strgId][assetIds[i]] = currentValue + amounts[i];\\n        }\\n        if (assetIds.length == 1) {\\n            _asset.safeTransferFrom(from, address(this), assetIds[0], amounts[0], \\\"\\\");\\n        } else {\\n            _asset.safeBatchTransferFrom(from, address(this), assetIds, amounts, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Remove assets from a GAME.\\n    /// @param id The storageId of the GAME to remove assets from.\\n    /// @param assetIds An array of asset Ids to remove.\\n    /// @param values An array of the number of each asset id to remove.\\n    /// @param to The address to send removed assets to.\\n    function _removeAssets(\\n        uint256 id,\\n        uint256[] memory assetIds,\\n        uint256[] memory values,\\n        address to\\n    ) internal {\\n        if (assetIds.length == 0) {\\n            return;\\n        }\\n        require(assetIds.length == values.length && assetIds.length != 0, \\\"INVALID_INPUT_LENGTHS\\\");\\n        uint256 currentValue;\\n        for (uint256 i = 0; i < assetIds.length; i++) {\\n            currentValue = _gameAssets[id][assetIds[i]];\\n            require(currentValue != 0 && values[i] != 0 && values[i] <= currentValue, \\\"INVALID_ASSET_REMOVAL\\\");\\n            _gameAssets[id][assetIds[i]] = currentValue - values[i];\\n        }\\n\\n        if (assetIds.length == 1) {\\n            _asset.safeTransferFrom(address(this), to, assetIds[0], values[0], \\\"\\\");\\n        } else {\\n            _asset.safeBatchTransferFrom(address(this), to, assetIds, values, \\\"\\\");\\n        }\\n    }\\n\\n    /// @dev See burn / burnFrom.\\n    function _burnGame(address from, uint256 gameId) internal {\\n        uint256 storageId = _storageId(gameId);\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(storageId);\\n        address msgSender = _msgSender();\\n        require(\\n            msgSender == owner ||\\n                (operatorEnabled && _operators[storageId] == msgSender) ||\\n                _superOperators[msgSender] ||\\n                _operatorsForAll[from][msgSender],\\n            \\\"UNAUTHORIZED_BURN\\\"\\n        );\\n\\n        delete _metaData[storageId];\\n        delete _exactNumOfLandsRequired[storageId];\\n        _creatorship[gameId] = address(0);\\n        _burn(from, owner, gameId);\\n    }\\n\\n    /// @dev See recoverAssets.\\n    function _recoverAssets(\\n        address from,\\n        address to,\\n        uint256 gameId,\\n        uint256[] memory assetIds\\n    ) internal notToZero(to) notToThis(to) {\\n        require(_ownerOf(gameId) == address(0), \\\"ONLY_FROM_BURNED_TOKEN\\\");\\n        uint256 storageId = _storageId(gameId);\\n        require(from == _msgSender(), \\\"INVALID_RECOVERY\\\");\\n        _check_withdrawal_authorized(from, gameId);\\n        require(assetIds.length > 0, \\\"WITHDRAWAL_COMPLETE\\\");\\n        uint256[] memory values;\\n        values = new uint256[](assetIds.length);\\n        for (uint256 i = 0; i < assetIds.length; i++) {\\n            values[i] = _gameAssets[storageId][assetIds[i]];\\n            delete _gameAssets[storageId][assetIds[i]];\\n        }\\n        _asset.safeBatchTransferFrom(address(this), to, assetIds, values, \\\"\\\");\\n\\n        GameData memory recovery;\\n        recovery.assetIdsToRemove = assetIds;\\n        recovery.assetAmountsToRemove = values;\\n        emit GameTokenUpdated(gameId, 0, recovery);\\n    }\\n\\n    /// @dev Create a new gameId and associate it with an owner.\\n    /// @param from The address of one creating the game.\\n    /// @param to The address of the Game owner.\\n    /// @param subId The id to use when generating the new GameId.\\n    /// @param version The version number part of the gameId.\\n    /// @param isCreation Whether this is a brand new GAME (as opposed to an update).\\n    /// @return id The newly created gameId.\\n    function _mintGame(\\n        address from,\\n        address to,\\n        uint64 subId,\\n        uint16 version,\\n        bool isCreation\\n    ) internal returns (uint256 id, uint256 storageId) {\\n        uint16 idVersion;\\n        uint256 gameId;\\n        uint256 strgId;\\n        if (isCreation) {\\n            idVersion = 1;\\n            gameId = _generateTokenId(from, subId, _chainIndex, idVersion);\\n            strgId = _storageId(gameId);\\n            require(_owners[strgId] == 0, \\\"STORAGE_ID_REUSE_FORBIDDEN\\\");\\n        } else {\\n            idVersion = version;\\n            gameId = _generateTokenId(from, subId, _chainIndex, idVersion);\\n            strgId = _storageId(gameId);\\n        }\\n\\n        _owners[strgId] = (uint256(idVersion) << 200) + uint256(uint160(to));\\n        _numNFTPerAddress[to]++;\\n        emit Transfer(address(0), to, gameId);\\n        return (gameId, strgId);\\n    }\\n\\n    /// @dev Allow token owner to set game editors.\\n    /// @param gameCreator The address of a GAME creator,\\n    /// @param editor The address of the editor to set.\\n    /// @param isEditor Add or remove the ability to edit.\\n    function _setGameEditor(\\n        address gameCreator,\\n        address editor,\\n        bool isEditor\\n    ) internal {\\n        emit GameEditorSet(gameCreator, editor, isEditor);\\n        _gameEditors[gameCreator][editor] = isEditor;\\n    }\\n\\n    /// @dev Bumps the version number of a game token, buring the previous\\n    /// version and minting a new one.\\n    /// @param from The address of the GAME token owner.\\n    /// @param gameId The Game token to bump the version of.\\n    /// @return The new gameId.\\n    function _bumpGameVersion(address from, uint256 gameId) internal returns (uint256) {\\n        address originalCreator = address(uint160(gameId / CREATOR_OFFSET_MULTIPLIER));\\n        uint64 subId = uint64(gameId / SUBID_MULTIPLIER);\\n        uint16 version = uint16(gameId);\\n        version++;\\n        address owner = _ownerOf(gameId);\\n        if (from == owner) {\\n            // caller is owner or metaTx on owner's behalf\\n            _burn(from, owner, gameId);\\n        } else if (_gameEditors[owner][from]) {\\n            // caller is editor or metaTx on editor's behalf, so we need to pass owner\\n            // instead of from or _burn will fail\\n            _burn(owner, owner, gameId);\\n        }\\n        (uint256 newId, ) = _mintGame(originalCreator, owner, subId, version, false);\\n        address newOwner = _ownerOf(newId);\\n        assert(owner == newOwner);\\n        return newId;\\n    }\\n\\n    /// @dev Get the a full URI string for a given hash + gameId.\\n    /// @param hash The 32 byte IPFS hash.\\n    /// @return The URI string.\\n    function _toFullURI(bytes32 hash) internal pure override returns (string memory) {\\n        return string(abi.encodePacked(\\\"ipfs://bafybei\\\", hash2base32(hash), \\\"/\\\", \\\"game.json\\\"));\\n    }\\n}\\n\",\"keccak256\":\"0x0091eaeb111847035947eee09004e04439155a727b5690cf68bab462ede5b192\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC2771Handler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/// @dev minimal ERC2771 handler to keep bytecode-size down.\\n/// based on: https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/metatx/ERC2771Context.sol\\n\\ncontract ERC2771Handler {\\n    address internal _trustedForwarder;\\n\\n    function __ERC2771Handler_initialize(address forwarder) internal {\\n        _trustedForwarder = forwarder;\\n    }\\n\\n    function isTrustedForwarder(address forwarder) public view returns (bool) {\\n        return forwarder == _trustedForwarder;\\n    }\\n\\n    function getTrustedForwarder() external view returns (address trustedForwarder) {\\n        return _trustedForwarder;\\n    }\\n\\n    function _msgSender() internal view virtual returns (address sender) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            // The assembly code is more direct than the Solidity version using `abi.decode`.\\n            // solhint-disable-next-line no-inline-assembly\\n            assembly {\\n                sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n            }\\n        } else {\\n            return msg.sender;\\n        }\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        if (isTrustedForwarder(msg.sender)) {\\n            return msg.data[:msg.data.length - 20];\\n        } else {\\n            return msg.data;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b78a86fc419fc78e618cb6c7892c2c66c4d4a9cac7848d33d91d68aab755caa\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ERC721BaseToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n/* solhint-disable func-order, code-complexity */\\npragma solidity 0.8.2;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"./WithSuperOperators.sol\\\";\\nimport \\\"../interfaces/IERC721MandatoryTokenReceiver.sol\\\";\\nimport \\\"./ERC2771Handler.sol\\\";\\n\\ncontract ERC721BaseToken is IERC721Upgradeable, WithSuperOperators, ERC2771Handler {\\n    using AddressUpgradeable for address;\\n\\n    bytes4 internal constant _ERC721_RECEIVED = 0x150b7a02;\\n    bytes4 internal constant _ERC721_BATCH_RECEIVED = 0x4b808c46;\\n\\n    bytes4 internal constant ERC165ID = 0x01ffc9a7;\\n    bytes4 internal constant ERC721_MANDATORY_RECEIVER = 0x5e8bf644;\\n\\n    uint256 internal constant NOT_ADDRESS = 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000;\\n    uint256 internal constant OPERATOR_FLAG = (2**255);\\n    uint256 internal constant NOT_OPERATOR_FLAG = OPERATOR_FLAG - 1;\\n    uint256 internal constant BURNED_FLAG = (2**160);\\n\\n    mapping(address => uint256) internal _numNFTPerAddress;\\n    mapping(uint256 => uint256) internal _owners;\\n    mapping(address => mapping(address => bool)) internal _operatorsForAll;\\n    mapping(uint256 => address) internal _operators;\\n    uint8 internal _chainIndex;\\n\\n    function __ERC721BaseToken_initialize(uint8 chainIndex) internal {\\n        _chainIndex = chainIndex;\\n    }\\n\\n    /// @notice Approve an operator to spend tokens on the senders behalf.\\n    /// @param operator The address receiving the approval.\\n    /// @param id The id of the token.\\n    function approve(address operator, uint256 id) external override {\\n        uint256 ownerData = _owners[_storageId(id)];\\n        address owner = _ownerOf(id);\\n        address msgSender = _msgSender();\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(\\n            owner == msgSender || _superOperators[msgSender] || _operatorsForAll[owner][msgSender],\\n            \\\"UNAUTHORIZED_APPROVAL\\\"\\n        );\\n        _approveFor(ownerData, operator, id);\\n    }\\n\\n    /// @notice Approve an operator to spend tokens on the sender behalf.\\n    /// @param sender The address giving the approval.\\n    /// @param operator The address receiving the approval.\\n    /// @param id The id of the token.\\n    function approveFor(\\n        address sender,\\n        address operator,\\n        uint256 id\\n    ) external {\\n        uint256 ownerData = _owners[_storageId(id)];\\n        address msgSender = _msgSender();\\n        require(sender != address(0), \\\"ZERO_ADDRESS_SENDER\\\");\\n        require(\\n            msgSender == sender || _superOperators[msgSender] || _operatorsForAll[sender][msgSender],\\n            \\\"UNAUTHORIZED_APPROVAL\\\"\\n        );\\n        require(address(uint160(ownerData)) == sender, \\\"OWNER_NOT_SENDER\\\");\\n        _approveFor(ownerData, operator, id);\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external override {\\n        _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract() && _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER)) {\\n            require(_checkOnERC721Received(_msgSender(), from, to, id, \\\"\\\"), \\\"ERC721_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver know of the transfer.\\n    /// @param from The send of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external override {\\n        safeTransferFrom(from, to, id, \\\"\\\");\\n    }\\n\\n    /// @notice Transfer many tokens between 2 addresses.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external {\\n        _batchTransferFrom(from, to, ids, data, false);\\n    }\\n\\n    /// @notice Transfer many tokens between 2 addresses, while\\n    /// ensuring the receiving contract has a receiver method.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param ids The ids of the tokens.\\n    /// @param data Additional data.\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external {\\n        _batchTransferFrom(from, to, ids, data, true);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param sender The address giving the approval.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAllFor(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) external {\\n        require(sender != address(0), \\\"Invalid sender address\\\");\\n        address msgSender = _msgSender();\\n        require(msgSender == sender || _superOperators[msgSender], \\\"UNAUTHORIZED_APPROVE_FOR_ALL\\\");\\n\\n        _setApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Set the approval for an operator to manage all the tokens of the sender.\\n    /// @param operator The address receiving the approval.\\n    /// @param approved The determination of the approval.\\n    function setApprovalForAll(address operator, bool approved) external override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /// @notice Burns token `id`.\\n    /// @param id The token which will be burnt.\\n    function burn(uint256 id) external virtual {\\n        _burn(_msgSender(), _ownerOf(id), id);\\n    }\\n\\n    /// @notice Burn token`id` from `from`.\\n    /// @param from address whose token is to be burnt.\\n    /// @param id The token which will be burnt.\\n    function burnFrom(address from, uint256 id) external virtual {\\n        require(from != address(0), \\\"NOT_FROM_ZEROADDRESS\\\");\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        address msgSender = _msgSender();\\n        require(\\n            msgSender == from ||\\n                (operatorEnabled && _operators[id] == msgSender) ||\\n                _superOperators[msgSender] ||\\n                _operatorsForAll[from][msgSender],\\n            \\\"UNAUTHORIZED_BURN\\\"\\n        );\\n        _burn(from, owner, id);\\n    }\\n\\n    /// @notice Get the number of tokens owned by an address.\\n    /// @param owner The address to look for.\\n    /// @return The number of tokens owned by the address.\\n    function balanceOf(address owner) external view override returns (uint256) {\\n        require(owner != address(0), \\\"ZERO_ADDRESS_OWNER\\\");\\n        return _numNFTPerAddress[owner];\\n    }\\n\\n    /// @notice Get the owner of a token.\\n    /// @param id The id of the token.\\n    /// @return owner The address of the token owner.\\n    function ownerOf(uint256 id) external view override returns (address owner) {\\n        owner = _ownerOf(id);\\n        require(owner != address(0), \\\"NONEXISTANT_TOKEN\\\");\\n    }\\n\\n    /// @notice Get the approved operator for a specific token.\\n    /// @param id The id of the token.\\n    /// @return The address of the operator.\\n    function getApproved(uint256 id) external view override returns (address) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        if (operatorEnabled) {\\n            return _operators[id];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Check if the sender approved the operator.\\n    /// @param owner The address of the owner.\\n    /// @param operator The address of the operator.\\n    /// @return isOperator The status of the approval.\\n    function isApprovedForAll(address owner, address operator) external view override returns (bool isOperator) {\\n        return _operatorsForAll[owner][operator] || _superOperators[operator];\\n    }\\n\\n    /// @notice Transfer a token between 2 addresses letting the receiver knows of the transfer.\\n    /// @param from The sender of the token.\\n    /// @param to The recipient of the token.\\n    /// @param id The id of the token.\\n    /// @param data Additional data.\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        bytes memory data\\n    ) public override {\\n        _checkTransfer(from, to, id);\\n        _transferFrom(from, to, id);\\n        if (to.isContract()) {\\n            require(_checkOnERC721Received(_msgSender(), from, to, id, data), \\\"ERC721_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @notice Check if the contract supports an interface.\\n    /// 0x01ffc9a7 is ERC-165.\\n    /// 0x80ac58cd is ERC-721\\n    /// @param id The id of the interface.\\n    /// @return Whether the interface is supported.\\n    function supportsInterface(bytes4 id) public pure virtual override returns (bool) {\\n        return id == 0x01ffc9a7 || id == 0x80ac58cd;\\n    }\\n\\n    function isBurned(uint256 estateId) public view returns (bool) {\\n        uint256 storageId = _storageId(estateId);\\n        return (_owners[storageId] & BURNED_FLAG) == BURNED_FLAG;\\n    }\\n\\n    /// @dev By overriding this function in an implementation which inherits this contract, you can enable versioned tokenIds without the extra overhead of writing to a new storage slot in _owners each time a version is incremented. See GameToken._storageId() for an example, where the storageId is the tokenId minus the version number.\\n    /// !!! Caution !!! Overriding this function without taking appropriate care could lead to\\n    /// ownerOf() returning an owner for non-existent tokens. Tests should be written to\\n    /// guard against introducing this bug.\\n    /// @param id The id of a token.\\n    /// @return The id used for storage mappings.\\n    function _storageId(uint256 id) internal view virtual returns (uint256) {\\n        return id;\\n    }\\n\\n    function _updateOwnerData(\\n        uint256 id,\\n        uint256 oldData,\\n        address newOwner,\\n        bool hasOperator\\n    ) internal virtual {\\n        if (hasOperator) {\\n            _owners[_storageId(id)] = (oldData & NOT_ADDRESS) | OPERATOR_FLAG | uint256(uint160(newOwner));\\n        } else {\\n            _owners[_storageId(id)] = ((oldData & NOT_ADDRESS) & NOT_OPERATOR_FLAG) | uint256(uint160(newOwner));\\n        }\\n    }\\n\\n    function _transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal {\\n        _numNFTPerAddress[from]--;\\n        _numNFTPerAddress[to]++;\\n        _updateOwnerData(id, _owners[_storageId(id)], to, false);\\n        emit Transfer(from, to, id);\\n    }\\n\\n    /// @dev See approveFor.\\n    function _approveFor(\\n        uint256 ownerData,\\n        address operator,\\n        uint256 id\\n    ) internal {\\n        address owner = _ownerOf(id);\\n        if (operator == address(0)) {\\n            _updateOwnerData(id, ownerData, owner, false);\\n        } else {\\n            _updateOwnerData(id, ownerData, owner, true);\\n            _operators[id] = operator;\\n        }\\n        emit Approval(owner, operator, id);\\n    }\\n\\n    /// @dev See batchTransferFrom.\\n    function _batchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory data,\\n        bool safe\\n    ) internal {\\n        address msgSender = _msgSender();\\n        bool authorized = msgSender == from || _superOperators[msgSender] || _operatorsForAll[from][msgSender];\\n\\n        require(from != address(0), \\\"NOT_FROM_ZEROADDRESS\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n\\n        uint256 numTokens = ids.length;\\n        for (uint256 i = 0; i < ids.length; i++) {\\n            uint256 id = ids[i];\\n            if (id == 0) {\\n                numTokens--;\\n                continue;\\n            }\\n            (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n            require(owner == from, \\\"BATCHTRANSFERFROM_NOT_OWNER\\\");\\n            require(authorized || (operatorEnabled && _operators[id] == msgSender), \\\"NOT_AUTHORIZED\\\");\\n            _updateOwnerData(id, _owners[_storageId(id)], to, false);\\n            emit Transfer(from, to, id);\\n        }\\n        if (from != to) {\\n            _numNFTPerAddress[from] -= numTokens;\\n            _numNFTPerAddress[to] += numTokens;\\n        }\\n        if (to.isContract() && (safe || _checkInterfaceWith10000Gas(to, ERC721_MANDATORY_RECEIVER))) {\\n            require(_checkOnERC721BatchReceived(msgSender, from, to, ids, data), \\\"ERC721_BATCH_TRANSFER_REJECTED\\\");\\n        }\\n    }\\n\\n    /// @dev See setApprovalForAll.\\n    function _setApprovalForAll(\\n        address sender,\\n        address operator,\\n        bool approved\\n    ) internal {\\n        require(!_superOperators[operator], \\\"INVALID_APPROVAL_CHANGE\\\");\\n        _operatorsForAll[sender][operator] = approved;\\n\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @dev See burn.\\n    function _burn(\\n        address from,\\n        address owner,\\n        uint256 id\\n    ) internal {\\n        require(from == owner, \\\"NOT_OWNER\\\");\\n        uint256 storageId = _storageId(id);\\n        _owners[storageId] = (_owners[storageId] & NOT_OPERATOR_FLAG) | BURNED_FLAG; // record as non owner but keep track of last owner\\n        _numNFTPerAddress[from]--;\\n        emit Transfer(from, address(0), id);\\n    }\\n\\n    /// @dev Check if receiving contract accepts erc721 transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The adddress we want to transfer to.\\n    /// @param tokenId The id of the token we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    /// @return Whether the expected value of 0x150b7a02 is returned.\\n    function _checkOnERC721Received(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = IERC721ReceiverUpgradeable(to).onERC721Received(operator, from, tokenId, _data);\\n        return (retval == _ERC721_RECEIVED);\\n    }\\n\\n    /// @dev Check if receiving contract accepts erc721 batch transfers.\\n    /// @param operator The address of the operator.\\n    /// @param from The from address, may be different from msg.sender.\\n    /// @param to The adddress we want to transfer to.\\n    /// @param ids The ids of the tokens we would like to transfer.\\n    /// @param _data Any additional data to send with the transfer.\\n    /// @return Whether the expected value of 0x4b808c46 is returned.\\n    function _checkOnERC721BatchReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        bytes memory _data\\n    ) internal returns (bool) {\\n        bytes4 retval = IERC721MandatoryTokenReceiver(to).onERC721BatchReceived(operator, from, ids, _data);\\n        return (retval == _ERC721_BATCH_RECEIVED);\\n    }\\n\\n    /// @dev See ownerOf\\n    function _ownerOf(uint256 id) internal view virtual returns (address) {\\n        uint256 data = _owners[_storageId(id)];\\n        if ((data & BURNED_FLAG) == BURNED_FLAG) {\\n            return address(0);\\n        }\\n        return address(uint160(data));\\n    }\\n\\n    /// @dev Get the owner and operatorEnabled status of a token.\\n    /// @param id The token to query.\\n    /// @return owner The owner of the token.\\n    /// @return operatorEnabled Whether or not operators are enabled for this token.\\n    function _ownerAndOperatorEnabledOf(uint256 id)\\n        internal\\n        view\\n        virtual\\n        returns (address owner, bool operatorEnabled)\\n    {\\n        uint256 data = _owners[_storageId(id)];\\n        if ((data & BURNED_FLAG) == BURNED_FLAG) {\\n            owner = address(0);\\n        } else {\\n            owner = address(uint160(data));\\n        }\\n        operatorEnabled = (data & OPERATOR_FLAG) == OPERATOR_FLAG;\\n    }\\n\\n    /// @dev Check whether a transfer is a meta Transaction or not.\\n    /// @param from The address who initiated the transfer (may differ from msg.sender).\\n    /// @param to The address recieving the token.\\n    /// @param id The token being transferred.\\n    /// @return isMetaTx Whether or not the transaction is a MetaTx.\\n    function _checkTransfer(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) internal view returns (bool isMetaTx) {\\n        (address owner, bool operatorEnabled) = _ownerAndOperatorEnabledOf(id);\\n        address msgSender = _msgSender();\\n        require(owner != address(0), \\\"NONEXISTENT_TOKEN\\\");\\n        require(owner == from, \\\"CHECKTRANSFER_NOT_OWNER\\\");\\n        require(to != address(0), \\\"NOT_TO_ZEROADDRESS\\\");\\n        require(\\n            msgSender == owner ||\\n                _superOperators[msgSender] ||\\n                _operatorsForAll[from][msgSender] ||\\n                (operatorEnabled && _operators[id] == msgSender),\\n            \\\"UNAUTHORIZED_TRANSFER\\\"\\n        );\\n        return true;\\n    }\\n\\n    /// @dev Check if there was enough gas.\\n    /// @param _contract The address of the contract to check.\\n    /// @param interfaceId The id of the interface we want to test.\\n    /// @return Whether or not this check succeeded.\\n    function _checkInterfaceWith10000Gas(address _contract, bytes4 interfaceId) internal view returns (bool) {\\n        bool success;\\n        bool result;\\n        bytes memory callData = abi.encodeWithSelector(ERC165ID, interfaceId);\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            let call_ptr := add(0x20, callData)\\n            let call_size := mload(callData)\\n            let output := mload(0x40) // Find empty storage location using \\\"free memory pointer\\\"\\n            mstore(output, 0x0)\\n            success := staticcall(10000, _contract, call_ptr, call_size, output, 0x20) // 32 bytes\\n            result := mload(output)\\n        }\\n        // (10000 / 63) \\\"not enough for supportsInterface(...)\\\" // consume all gas, so caller can potentially know that there was not enough gas\\n        assert(gasleft() > 158);\\n        return success && result;\\n    }\\n}\\n\",\"keccak256\":\"0x97ed60ed2a69e25bdbf833cef61761a4a7fbf73e126647ce29ebaba23fdd89bf\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/ImmutableERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../BaseWithStorage/ERC721BaseToken.sol\\\";\\n\\ncontract ImmutableERC721 is ERC721BaseToken {\\n    uint256 internal constant CREATOR_OFFSET_MULTIPLIER = uint256(2)**(256 - 160);\\n    uint256 internal constant SUBID_MULTIPLIER = uint256(2)**(256 - 224);\\n    uint256 internal constant CHAIN_INDEX_OFFSET_MULTIPLIER = uint256(2)**(256 - 160 - 64 - 16);\\n    uint256 internal constant STORAGE_ID_MASK = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000;\\n    uint256 internal constant VERSION_MASK = 0x000000FFFFFFFF00000000000000000000000000000000000000000000000000;\\n\\n    bytes32 internal constant base32Alphabet = 0x6162636465666768696A6B6C6D6E6F707172737475767778797A323334353637;\\n\\n    /// @dev An implementation which handles versioned tokenIds.\\n    /// @param id The tokenId to get the owner of.\\n    /// @return The address of the owner.\\n    function _ownerOf(uint256 id) internal view virtual override returns (address) {\\n        uint256 packedData = _owners[_storageId(id)];\\n        uint16 idVersion = uint16(id);\\n        uint16 storageVersion = uint16((packedData & VERSION_MASK) >> 200);\\n\\n        if (((packedData & BURNED_FLAG) == BURNED_FLAG) || idVersion != storageVersion) {\\n            return address(0); //should be here\\n        }\\n\\n        return address(uint160(packedData));\\n    }\\n\\n    /// @dev Check if a withdrawal is allowed.\\n    /// @param from The address requesting the withdrawal.\\n    /// @param tokenId The id of the token to withdraw assets from.\\n    function _check_withdrawal_authorized(address from, uint256 tokenId) internal view virtual {\\n        require(from != address(uint160(0)), \\\"SENDER_ZERO_ADDRESS\\\");\\n        require(from == _withdrawalOwnerOf(tokenId), \\\"LAST_OWNER_NOT_EQUAL_SENDER\\\");\\n    }\\n\\n    /// @dev Get the address allowed to withdraw associated tokens from the parent token.\\n    /// If too many associated tokens in TOKEN, block.gaslimit won't allow detroy and withdraw in 1 tx.\\n    /// An owner may destroy their token, then withdraw associated tokens in a later tx (even\\n    /// though ownerOf(id) would be address(0) after burning.)\\n    /// @param id The id of the token to query.\\n    /// @return the address of the owner before burning.\\n    function _withdrawalOwnerOf(uint256 id) internal view virtual returns (address) {\\n        uint256 packedData = _owners[_storageId(id)];\\n        return address(uint160(packedData));\\n    }\\n\\n    /// @notice Get the storageID (no chainIndex or version data), which is constant for a given token.\\n    /// @param tokenId The tokenId for which to find the first token Id.\\n    /// @return The storage id for this token.\\n    function getStorageId(uint256 tokenId) external pure virtual returns (uint256) {\\n        return _storageId(tokenId);\\n    }\\n\\n    /// @dev Get the storageId (full id without the version number) from the full tokenId.\\n    /// @param id The full tokenId for the GAME token.\\n    /// @return The storageId.\\n    function _storageId(uint256 id) internal pure virtual override returns (uint256) {\\n        return uint256(id & STORAGE_ID_MASK);\\n    }\\n\\n    /// @dev Get the a full URI string for a given hash + gameId.\\n    /// @param hash The 32 byte IPFS hash.\\n    /// @return The URI string.\\n    function _toFullURI(bytes32 hash) internal pure virtual returns (string memory) {\\n        return string(abi.encodePacked(\\\"ipfs://bafybei\\\", hash2base32(hash), \\\"/\\\", \\\"token.json\\\"));\\n    }\\n\\n    /// @dev Create a new tokenId and associate it with an owner.\\n    /// This is a packed id, consisting of 4 parts:\\n    /// the creator's address, a uint64 subId, a uint18 chainIndex and a uint16 version.\\n    /// @param creator The address of the Token creator.\\n    /// @param subId The id used to generate the id.\\n    /// @param version The publicversion used to generate the id.\\n    function _generateTokenId(\\n        address creator,\\n        uint64 subId,\\n        uint8 chainIndex,\\n        uint16 version\\n    ) internal pure returns (uint256) {\\n        return\\n            uint256(uint160(creator)) *\\n            CREATOR_OFFSET_MULTIPLIER +\\n            uint64(subId) *\\n            SUBID_MULTIPLIER +\\n            chainIndex *\\n            CHAIN_INDEX_OFFSET_MULTIPLIER +\\n            uint16(version);\\n    }\\n\\n    /// @dev Convert a 32 byte hash to a base 32 string.\\n    /// @param hash A 32 byte (IPFS) hash.\\n    /// @return _uintAsString The hash as a base 32 string.\\n    // solhint-disable-next-line security/no-assign-params\\n    function hash2base32(bytes32 hash) internal pure returns (string memory _uintAsString) {\\n        uint256 _i = uint256(hash);\\n        uint256 k = 52;\\n        bytes memory bstr = new bytes(k);\\n        bstr[--k] = base32Alphabet[uint8((_i % 8) << 2)]; // uint8 s = uint8((256 - skip) % 5);  // (_i % (2**s)) << (5-s)\\n        _i /= 8;\\n        while (k > 0) {\\n            bstr[--k] = base32Alphabet[_i % 32];\\n            _i /= 32;\\n        }\\n        return string(bstr);\\n    }\\n}\\n\",\"keccak256\":\"0x6d94104194529bc414a00e952a32aa90e9c8b82ac3cedfb72b173e4a1826bb8e\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithAdmin.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ncontract WithAdmin {\\n    address internal _admin;\\n\\n    /// @dev Emits when the contract administrator is changed.\\n    /// @param oldAdmin The address of the previous administrator.\\n    /// @param newAdmin The address of the new administrator.\\n    event AdminChanged(address oldAdmin, address newAdmin);\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == _admin, \\\"ADMIN_ONLY\\\");\\n        _;\\n    }\\n\\n    /// @dev Get the current administrator of this contract.\\n    /// @return The current administrator of this contract.\\n    function getAdmin() external view returns (address) {\\n        return _admin;\\n    }\\n\\n    /// @dev Change the administrator to be `newAdmin`.\\n    /// @param newAdmin The address of the new administrator.\\n    function changeAdmin(address newAdmin) external {\\n        require(msg.sender == _admin, \\\"ADMIN_ACCESS_DENIED\\\");\\n        emit AdminChanged(_admin, newAdmin);\\n        _admin = newAdmin;\\n    }\\n}\\n\",\"keccak256\":\"0xf2ce40f1b23052a50a5b2d5ad61fbc04ab6c9fb2e5b1dba17ccddf4507e4649f\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithMinter.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"./WithAdmin.sol\\\";\\n\\ncontract WithMinter is WithAdmin {\\n    address internal _minter;\\n\\n    /// @dev Emits when the Minter address is changed\\n    /// @param oldMinter The previous Minter address\\n    /// @param newMinter The new Minter address\\n    event MinterChanged(address oldMinter, address newMinter);\\n\\n    modifier onlyMinter() {\\n        require(msg.sender == _minter, \\\"MINTER_ACCESS_DENIED\\\");\\n        _;\\n    }\\n\\n    /// @dev Get the current minter of this contract.\\n    /// @return The current minter of this contract.\\n    function getMinter() external view returns (address) {\\n        return _minter;\\n    }\\n\\n    /// @dev Change the minter to be `newMinter`.\\n    /// @param newMinter The address of the new minter.\\n    function changeMinter(address newMinter) external onlyAdmin() {\\n        emit MinterChanged(_minter, newMinter);\\n        _minter = newMinter;\\n    }\\n}\\n\",\"keccak256\":\"0xf9b764b1596ab97154b71ca8b57980695a9787f5f9f7f970976193065bde2206\",\"license\":\"MIT\"},\"src/solc_0.8/common/BaseWithStorage/WithSuperOperators.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\nimport \\\"./WithAdmin.sol\\\";\\n\\ncontract WithSuperOperators is WithAdmin {\\n    mapping(address => bool) internal _superOperators;\\n\\n    event SuperOperator(address superOperator, bool enabled);\\n\\n    /// @notice Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights).\\n    /// @param superOperator address that will be given/removed superOperator right.\\n    /// @param enabled set whether the superOperator is enabled or disabled.\\n    function setSuperOperator(address superOperator, bool enabled) external {\\n        require(msg.sender == _admin, \\\"only admin is allowed to add super operators\\\");\\n        _superOperators[superOperator] = enabled;\\n        emit SuperOperator(superOperator, enabled);\\n    }\\n\\n    /// @notice check whether address `who` is given superOperator rights.\\n    /// @param who The address to query.\\n    /// @return whether the address has superOperator rights.\\n    function isSuperOperator(address who) public view returns (bool) {\\n        return _superOperators[who];\\n    }\\n}\\n\",\"keccak256\":\"0xa0d9b0e08ccae5e6b1f56e41ef750a68686d8958bc398369ac283aa4440f87ab\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IAssetToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\ninterface IAssetToken {\\n    function mint(\\n        address creator,\\n        uint40 packId,\\n        bytes32 hash,\\n        uint256 supply,\\n        uint8 rarity,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256 id);\\n\\n    function mintMultiple(\\n        address creator,\\n        uint40 packId,\\n        bytes32 hash,\\n        uint256[] calldata supplies,\\n        bytes calldata rarityPack,\\n        address owner,\\n        bytes calldata data\\n    ) external returns (uint256[] memory ids);\\n\\n    // fails on non-NFT or nft who do not have collection (was a mistake)\\n    function collectionOf(uint256 id) external view returns (uint256);\\n\\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\\n\\n    // return true for Non-NFT ERC1155 tokens which exists\\n    function isCollection(uint256 id) external view returns (bool);\\n\\n    function collectionIndexOf(uint256 id) external view returns (uint256);\\n\\n    function extractERC721From(\\n        address sender,\\n        uint256 id,\\n        address to\\n    ) external returns (uint256 newId);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id\\n    ) external;\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external;\\n\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n\\n    function isSuperOperator(address who) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xb031abbf5d18794cc8f466bda0d029f61d507ac08be2a14aa57a704e3c7d6563\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IERC721MandatoryTokenReceiver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5e8bf644.\\ninterface IERC721MandatoryTokenReceiver {\\n    function onERC721BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x4b808c46\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4); // needs to return 0x150b7a02\\n\\n    // needs to implements EIP-165\\n    // function supportsInterface(bytes4 interfaceId)\\n    //     external\\n    //     view\\n    //     returns (bool);\\n}\\n\",\"keccak256\":\"0xb2a8c2fcf496f383bedc0f2925fb9ff51e7a725828fcc73a22fd24f66c57c857\",\"license\":\"MIT\"},\"src/solc_0.8/common/interfaces/IGameToken.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n// solhint-disable-next-line compiler-version\\npragma solidity 0.8.2;\\n\\n/// @title Interface for the Game token\\n\\ninterface IGameToken {\\n    struct GameData {\\n        uint256[] assetIdsToRemove;\\n        uint256[] assetAmountsToRemove;\\n        uint256[] assetIdsToAdd;\\n        uint256[] assetAmountsToAdd;\\n        bytes32 uri; // ipfs hash (without the prefix, assume cidv1 folder)\\n        uint256 exactNumOfLandsRequired;\\n    }\\n\\n    function createGame(\\n        address from,\\n        address to,\\n        GameData calldata creation,\\n        address editor,\\n        uint64 subId\\n    ) external returns (uint256 id);\\n\\n    function burn(uint256 gameId) external;\\n\\n    function burnFrom(address from, uint256 gameId) external;\\n\\n    function recoverAssets(\\n        address from,\\n        address to,\\n        uint256 gameId,\\n        uint256[] calldata assetIds\\n    ) external;\\n\\n    function burnAndRecover(\\n        address from,\\n        address to,\\n        uint256 gameId,\\n        uint256[] calldata assetIds\\n    ) external;\\n\\n    function updateGame(\\n        address from,\\n        uint256 gameId,\\n        GameData calldata update\\n    ) external returns (uint256);\\n\\n    function getAssetBalances(uint256 gameId, uint256[] calldata assetIds) external view returns (uint256[] calldata);\\n\\n    function getExactNumOfLandsRequired(uint256 gameId) external view returns (uint256);\\n\\n    function setGameEditor(\\n        address gameCreator,\\n        address editor,\\n        bool isEditor\\n    ) external;\\n\\n    function isGameEditor(address gameOwner, address editor) external view returns (bool isEditor);\\n\\n    function creatorOf(uint256 id) external view returns (address);\\n\\n    function transferCreatorship(\\n        uint256 gameId,\\n        address sender,\\n        address to\\n    ) external;\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function tokenURI(uint256 gameId) external returns (string memory uri);\\n\\n    function onERC1155Received(\\n        address operator,\\n        address, /*from*/\\n        uint256, /*id*/\\n        uint256, /*value*/\\n        bytes calldata /*data*/\\n    ) external view returns (bytes4);\\n\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address, /*from*/\\n        uint256[] calldata, /*ids*/\\n        uint256[] calldata, /*values*/\\n        bytes calldata /*data*/\\n    ) external view returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd34d80865a5d3eaa47108b91ce04f9cd67b528eb7ac4d48a3f72b0f278a325d8\",\"license\":\"MIT\"},\"src/solc_0.8/polygon/child/ChildGameTokenV1.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.2;\\n\\nimport \\\"../../Game/GameBaseToken.sol\\\";\\n\\n// solhint-disable-next-line no-empty-blocks\\ncontract ChildGameTokenV1 is GameBaseToken {\\n\\n}\\n\",\"keccak256\":\"0x36fe0bb7ab32cbe5cf7a5847278d25aa85c4f6129256c077b153a34f71116f43\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614eae806100206000396000f3fe608060405234801561001057600080fd5b50600436106102de5760003560e01c806370a0823111610186578063ac9fe421116100e3578063ce1b815f11610097578063eeb5a5d111610071578063eeb5a5d1146106d1578063f23a6e61146106e4578063f3667517146106f7576102de565b8063ce1b815f1461067d578063db44fe071461068e578063e985e9c5146106be576102de565b8063b88d4fde116100c8578063b88d4fde1461062b578063bc197c811461063e578063c87b56dd1461066a576102de565b8063ac9fe42114610605578063b78608bf14610618576102de565b80639be8e39b1161013a578063a22cb4651161011f578063a22cb465146105a3578063a313a464146105b6578063a776b882146105c9576102de565b80639be8e39b1461057d5780639d76581314610590576102de565b806379cc67901161016b57806379cc67901461051e5780638f2839701461053157806395d89b4114610544576102de565b806370a08231146104f8578063780edf6e1461050b576102de565b80632b9917461161023f5780634a847e89116101f35780636352211e116101cd5780636352211e146104a8578063654b748a146104bb5780636e9960c3146104e7576102de565b80634a847e8914610453578063572b6c0514610473578063589a174314610495576102de565b806342842e0e1161022457806342842e0e1461041a57806342966c681461042d578063479315ef14610440576102de565b80632b991746146103f45780632c4d4d1814610407576102de565b806315ddc5351161029657806323b872dd1161027b57806323b872dd146103a757806324d9a744146103ba57806328cfbd46146103e1576102de565b806315ddc5351461038157806321ab0c7114610394576102de565b806306fdde03116102c757806306fdde031461032c578063081812fc14610341578063095ea7b31461036c576102de565b806301ffc9a7146102e357806303e97cb21461030b575b600080fd5b6102f66102f13660046146cf565b61070e565b60405190151581526020015b60405180910390f35b61031e6103193660046145c9565b6107ad565b604051908152602001610302565b61033461091f565b60405161030291906149d5565b61035461034f366004614707565b610957565b6040516001600160a01b039091168152602001610302565b61037f61037a36600461459e565b6109f1565b005b61037f61038f36600461415b565b610b3c565b61031e6103a2366004614707565b610bb6565b61037f6103b536600461432b565b610bc5565b61031e6103c8366004614707565b63ffffffff19166000908152600d602052604090205490565b61037f6103ef36600461415b565b610c93565b61037f61040236600461432b565b610d08565b61037f61041536600461404c565b610ea0565b61037f61042836600461432b565b610f85565b61037f61043b366004614707565b610fa0565b61037f61044e3660046143dc565b610fb4565b610466610461366004614760565b610fc6565b60405161030291906149c2565b6102f661048136600461404c565b6002546001600160a01b0390811691161490565b6103546104a3366004614707565b611120565b6103546104b6366004614707565b6111c2565b6102f66104c936600461404c565b6001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b0316610354565b61031e61050636600461404c565b611225565b61037f61051936600461436b565b611299565b61037f61052c36600461459e565b6112e2565b61037f61053f36600461404c565b611346565b60408051808201909152600481527f47414d45000000000000000000000000000000000000000000000000000000006020820152610334565b61037f61058b3660046141ed565b611416565b61037f61059e366004614233565b611489565b61037f6105b136600461456a565b611698565b61031e6105c4366004614293565b6116aa565b6102f66105d7366004614068565b6001600160a01b039182166000908152600c6020908152604080832093909416825291909152205460ff1690565b61037f61061336600461456a565b61194c565b61037f61062636600461471f565b611a2f565b61037f610639366004614446565b611d33565b61065161064c3660046140a0565b611dba565b6040516001600160e01b03199091168152602001610302565b610334610678366004614707565b611e48565b6002546001600160a01b0316610354565b6102f661069c366004614707565b63ffffffff1916600090815260046020526040902054600160a01b9081161490565b6102f66106cc366004614068565b611ecc565b61037f6106df3660046141ed565b611f1e565b6106516106f2366004614502565b61200f565b61035460075461010090046001600160a01b031690565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316148061077157507f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b806107a557507f5b5e139f000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b60075460009061010090046001600160a01b031633146108145760405162461bcd60e51b815260206004820152601460248201527f4d494e5445525f4143434553535f44454e49454400000000000000000000000060448201526064015b60405180910390fd5b60008260a00151116108685760405162461bcd60e51b815260206004820181905260248201527f45584143545f4e554d5f4f465f4c414e44535f52455155495245445f5a45524f604482015260640161080b565b600063ffffffff198416905061088885828560400151866060015161209b565b6108a4818460000151856020015161089f886123c6565b61241f565b60808301516000828152600b602090815260408083209390935560a0860151600d909152918120919091556108d986866126d3565b905080857f657b8278a92b609d44a59b6896d2357ddac36ef965a9fdd54edd6f66f1aafdcb8660405161090c9190614aa8565b60405180910390a39150505b9392505050565b60408051808201909152601781527f5468652053616e64626f783a2047414d4520746f6b656e00000000000000000060208201525b90565b6000806000610965846127e1565b90925090506001600160a01b0382166109c05760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161080b565b80156109e6575050506000818152600660205260409020546001600160a01b03166107a8565b6000925050506107a8565b63ffffffff19811660009081526004602052604081205490610a12836123c6565b90506000610a1e612826565b90506001600160a01b038216610a765760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161080b565b806001600160a01b0316826001600160a01b03161480610aae57506001600160a01b03811660009081526001602052604090205460ff165b80610ade57506001600160a01b0380831660009081526005602090815260408083209385168352929052205460ff165b610b2a5760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c0000000000000000000000604482015260640161080b565b610b35838686612870565b5050505050565b610bae868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a01819004810282018101909252888152925088915087908190840183828082843760009201829052509250612926915050565b505050505050565b600063ffffffff1982166107a5565b610bd0838383612d2a565b50610bdc838383612f42565b6001600160a01b0382163b15158015610c1a5750610c1a827f5e8bf64400000000000000000000000000000000000000000000000000000000613007565b15610c8e57610c42610c2a612826565b848484604051806020016040528060008152506130cc565b610c8e5760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a45435445440000000000000000604482015260640161080b565b505050565b610bae868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a01819004810282018101909252888152925088915087908190840183828082843760009201919091525060019250612926915050565b63ffffffff19811660009081526004602052604081205490610d28612826565b90506001600160a01b038516610d805760405162461bcd60e51b815260206004820152601360248201527f5a45524f5f414444524553535f53454e44455200000000000000000000000000604482015260640161080b565b846001600160a01b0316816001600160a01b03161480610db857506001600160a01b03811660009081526001602052604090205460ff165b80610de857506001600160a01b0380861660009081526005602090815260408083209385168352929052205460ff165b610e345760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c0000000000000000000000604482015260640161080b565b846001600160a01b0316826001600160a01b031614610e955760405162461bcd60e51b815260206004820152601060248201527f4f574e45525f4e4f545f53454e44455200000000000000000000000000000000604482015260640161080b565b610b35828585612870565b6000546001600160a01b03163314610efa5760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c5900000000000000000000000000000000000000000000604482015260640161080b565b600754604080516001600160a01b036101009093048316815291831660208301527f3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f6910160405180910390a1600780546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b610c8e83838360405180602001604052806000815250611d33565b610fb1610fab612826565b8261318b565b50565b610fc0848484846132dd565b50505050565b606063ffffffff1984166000610fdb866123c6565b6001600160a01b031614156110325760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161080b565b8260608167ffffffffffffffff81111561105c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611085578160200160208202803683370190505b50905060005b82811015611115576000848152600960205260408120908888848181106110c257634e487b7160e01b600052603260045260246000fd5b905060200201358152602001908152602001600020548282815181106110f857634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061110d81614ddc565b91505061108b565b509695505050505050565b60008161116f5760405162461bcd60e51b815260206004820152601160248201527f47414d455f4e455645525f4d494e544544000000000000000000000000000000604482015260640161080b565b63ffffffff198216600061118560606002614c70565b61118f9083614c16565b6000838152600a60205260409020549091506001600160a01b031680156111ba5792506107a8915050565b509392505050565b60006111cd826123c6565b90506001600160a01b0381166107a85760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354414e545f544f4b454e000000000000000000000000000000604482015260640161080b565b60006001600160a01b03821661127d5760405162461bcd60e51b815260206004820152601260248201527f5a45524f5f414444524553535f4f574e45520000000000000000000000000000604482015260640161080b565b506001600160a01b031660009081526003602052604090205490565b6112a3858461318b565b610b358585858585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506132dd92505050565b6001600160a01b0382166113385760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f41444452455353000000000000000000000000604482015260640161080b565b611342828261318b565b5050565b6000546001600160a01b031633146113a05760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e49454400000000000000000000000000604482015260640161080b565b600054604080516001600160a01b03928316815291831660208301527f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f910160405180910390a16000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b826001600160a01b0316611428612826565b6001600160a01b03161461147e5760405162461bcd60e51b815260206004820152601460248201527f454449544f525f4143434553535f44454e494544000000000000000000000000604482015260640161080b565b610c8e8383836136ed565b600754760100000000000000000000000000000000000000000000900460ff166114d2576007547501000000000000000000000000000000000000000000900460ff16156114d6565b303b155b6115485760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161080b565b600754760100000000000000000000000000000000000000000000900460ff161580156115ed57600780547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff909116760100000000000000000000000000000000000000000000171675010000000000000000000000000000000000000000001790555b6000805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0387811691909117909255600880549091169185169190911790556007805460ff191660ff84161790556002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387161790558015610b3557600780547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff1690555050505050565b6113426116a3612826565b838361376e565b60075460009061010090046001600160a01b0316331461170c5760405162461bcd60e51b815260206004820152601460248201527f4d494e5445525f4143434553535f44454e494544000000000000000000000000604482015260640161080b565b846001600160a01b0381166117635760405162461bcd60e51b815260206004820152601860248201527f44455354494e4154494f4e5f5a45524f5f414444524553530000000000000000604482015260640161080b565b856001600160a01b0381163014156117bd5760405162461bcd60e51b815260206004820152601960248201527f44455354494e4154494f4e5f47414d455f434f4e545241435400000000000000604482015260640161080b565b60008660a00135116118115760405162461bcd60e51b815260206004820181905260248201527f45584143545f4e554d5f4f465f4c414e44535f52455155495245445f5a45524f604482015260640161080b565b6000806118238a8a8860006001613844565b90925090506001600160a01b0387161561184357611843898860016136ed565b6118506040890189614b3e565b1590506118df576118df8a8261186960408c018c614b3e565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506118a89250505060608d018d614b3e565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061209b92505050565b6000818152600b6020908152604080832060808c01359055600d90915280822060a08b01359055518391907f657b8278a92b609d44a59b6896d2357ddac36ef965a9fdd54edd6f66f1aafdcb90611937908c906149e8565b60405180910390a35098975050505050505050565b6000546001600160a01b031633146119cc5760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f72730000000000000000000000000000000000000000606482015260840161080b565b6001600160a01b038216600081815260016020908152604091829020805460ff19168515159081179091558251938452908301527f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d8910160405180910390a15050565b806001600160a01b038116611a865760405162461bcd60e51b815260206004820152601860248201527f44455354494e4154494f4e5f5a45524f5f414444524553530000000000000000604482015260640161080b565b6000611a91856123c6565b6001600160a01b03161415611ae85760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161080b565b63ffffffff1984166000611afa612826565b9050846001600160a01b0316816001600160a01b03161480611b3457506001600160a01b03811660009081526001602052604090205460ff165b611b805760405162461bcd60e51b815260206004820152601660248201527f5452414e534645525f4143434553535f44454e49454400000000000000000000604482015260640161080b565b6001600160a01b038516611bd65760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f41444452455353000000000000000000000000604482015260640161080b565b6000611be460606002614c70565b611bee9084614c16565b90506000611bfb88611120565b9050856001600160a01b0316816001600160a01b03161415611c5f5760405162461bcd60e51b815260206004820152600c60248201527f43555252454e545f3d5f544f0000000000000000000000000000000000000000604482015260640161080b565b866001600160a01b0316816001600160a01b031614611cc05760405162461bcd60e51b815260206004820152601160248201527f43555252454e545f213d5f53454e444552000000000000000000000000000000604482015260640161080b565b6000848152600a6020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038a81169182179092559151919284821692918616917f1a7f4b0ff7e2dc5eb0864ecd842062dd36fa2daafefc7a017476807ccd73600d9190a45050505050505050565b611d3e848484612d2a565b50611d4a848484612f42565b6001600160a01b0383163b15610fc057611d6e611d65612826565b858585856130cc565b610fc05760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a45435445440000000000000000604482015260640161080b565b60006001600160a01b038916301415611df457507fbc197c8100000000000000000000000000000000000000000000000000000000611e3c565b60405162461bcd60e51b815260206004820152601660248201527f455243313135355f42415443485f52454a454354454400000000000000000000604482015260640161080b565b98975050505050505050565b60606000611e55836123c6565b6001600160a01b03161415611eac5760405162461bcd60e51b815260206004820152601660248201527f4255524e45445f4f525f4e455645525f4d494e54454400000000000000000000604482015260640161080b565b63ffffffff1982166000818152600b6020526040902054610918906139af565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081205460ff16806109185750506001600160a01b031660009081526001602052604090205460ff16919050565b6001600160a01b038316611f745760405162461bcd60e51b815260206004820152601660248201527f496e76616c69642073656e646572206164647265737300000000000000000000604482015260640161080b565b6000611f7e612826565b9050836001600160a01b0316816001600160a01b03161480611fb857506001600160a01b03811660009081526001602052604090205460ff165b6120045760405162461bcd60e51b815260206004820152601c60248201527f554e415554484f52495a45445f415050524f56455f464f525f414c4c00000000604482015260640161080b565b610fc084848461376e565b60006001600160a01b03871630141561204957507ff23a6e6100000000000000000000000000000000000000000000000000000000612091565b60405162461bcd60e51b815260206004820152601060248201527f455243313135355f52454a454354454400000000000000000000000000000000604482015260640161080b565b9695505050505050565b81516120a657610fc0565b80518251146120f75760405162461bcd60e51b815260206004820152601560248201527f494e56414c49445f494e5055545f4c454e475448530000000000000000000000604482015260640161080b565b6000805b835181101561225f5760096000868152602001908152602001600020600085838151811061213957634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002054915082818151811061217257634e487b7160e01b600052603260045260246000fd5b6020026020010151600014156121ca5760405162461bcd60e51b815260206004820152601660248201527f494e56414c49445f41535345545f4144444954494f4e00000000000000000000604482015260640161080b565b8281815181106121ea57634e487b7160e01b600052603260045260246000fd5b6020026020010151826121fd9190614bfe565b60096000878152602001908152602001600020600086848151811061223257634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002081905550808061225790614ddc565b9150506120fb565b508251600114156123575760085483516001600160a01b039091169063f242432a908790309087906000906122a457634e487b7160e01b600052603260045260246000fd5b6020026020010151866000815181106122cd57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e087901b1681526001600160a01b0394851660048201529390921660248401526044830152606482015260a06084820152600060a482015260c401600060405180830381600087803b15801561233a57600080fd5b505af115801561234e573d6000803e3d6000fd5b50505050610b35565b600854604051631759616b60e11b81526001600160a01b0390911690632eb2c2d69061238d9088903090889088906004016148ef565b600060405180830381600087803b1580156123a757600080fd5b505af11580156123bb573d6000803e3d6000fd5b505050505050505050565b63ffffffff1981166000908152600460205260408120548260c882901c63ffffffff16600160a01b808416148061240557508061ffff168261ffff1614155b1561241657600093505050506107a8565b50909392505050565b825161242a57610fc0565b8151835114801561243b5750825115155b6124875760405162461bcd60e51b815260206004820152601560248201527f494e56414c49445f494e5055545f4c454e475448530000000000000000000000604482015260640161080b565b6000805b845181101561262f576009600087815260200190815260200160002060008683815181106124c957634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000205491508160001415801561251b575083818151811061250e57634e487b7160e01b600052603260045260246000fd5b6020026020010151600014155b801561254e57508184828151811061254357634e487b7160e01b600052603260045260246000fd5b602002602001015111155b61259a5760405162461bcd60e51b815260206004820152601560248201527f494e56414c49445f41535345545f52454d4f56414c0000000000000000000000604482015260640161080b565b8381815181106125ba57634e487b7160e01b600052603260045260246000fd5b6020026020010151826125cd9190614d60565b60096000888152602001908152602001600020600087848151811061260257634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002081905550808061262790614ddc565b91505061248b565b5083516001141561269d5760085484516001600160a01b039091169063f242432a9030908590889060009061267457634e487b7160e01b600052603260045260246000fd5b6020026020010151876000815181106122cd57634e487b7160e01b600052603260045260246000fd5b600854604051631759616b60e11b81526001600160a01b0390911690632eb2c2d69061238d9030908690899089906004016148ef565b6000806126e260606002614c70565b6126ec9084614c16565b905060006126fc60206002614c70565b6127069085614c16565b9050838061271381614dba565b9150506000612721866123c6565b9050806001600160a01b0316876001600160a01b0316141561274d576127488782886139e0565b612786565b6001600160a01b038082166000908152600c60209081526040808320938b168352929052205460ff1615612786576127868182886139e0565b6000612796858386866000613844565b50905060006127a4826123c6565b9050806001600160a01b0316836001600160a01b0316146127d557634e487b7160e01b600052600160045260246000fd5b50979650505050505050565b63ffffffff1981166000908152600460205260408120548190600160a01b80821614156128115760009250612815565b8092505b600160ff1b80821614915050915091565b6002546000906001600160a01b031633141561286957507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610954565b5033610954565b600061287b826123c6565b90506001600160a01b03831661289d576128988285836000613ade565b6128df565b6128aa8285836001613ade565b6000828152600660205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790555b81836001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b6000612930612826565b90506000866001600160a01b0316826001600160a01b0316148061296c57506001600160a01b03821660009081526001602052604090205460ff165b8061299c57506001600160a01b0380881660009081526005602090815260408083209386168352929052205460ff165b90506001600160a01b0387166129f45760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f41444452455353000000000000000000000000604482015260640161080b565b6001600160a01b038616612a4a5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161080b565b845160005b8651811015612c08576000878281518110612a7a57634e487b7160e01b600052603260045260246000fd5b602002602001015190508060001415612aa05782612a9781614da3565b93505050612bf6565b600080612aac836127e1565b915091508b6001600160a01b0316826001600160a01b031614612b115760405162461bcd60e51b815260206004820152601b60248201527f42415443485452414e5346455246524f4d5f4e4f545f4f574e45520000000000604482015260640161080b565b8580612b3e5750808015612b3e57506000838152600660205260409020546001600160a01b038881169116145b612b8a5760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161080b565b612bb1836004600063ffffffff1983168152602001908152602001600020548d6000613ade565b828b6001600160a01b03168d6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505b80612c0081614ddc565b915050612a4f565b50866001600160a01b0316886001600160a01b031614612c7d576001600160a01b03881660009081526003602052604081208054839290612c4a908490614d60565b90915550506001600160a01b03871660009081526003602052604081208054839290612c77908490614bfe565b90915550505b6001600160a01b0387163b15158015612cc257508380612cc25750612cc2877f5e8bf64400000000000000000000000000000000000000000000000000000000613007565b15612d2057612cd48389898989613b80565b612d205760405162461bcd60e51b815260206004820152601e60248201527f4552433732315f42415443485f5452414e534645525f52454a45435445440000604482015260640161080b565b5050505050505050565b6000806000612d38846127e1565b915091506000612d46612826565b90506001600160a01b038316612d9e5760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161080b565b866001600160a01b0316836001600160a01b031614612dff5760405162461bcd60e51b815260206004820152601760248201527f434845434b5452414e534645525f4e4f545f4f574e4552000000000000000000604482015260640161080b565b6001600160a01b038616612e555760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161080b565b826001600160a01b0316816001600160a01b03161480612e8d57506001600160a01b03811660009081526001602052604090205460ff165b80612ebd57506001600160a01b0380881660009081526005602090815260408083209385168352929052205460ff165b80612ee95750818015612ee957506000858152600660205260409020546001600160a01b038281169116145b612f355760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e534645520000000000000000000000604482015260640161080b565b5060019695505050505050565b6001600160a01b0383166000908152600360205260408120805491612f6683614da3565b90915550506001600160a01b0382166000908152600360205260408120805491612f8f83614ddc565b9190505550612fc18160046000612faa8563ffffffff191690565b815260200190815260200160002054846000613ade565b80826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b604080516001600160e01b031983166024808301919091528251808303909101815260449091018252602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a7000000000000000000000000000000000000000000000000000000001781528251935160008082529485948594909392908183858c612710fa955080519450505050609e5a116130ba57634e487b7160e01b600052600160045260246000fd5b82801561209157509095945050505050565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b81526004016131019493929190614990565b602060405180830381600087803b15801561311b57600080fd5b505af115801561312f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315391906146eb565b6001600160e01b0319167f150b7a02000000000000000000000000000000000000000000000000000000001491505095945050505050565b63ffffffff19811660008061319f836127e1565b9150915060006131ad612826565b9050826001600160a01b0316816001600160a01b031614806131f057508180156131f057506000848152600660205260409020546001600160a01b038281169116145b8061321357506001600160a01b03811660009081526001602052604090205460ff165b8061324357506001600160a01b0380871660009081526005602090815260408083209385168352929052205460ff165b61328f5760405162461bcd60e51b815260206004820152601160248201527f554e415554484f52495a45445f4255524e000000000000000000000000000000604482015260640161080b565b6000848152600b60209081526040808320839055600d8252808320839055878352600a9091529020805473ffffffffffffffffffffffffffffffffffffffff19169055610bae8684876139e0565b826001600160a01b0381166133345760405162461bcd60e51b815260206004820152601860248201527f44455354494e4154494f4e5f5a45524f5f414444524553530000000000000000604482015260640161080b565b836001600160a01b03811630141561338e5760405162461bcd60e51b815260206004820152601960248201527f44455354494e4154494f4e5f47414d455f434f4e545241435400000000000000604482015260640161080b565b6000613399856123c6565b6001600160a01b0316146133ef5760405162461bcd60e51b815260206004820152601660248201527f4f4e4c595f46524f4d5f4255524e45445f544f4b454e00000000000000000000604482015260640161080b565b63ffffffff1984166133ff612826565b6001600160a01b0316876001600160a01b03161461345f5760405162461bcd60e51b815260206004820152601060248201527f494e56414c49445f5245434f5645525900000000000000000000000000000000604482015260640161080b565b6134698786613c3f565b60008451116134ba5760405162461bcd60e51b815260206004820152601360248201527f5749544844524157414c5f434f4d504c45544500000000000000000000000000604482015260640161080b565b6060845167ffffffffffffffff8111156134e457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561350d578160200160208202803683370190505b50905060005b85518110156135f65760096000848152602001908152602001600020600087838151811061355157634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000205482828151811061358857634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506009600084815260200190815260200160002060008783815181106135c957634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000905580806135ee90614ddc565b915050613513565b50600854604051631759616b60e11b81526001600160a01b0390911690632eb2c2d69061362d9030908b908a9087906004016148ef565b600060405180830381600087803b15801561364757600080fd5b505af115801561365b573d6000803e3d6000fd5b5050505061369b6040518060c001604052806060815260200160608152602001606081526020016060815260200160008019168152602001600081525090565b8581526020810182905260405160009088907f657b8278a92b609d44a59b6896d2357ddac36ef965a9fdd54edd6f66f1aafdcb906136da908590614aa8565b60405180910390a3505050505050505050565b604080516001600160a01b03848116825283151560208301528516917f2707ddf548cb7f4a367371209c363bce6cee97ae07a097ee0e40d882934b3ee9910160405180910390a26001600160a01b039283166000908152600c6020908152604080832094909516825292909252919020805460ff1916911515919091179055565b6001600160a01b03821660009081526001602052604090205460ff16156137d75760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f415050524f56414c5f4348414e4745000000000000000000604482015260640161080b565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600080600080600085156138d8576007546001935061386a908b908a9060ff1686613d0c565b915063ffffffff198216600081815260046020526040902054909150156138d35760405162461bcd60e51b815260206004820152601a60248201527f53544f524147455f49445f52455553455f464f5242494444454e000000000000604482015260640161080b565b6138fb565b6007548793506138ef908b908a9060ff1686613d0c565b91505063ffffffff1981165b61392f6001600160a01b038a167affff0000000000000000000000000000000000000000000000000060c886901b16614bfe565b6000828152600460209081526040808320939093556001600160a01b038c1682526003905290812080549161396383614ddc565b909155505060405182906001600160a01b038b16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a490999098509650505050505050565b60606139ba82613d92565b6040516020016139ca919061485d565b6040516020818303038152906040529050919050565b816001600160a01b0316836001600160a01b031614613a415760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e45520000000000000000000000000000000000000000000000604482015260640161080b565b63ffffffff198116600160a01b613a5d6001600160ff1b614d60565b6000838152600460209081526040808320805494909416949094179092556001600160a01b03871681526003909152908120805491613a9b83614da3565b909155505060405182906000906001600160a01b038716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a450505050565b8015613b2a5763ffffffff1984166000908152600460205260409020600160ff1b6001600160a01b03841673ffffffffffffffffffffffffffffffffffffffff19861617179055610fc0565b6001600160a01b038216613b436001600160ff1b614d60565b841673ffffffffffffffffffffffffffffffffffffffff1916176004600063ffffffff198716815260208101919091526040016000205550505050565b600080846001600160a01b0316634b808c46888887876040518563ffffffff1660e01b8152600401613bb59493929190614947565b602060405180830381600087803b158015613bcf57600080fd5b505af1158015613be3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c0791906146eb565b6001600160e01b0319167f4b808c46000000000000000000000000000000000000000000000000000000001491505095945050505050565b6001600160a01b038216613c955760405162461bcd60e51b815260206004820152601360248201527f53454e4445525f5a45524f5f4144445245535300000000000000000000000000604482015260640161080b565b63ffffffff1981166000908152600460205260409020546001600160a01b0316826001600160a01b0316146113425760405162461bcd60e51b815260206004820152601b60248201527f4c4153545f4f574e45525f4e4f545f455155414c5f53454e4445520000000000604482015260640161080b565b600061ffff8216613d1f60106002614c70565b613d2c9060ff8616614d41565b613d3860206002614c70565b613d4c9067ffffffffffffffff8816614d41565b613d5860606002614c70565b613d6b906001600160a01b038a16614d41565b613d759190614bfe565b613d7f9190614bfe565b613d899190614bfe565b95945050505050565b60408051603480825260608281019093528391600090826020820181803683370190505090507f6162636465666768696a6b6c6d6e6f707172737475767778797a3233343536376002613de6600886614df7565b901b60ff1660208110613e0957634e487b7160e01b600052603260045260246000fd5b1a60f81b81613e1784614da3565b93508381518110613e3857634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613e72600884614c16565b92505b8115613f35577f6162636465666768696a6b6c6d6e6f707172737475767778797a323334353637613ea7602085614df7565b60208110613ec557634e487b7160e01b600052603260045260246000fd5b1a60f81b81613ed384614da3565b93508381518110613ef457634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613f2e602084614c16565b9250613e75565b949350505050565b60008083601f840112613f4e578182fd5b50813567ffffffffffffffff811115613f65578182fd5b6020830191508360208083028501011115613f7f57600080fd5b9250929050565b600082601f830112613f96578081fd5b8135602067ffffffffffffffff821115613fb257613fb2614e37565b808202613fc0828201614b85565b838152828101908684018388018501891015613fda578687fd5b8693505b858410156127d5578035835260019390930192918401918401613fde565b803580151581146107a857600080fd5b60008083601f84011261401d578182fd5b50813567ffffffffffffffff811115614034578182fd5b602083019150836020828501011115613f7f57600080fd5b60006020828403121561405d578081fd5b813561091881614e4d565b6000806040838503121561407a578081fd5b823561408581614e4d565b9150602083013561409581614e4d565b809150509250929050565b60008060008060008060008060a0898b0312156140bb578384fd5b88356140c681614e4d565b975060208901356140d681614e4d565b9650604089013567ffffffffffffffff808211156140f2578586fd5b6140fe8c838d01613f3d565b909850965060608b0135915080821115614116578586fd5b6141228c838d01613f3d565b909650945060808b013591508082111561413a578384fd5b506141478b828c0161400c565b999c989b5096995094979396929594505050565b60008060008060008060808789031215614173578182fd5b863561417e81614e4d565b9550602087013561418e81614e4d565b9450604087013567ffffffffffffffff808211156141aa578384fd5b6141b68a838b01613f3d565b909650945060608901359150808211156141ce578384fd5b506141db89828a0161400c565b979a9699509497509295939492505050565b600080600060608486031215614201578283fd5b833561420c81614e4d565b9250602084013561421c81614e4d565b915061422a60408501613ffc565b90509250925092565b60008060008060808587031215614248578384fd5b843561425381614e4d565b9350602085013561426381614e4d565b9250604085013561427381614e4d565b9150606085013560ff81168114614288578182fd5b939692955090935050565b600080600080600060a086880312156142aa578283fd5b85356142b581614e4d565b945060208601356142c581614e4d565b9350604086013567ffffffffffffffff808211156142e1578485fd5b9087019060c0828a0312156142f4578485fd5b90935060608701359061430682614e4d565b909250608087013590808216821461431c578283fd5b50809150509295509295909350565b60008060006060848603121561433f578081fd5b833561434a81614e4d565b9250602084013561435a81614e4d565b929592945050506040919091013590565b600080600080600060808688031215614382578283fd5b853561438d81614e4d565b9450602086013561439d81614e4d565b935060408601359250606086013567ffffffffffffffff8111156143bf578182fd5b6143cb88828901613f3d565b969995985093965092949392505050565b600080600080608085870312156143f1578182fd5b84356143fc81614e4d565b9350602085013561440c81614e4d565b925060408501359150606085013567ffffffffffffffff81111561442e578182fd5b61443a87828801613f86565b91505092959194509250565b6000806000806080858703121561445b578182fd5b843561446681614e4d565b935060208581013561447781614e4d565b935060408601359250606086013567ffffffffffffffff8082111561449a578384fd5b818801915088601f8301126144ad578384fd5b8135818111156144bf576144bf614e37565b6144d184601f19601f84011601614b85565b915080825289848285010111156144e6578485fd5b8084840185840137810190920192909252939692955090935050565b60008060008060008060a0878903121561451a578384fd5b863561452581614e4d565b9550602087013561453581614e4d565b94506040870135935060608701359250608087013567ffffffffffffffff81111561455e578283fd5b6141db89828a0161400c565b6000806040838503121561457c578182fd5b823561458781614e4d565b915061459560208401613ffc565b90509250929050565b600080604083850312156145b0578182fd5b82356145bb81614e4d565b946020939093013593505050565b6000806000606084860312156145dd578081fd5b83356145e881614e4d565b925060208401359150604084013567ffffffffffffffff8082111561460b578283fd5b9085019060c0828803121561461e578283fd5b61462860c0614b85565b823582811115614636578485fd5b61464289828601613f86565b825250602083013582811115614656578485fd5b61466289828601613f86565b602083015250604083013582811115614679578485fd5b61468589828601613f86565b60408301525060608301358281111561469c578485fd5b6146a889828601613f86565b6060830152506080830135608082015260a083013560a08201528093505050509250925092565b6000602082840312156146e0578081fd5b813561091881614e62565b6000602082840312156146fc578081fd5b815161091881614e62565b600060208284031215614718578081fd5b5035919050565b600080600060608486031215614733578081fd5b83359250602084013561474581614e4d565b9150604084013561475581614e4d565b809150509250925092565b600080600060408486031215614774578081fd5b83359250602084013567ffffffffffffffff811115614791578182fd5b61479d86828701613f3d565b9497909650939450505050565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156147db578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b838110156148265781518752958201959082019060010161480a565b509495945050505050565b60008151808452614849816020860160208601614d77565b601f01601f19169290920160200192915050565b60007f697066733a2f2f626166796265690000000000000000000000000000000000008252825161489581600e850160208701614d77565b7f2f00000000000000000000000000000000000000000000000000000000000000600e9390910192830152507f67616d652e6a736f6e0000000000000000000000000000000000000000000000600f820152601801919050565b60006001600160a01b03808716835280861660208401525060a0604083015261491b60a08301856147f7565b828103606084015261492d81856147f7565b838103608090940193909352508152602001949350505050565b60006001600160a01b0380871683528086166020840152506080604083015261497360808301856147f7565b82810360608401526149858185614831565b979650505050505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526120916080830184614831565b60006020825261091860208301846147f7565b6000602082526109186020830184614831565b6000602082526149f88384614bb6565b60c06020850152614a0d60e0850182846147aa565b915050614a1d6020850185614bb6565b601f1980868503016040870152614a358483856147aa565b9350614a446040880188614bb6565b9350915080868503016060870152614a5d8484846147aa565b9350614a6c6060880188614bb6565b935091508086850301608087015250614a868383836147aa565b92505050608084013560a084015260a084013560c08401528091505092915050565b600060208252825160c06020840152614ac460e08401826147f7565b90506020840151601f1980858403016040860152614ae283836147f7565b92506040860151915080858403016060860152614aff83836147f7565b9250606086015191508085840301608086015250614b1d82826147f7565b915050608084015160a084015260a084015160c08401528091505092915050565b6000808335601e19843603018112614b54578283fd5b83018035915067ffffffffffffffff821115614b6e578283fd5b6020908101925081023603821315613f7f57600080fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614bae57614bae614e37565b604052919050565b6000808335601e19843603018112614bcc578283fd5b830160208101925035905067ffffffffffffffff811115614bec57600080fd5b602081023603831315613f7f57600080fd5b60008219821115614c1157614c11614e0b565b500190565b600082614c2557614c25614e21565b500490565b80825b6001808611614c3c5750614c67565b818704821115614c4e57614c4e614e0b565b80861615614c5b57918102915b9490941c938002614c2d565b94509492505050565b600061091860001960ff851684600082614c8c57506001610918565b81614c9957506000610918565b8160018114614caf5760028114614cb957614ce6565b6001915050610918565b60ff841115614cca57614cca614e0b565b6001841b915084821115614ce057614ce0614e0b565b50610918565b5060208310610133831016604e8410600b8410161715614d19575081810a83811115614d1457614d14614e0b565b610918565b614d268484846001614c2a565b808604821115614d3857614d38614e0b565b02949350505050565b6000816000190483118215151615614d5b57614d5b614e0b565b500290565b600082821015614d7257614d72614e0b565b500390565b60005b83811015614d92578181015183820152602001614d7a565b83811115610fc05750506000910152565b600081614db257614db2614e0b565b506000190190565b600061ffff80831681811415614dd257614dd2614e0b565b6001019392505050565b6000600019821415614df057614df0614e0b565b5060010190565b600082614e0657614e06614e21565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610fb157600080fd5b6001600160e01b031981168114610fb157600080fdfea26469706673582212200a27bf308352f4dbcf9010dfafb5c169fe589c7b0866890567f90c6015aba07c64736f6c63430008020033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102de5760003560e01c806370a0823111610186578063ac9fe421116100e3578063ce1b815f11610097578063eeb5a5d111610071578063eeb5a5d1146106d1578063f23a6e61146106e4578063f3667517146106f7576102de565b8063ce1b815f1461067d578063db44fe071461068e578063e985e9c5146106be576102de565b8063b88d4fde116100c8578063b88d4fde1461062b578063bc197c811461063e578063c87b56dd1461066a576102de565b8063ac9fe42114610605578063b78608bf14610618576102de565b80639be8e39b1161013a578063a22cb4651161011f578063a22cb465146105a3578063a313a464146105b6578063a776b882146105c9576102de565b80639be8e39b1461057d5780639d76581314610590576102de565b806379cc67901161016b57806379cc67901461051e5780638f2839701461053157806395d89b4114610544576102de565b806370a08231146104f8578063780edf6e1461050b576102de565b80632b9917461161023f5780634a847e89116101f35780636352211e116101cd5780636352211e146104a8578063654b748a146104bb5780636e9960c3146104e7576102de565b80634a847e8914610453578063572b6c0514610473578063589a174314610495576102de565b806342842e0e1161022457806342842e0e1461041a57806342966c681461042d578063479315ef14610440576102de565b80632b991746146103f45780632c4d4d1814610407576102de565b806315ddc5351161029657806323b872dd1161027b57806323b872dd146103a757806324d9a744146103ba57806328cfbd46146103e1576102de565b806315ddc5351461038157806321ab0c7114610394576102de565b806306fdde03116102c757806306fdde031461032c578063081812fc14610341578063095ea7b31461036c576102de565b806301ffc9a7146102e357806303e97cb21461030b575b600080fd5b6102f66102f13660046146cf565b61070e565b60405190151581526020015b60405180910390f35b61031e6103193660046145c9565b6107ad565b604051908152602001610302565b61033461091f565b60405161030291906149d5565b61035461034f366004614707565b610957565b6040516001600160a01b039091168152602001610302565b61037f61037a36600461459e565b6109f1565b005b61037f61038f36600461415b565b610b3c565b61031e6103a2366004614707565b610bb6565b61037f6103b536600461432b565b610bc5565b61031e6103c8366004614707565b63ffffffff19166000908152600d602052604090205490565b61037f6103ef36600461415b565b610c93565b61037f61040236600461432b565b610d08565b61037f61041536600461404c565b610ea0565b61037f61042836600461432b565b610f85565b61037f61043b366004614707565b610fa0565b61037f61044e3660046143dc565b610fb4565b610466610461366004614760565b610fc6565b60405161030291906149c2565b6102f661048136600461404c565b6002546001600160a01b0390811691161490565b6103546104a3366004614707565b611120565b6103546104b6366004614707565b6111c2565b6102f66104c936600461404c565b6001600160a01b031660009081526001602052604090205460ff1690565b6000546001600160a01b0316610354565b61031e61050636600461404c565b611225565b61037f61051936600461436b565b611299565b61037f61052c36600461459e565b6112e2565b61037f61053f36600461404c565b611346565b60408051808201909152600481527f47414d45000000000000000000000000000000000000000000000000000000006020820152610334565b61037f61058b3660046141ed565b611416565b61037f61059e366004614233565b611489565b61037f6105b136600461456a565b611698565b61031e6105c4366004614293565b6116aa565b6102f66105d7366004614068565b6001600160a01b039182166000908152600c6020908152604080832093909416825291909152205460ff1690565b61037f61061336600461456a565b61194c565b61037f61062636600461471f565b611a2f565b61037f610639366004614446565b611d33565b61065161064c3660046140a0565b611dba565b6040516001600160e01b03199091168152602001610302565b610334610678366004614707565b611e48565b6002546001600160a01b0316610354565b6102f661069c366004614707565b63ffffffff1916600090815260046020526040902054600160a01b9081161490565b6102f66106cc366004614068565b611ecc565b61037f6106df3660046141ed565b611f1e565b6106516106f2366004614502565b61200f565b61035460075461010090046001600160a01b031690565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000006001600160e01b03198316148061077157507f80ac58cd000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b806107a557507f5b5e139f000000000000000000000000000000000000000000000000000000006001600160e01b03198316145b90505b919050565b60075460009061010090046001600160a01b031633146108145760405162461bcd60e51b815260206004820152601460248201527f4d494e5445525f4143434553535f44454e49454400000000000000000000000060448201526064015b60405180910390fd5b60008260a00151116108685760405162461bcd60e51b815260206004820181905260248201527f45584143545f4e554d5f4f465f4c414e44535f52455155495245445f5a45524f604482015260640161080b565b600063ffffffff198416905061088885828560400151866060015161209b565b6108a4818460000151856020015161089f886123c6565b61241f565b60808301516000828152600b602090815260408083209390935560a0860151600d909152918120919091556108d986866126d3565b905080857f657b8278a92b609d44a59b6896d2357ddac36ef965a9fdd54edd6f66f1aafdcb8660405161090c9190614aa8565b60405180910390a39150505b9392505050565b60408051808201909152601781527f5468652053616e64626f783a2047414d4520746f6b656e00000000000000000060208201525b90565b6000806000610965846127e1565b90925090506001600160a01b0382166109c05760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161080b565b80156109e6575050506000818152600660205260409020546001600160a01b03166107a8565b6000925050506107a8565b63ffffffff19811660009081526004602052604081205490610a12836123c6565b90506000610a1e612826565b90506001600160a01b038216610a765760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161080b565b806001600160a01b0316826001600160a01b03161480610aae57506001600160a01b03811660009081526001602052604090205460ff165b80610ade57506001600160a01b0380831660009081526005602090815260408083209385168352929052205460ff165b610b2a5760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c0000000000000000000000604482015260640161080b565b610b35838686612870565b5050505050565b610bae868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a01819004810282018101909252888152925088915087908190840183828082843760009201829052509250612926915050565b505050505050565b600063ffffffff1982166107a5565b610bd0838383612d2a565b50610bdc838383612f42565b6001600160a01b0382163b15158015610c1a5750610c1a827f5e8bf64400000000000000000000000000000000000000000000000000000000613007565b15610c8e57610c42610c2a612826565b848484604051806020016040528060008152506130cc565b610c8e5760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a45435445440000000000000000604482015260640161080b565b505050565b610bae868686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020601f8a01819004810282018101909252888152925088915087908190840183828082843760009201919091525060019250612926915050565b63ffffffff19811660009081526004602052604081205490610d28612826565b90506001600160a01b038516610d805760405162461bcd60e51b815260206004820152601360248201527f5a45524f5f414444524553535f53454e44455200000000000000000000000000604482015260640161080b565b846001600160a01b0316816001600160a01b03161480610db857506001600160a01b03811660009081526001602052604090205460ff165b80610de857506001600160a01b0380861660009081526005602090815260408083209385168352929052205460ff165b610e345760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f415050524f56414c0000000000000000000000604482015260640161080b565b846001600160a01b0316826001600160a01b031614610e955760405162461bcd60e51b815260206004820152601060248201527f4f574e45525f4e4f545f53454e44455200000000000000000000000000000000604482015260640161080b565b610b35828585612870565b6000546001600160a01b03163314610efa5760405162461bcd60e51b815260206004820152600a60248201527f41444d494e5f4f4e4c5900000000000000000000000000000000000000000000604482015260640161080b565b600754604080516001600160a01b036101009093048316815291831660208301527f3b0007eb941cf645526cbb3a4fdaecda9d28ce4843167d9263b536a1f1edc0f6910160405180910390a1600780546001600160a01b03909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b610c8e83838360405180602001604052806000815250611d33565b610fb1610fab612826565b8261318b565b50565b610fc0848484846132dd565b50505050565b606063ffffffff1984166000610fdb866123c6565b6001600160a01b031614156110325760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161080b565b8260608167ffffffffffffffff81111561105c57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611085578160200160208202803683370190505b50905060005b82811015611115576000848152600960205260408120908888848181106110c257634e487b7160e01b600052603260045260246000fd5b905060200201358152602001908152602001600020548282815181106110f857634e487b7160e01b600052603260045260246000fd5b60209081029190910101528061110d81614ddc565b91505061108b565b509695505050505050565b60008161116f5760405162461bcd60e51b815260206004820152601160248201527f47414d455f4e455645525f4d494e544544000000000000000000000000000000604482015260640161080b565b63ffffffff198216600061118560606002614c70565b61118f9083614c16565b6000838152600a60205260409020549091506001600160a01b031680156111ba5792506107a8915050565b509392505050565b60006111cd826123c6565b90506001600160a01b0381166107a85760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354414e545f544f4b454e000000000000000000000000000000604482015260640161080b565b60006001600160a01b03821661127d5760405162461bcd60e51b815260206004820152601260248201527f5a45524f5f414444524553535f4f574e45520000000000000000000000000000604482015260640161080b565b506001600160a01b031660009081526003602052604090205490565b6112a3858461318b565b610b358585858585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506132dd92505050565b6001600160a01b0382166113385760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f41444452455353000000000000000000000000604482015260640161080b565b611342828261318b565b5050565b6000546001600160a01b031633146113a05760405162461bcd60e51b815260206004820152601360248201527f41444d494e5f4143434553535f44454e49454400000000000000000000000000604482015260640161080b565b600054604080516001600160a01b03928316815291831660208301527f7e644d79422f17c01e4894b5f4f588d331ebfa28653d42ae832dc59e38c9798f910160405180910390a16000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b826001600160a01b0316611428612826565b6001600160a01b03161461147e5760405162461bcd60e51b815260206004820152601460248201527f454449544f525f4143434553535f44454e494544000000000000000000000000604482015260640161080b565b610c8e8383836136ed565b600754760100000000000000000000000000000000000000000000900460ff166114d2576007547501000000000000000000000000000000000000000000900460ff16156114d6565b303b155b6115485760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161080b565b600754760100000000000000000000000000000000000000000000900460ff161580156115ed57600780547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff909116760100000000000000000000000000000000000000000000171675010000000000000000000000000000000000000000001790555b6000805473ffffffffffffffffffffffffffffffffffffffff199081166001600160a01b0387811691909117909255600880549091169185169190911790556007805460ff191660ff84161790556002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0387161790558015610b3557600780547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff1690555050505050565b6113426116a3612826565b838361376e565b60075460009061010090046001600160a01b0316331461170c5760405162461bcd60e51b815260206004820152601460248201527f4d494e5445525f4143434553535f44454e494544000000000000000000000000604482015260640161080b565b846001600160a01b0381166117635760405162461bcd60e51b815260206004820152601860248201527f44455354494e4154494f4e5f5a45524f5f414444524553530000000000000000604482015260640161080b565b856001600160a01b0381163014156117bd5760405162461bcd60e51b815260206004820152601960248201527f44455354494e4154494f4e5f47414d455f434f4e545241435400000000000000604482015260640161080b565b60008660a00135116118115760405162461bcd60e51b815260206004820181905260248201527f45584143545f4e554d5f4f465f4c414e44535f52455155495245445f5a45524f604482015260640161080b565b6000806118238a8a8860006001613844565b90925090506001600160a01b0387161561184357611843898860016136ed565b6118506040890189614b3e565b1590506118df576118df8a8261186960408c018c614b3e565b808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506118a89250505060608d018d614b3e565b8080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061209b92505050565b6000818152600b6020908152604080832060808c01359055600d90915280822060a08b01359055518391907f657b8278a92b609d44a59b6896d2357ddac36ef965a9fdd54edd6f66f1aafdcb90611937908c906149e8565b60405180910390a35098975050505050505050565b6000546001600160a01b031633146119cc5760405162461bcd60e51b815260206004820152602c60248201527f6f6e6c792061646d696e20697320616c6c6f77656420746f206164642073757060448201527f6572206f70657261746f72730000000000000000000000000000000000000000606482015260840161080b565b6001600160a01b038216600081815260016020908152604091829020805460ff19168515159081179091558251938452908301527f44f92d27abdf4cfb6a7d712c3af68f3be086d4ca747ab802c36f67d6790060d8910160405180910390a15050565b806001600160a01b038116611a865760405162461bcd60e51b815260206004820152601860248201527f44455354494e4154494f4e5f5a45524f5f414444524553530000000000000000604482015260640161080b565b6000611a91856123c6565b6001600160a01b03161415611ae85760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161080b565b63ffffffff1984166000611afa612826565b9050846001600160a01b0316816001600160a01b03161480611b3457506001600160a01b03811660009081526001602052604090205460ff165b611b805760405162461bcd60e51b815260206004820152601660248201527f5452414e534645525f4143434553535f44454e49454400000000000000000000604482015260640161080b565b6001600160a01b038516611bd65760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f41444452455353000000000000000000000000604482015260640161080b565b6000611be460606002614c70565b611bee9084614c16565b90506000611bfb88611120565b9050856001600160a01b0316816001600160a01b03161415611c5f5760405162461bcd60e51b815260206004820152600c60248201527f43555252454e545f3d5f544f0000000000000000000000000000000000000000604482015260640161080b565b866001600160a01b0316816001600160a01b031614611cc05760405162461bcd60e51b815260206004820152601160248201527f43555252454e545f213d5f53454e444552000000000000000000000000000000604482015260640161080b565b6000848152600a6020526040808220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038a81169182179092559151919284821692918616917f1a7f4b0ff7e2dc5eb0864ecd842062dd36fa2daafefc7a017476807ccd73600d9190a45050505050505050565b611d3e848484612d2a565b50611d4a848484612f42565b6001600160a01b0383163b15610fc057611d6e611d65612826565b858585856130cc565b610fc05760405162461bcd60e51b815260206004820152601860248201527f4552433732315f5452414e534645525f52454a45435445440000000000000000604482015260640161080b565b60006001600160a01b038916301415611df457507fbc197c8100000000000000000000000000000000000000000000000000000000611e3c565b60405162461bcd60e51b815260206004820152601660248201527f455243313135355f42415443485f52454a454354454400000000000000000000604482015260640161080b565b98975050505050505050565b60606000611e55836123c6565b6001600160a01b03161415611eac5760405162461bcd60e51b815260206004820152601660248201527f4255524e45445f4f525f4e455645525f4d494e54454400000000000000000000604482015260640161080b565b63ffffffff1982166000818152600b6020526040902054610918906139af565b6001600160a01b03808316600090815260056020908152604080832093851683529290529081205460ff16806109185750506001600160a01b031660009081526001602052604090205460ff16919050565b6001600160a01b038316611f745760405162461bcd60e51b815260206004820152601660248201527f496e76616c69642073656e646572206164647265737300000000000000000000604482015260640161080b565b6000611f7e612826565b9050836001600160a01b0316816001600160a01b03161480611fb857506001600160a01b03811660009081526001602052604090205460ff165b6120045760405162461bcd60e51b815260206004820152601c60248201527f554e415554484f52495a45445f415050524f56455f464f525f414c4c00000000604482015260640161080b565b610fc084848461376e565b60006001600160a01b03871630141561204957507ff23a6e6100000000000000000000000000000000000000000000000000000000612091565b60405162461bcd60e51b815260206004820152601060248201527f455243313135355f52454a454354454400000000000000000000000000000000604482015260640161080b565b9695505050505050565b81516120a657610fc0565b80518251146120f75760405162461bcd60e51b815260206004820152601560248201527f494e56414c49445f494e5055545f4c454e475448530000000000000000000000604482015260640161080b565b6000805b835181101561225f5760096000868152602001908152602001600020600085838151811061213957634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002054915082818151811061217257634e487b7160e01b600052603260045260246000fd5b6020026020010151600014156121ca5760405162461bcd60e51b815260206004820152601660248201527f494e56414c49445f41535345545f4144444954494f4e00000000000000000000604482015260640161080b565b8281815181106121ea57634e487b7160e01b600052603260045260246000fd5b6020026020010151826121fd9190614bfe565b60096000878152602001908152602001600020600086848151811061223257634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002081905550808061225790614ddc565b9150506120fb565b508251600114156123575760085483516001600160a01b039091169063f242432a908790309087906000906122a457634e487b7160e01b600052603260045260246000fd5b6020026020010151866000815181106122cd57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040516001600160e01b031960e087901b1681526001600160a01b0394851660048201529390921660248401526044830152606482015260a06084820152600060a482015260c401600060405180830381600087803b15801561233a57600080fd5b505af115801561234e573d6000803e3d6000fd5b50505050610b35565b600854604051631759616b60e11b81526001600160a01b0390911690632eb2c2d69061238d9088903090889088906004016148ef565b600060405180830381600087803b1580156123a757600080fd5b505af11580156123bb573d6000803e3d6000fd5b505050505050505050565b63ffffffff1981166000908152600460205260408120548260c882901c63ffffffff16600160a01b808416148061240557508061ffff168261ffff1614155b1561241657600093505050506107a8565b50909392505050565b825161242a57610fc0565b8151835114801561243b5750825115155b6124875760405162461bcd60e51b815260206004820152601560248201527f494e56414c49445f494e5055545f4c454e475448530000000000000000000000604482015260640161080b565b6000805b845181101561262f576009600087815260200190815260200160002060008683815181106124c957634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000205491508160001415801561251b575083818151811061250e57634e487b7160e01b600052603260045260246000fd5b6020026020010151600014155b801561254e57508184828151811061254357634e487b7160e01b600052603260045260246000fd5b602002602001015111155b61259a5760405162461bcd60e51b815260206004820152601560248201527f494e56414c49445f41535345545f52454d4f56414c0000000000000000000000604482015260640161080b565b8381815181106125ba57634e487b7160e01b600052603260045260246000fd5b6020026020010151826125cd9190614d60565b60096000888152602001908152602001600020600087848151811061260257634e487b7160e01b600052603260045260246000fd5b6020026020010151815260200190815260200160002081905550808061262790614ddc565b91505061248b565b5083516001141561269d5760085484516001600160a01b039091169063f242432a9030908590889060009061267457634e487b7160e01b600052603260045260246000fd5b6020026020010151876000815181106122cd57634e487b7160e01b600052603260045260246000fd5b600854604051631759616b60e11b81526001600160a01b0390911690632eb2c2d69061238d9030908690899089906004016148ef565b6000806126e260606002614c70565b6126ec9084614c16565b905060006126fc60206002614c70565b6127069085614c16565b9050838061271381614dba565b9150506000612721866123c6565b9050806001600160a01b0316876001600160a01b0316141561274d576127488782886139e0565b612786565b6001600160a01b038082166000908152600c60209081526040808320938b168352929052205460ff1615612786576127868182886139e0565b6000612796858386866000613844565b50905060006127a4826123c6565b9050806001600160a01b0316836001600160a01b0316146127d557634e487b7160e01b600052600160045260246000fd5b50979650505050505050565b63ffffffff1981166000908152600460205260408120548190600160a01b80821614156128115760009250612815565b8092505b600160ff1b80821614915050915091565b6002546000906001600160a01b031633141561286957507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c610954565b5033610954565b600061287b826123c6565b90506001600160a01b03831661289d576128988285836000613ade565b6128df565b6128aa8285836001613ade565b6000828152600660205260409020805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0385161790555b81836001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a450505050565b6000612930612826565b90506000866001600160a01b0316826001600160a01b0316148061296c57506001600160a01b03821660009081526001602052604090205460ff165b8061299c57506001600160a01b0380881660009081526005602090815260408083209386168352929052205460ff165b90506001600160a01b0387166129f45760405162461bcd60e51b815260206004820152601460248201527f4e4f545f46524f4d5f5a45524f41444452455353000000000000000000000000604482015260640161080b565b6001600160a01b038616612a4a5760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161080b565b845160005b8651811015612c08576000878281518110612a7a57634e487b7160e01b600052603260045260246000fd5b602002602001015190508060001415612aa05782612a9781614da3565b93505050612bf6565b600080612aac836127e1565b915091508b6001600160a01b0316826001600160a01b031614612b115760405162461bcd60e51b815260206004820152601b60248201527f42415443485452414e5346455246524f4d5f4e4f545f4f574e45520000000000604482015260640161080b565b8580612b3e5750808015612b3e57506000838152600660205260409020546001600160a01b038881169116145b612b8a5760405162461bcd60e51b815260206004820152600e60248201527f4e4f545f415554484f52495a4544000000000000000000000000000000000000604482015260640161080b565b612bb1836004600063ffffffff1983168152602001908152602001600020548d6000613ade565b828b6001600160a01b03168d6001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a45050505b80612c0081614ddc565b915050612a4f565b50866001600160a01b0316886001600160a01b031614612c7d576001600160a01b03881660009081526003602052604081208054839290612c4a908490614d60565b90915550506001600160a01b03871660009081526003602052604081208054839290612c77908490614bfe565b90915550505b6001600160a01b0387163b15158015612cc257508380612cc25750612cc2877f5e8bf64400000000000000000000000000000000000000000000000000000000613007565b15612d2057612cd48389898989613b80565b612d205760405162461bcd60e51b815260206004820152601e60248201527f4552433732315f42415443485f5452414e534645525f52454a45435445440000604482015260640161080b565b5050505050505050565b6000806000612d38846127e1565b915091506000612d46612826565b90506001600160a01b038316612d9e5760405162461bcd60e51b815260206004820152601160248201527f4e4f4e4558495354454e545f544f4b454e000000000000000000000000000000604482015260640161080b565b866001600160a01b0316836001600160a01b031614612dff5760405162461bcd60e51b815260206004820152601760248201527f434845434b5452414e534645525f4e4f545f4f574e4552000000000000000000604482015260640161080b565b6001600160a01b038616612e555760405162461bcd60e51b815260206004820152601260248201527f4e4f545f544f5f5a45524f414444524553530000000000000000000000000000604482015260640161080b565b826001600160a01b0316816001600160a01b03161480612e8d57506001600160a01b03811660009081526001602052604090205460ff165b80612ebd57506001600160a01b0380881660009081526005602090815260408083209385168352929052205460ff165b80612ee95750818015612ee957506000858152600660205260409020546001600160a01b038281169116145b612f355760405162461bcd60e51b815260206004820152601560248201527f554e415554484f52495a45445f5452414e534645520000000000000000000000604482015260640161080b565b5060019695505050505050565b6001600160a01b0383166000908152600360205260408120805491612f6683614da3565b90915550506001600160a01b0382166000908152600360205260408120805491612f8f83614ddc565b9190505550612fc18160046000612faa8563ffffffff191690565b815260200190815260200160002054846000613ade565b80826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050565b604080516001600160e01b031983166024808301919091528251808303909101815260449091018252602080820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f01ffc9a7000000000000000000000000000000000000000000000000000000001781528251935160008082529485948594909392908183858c612710fa955080519450505050609e5a116130ba57634e487b7160e01b600052600160045260246000fd5b82801561209157509095945050505050565b600080846001600160a01b031663150b7a02888887876040518563ffffffff1660e01b81526004016131019493929190614990565b602060405180830381600087803b15801561311b57600080fd5b505af115801561312f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061315391906146eb565b6001600160e01b0319167f150b7a02000000000000000000000000000000000000000000000000000000001491505095945050505050565b63ffffffff19811660008061319f836127e1565b9150915060006131ad612826565b9050826001600160a01b0316816001600160a01b031614806131f057508180156131f057506000848152600660205260409020546001600160a01b038281169116145b8061321357506001600160a01b03811660009081526001602052604090205460ff165b8061324357506001600160a01b0380871660009081526005602090815260408083209385168352929052205460ff165b61328f5760405162461bcd60e51b815260206004820152601160248201527f554e415554484f52495a45445f4255524e000000000000000000000000000000604482015260640161080b565b6000848152600b60209081526040808320839055600d8252808320839055878352600a9091529020805473ffffffffffffffffffffffffffffffffffffffff19169055610bae8684876139e0565b826001600160a01b0381166133345760405162461bcd60e51b815260206004820152601860248201527f44455354494e4154494f4e5f5a45524f5f414444524553530000000000000000604482015260640161080b565b836001600160a01b03811630141561338e5760405162461bcd60e51b815260206004820152601960248201527f44455354494e4154494f4e5f47414d455f434f4e545241435400000000000000604482015260640161080b565b6000613399856123c6565b6001600160a01b0316146133ef5760405162461bcd60e51b815260206004820152601660248201527f4f4e4c595f46524f4d5f4255524e45445f544f4b454e00000000000000000000604482015260640161080b565b63ffffffff1984166133ff612826565b6001600160a01b0316876001600160a01b03161461345f5760405162461bcd60e51b815260206004820152601060248201527f494e56414c49445f5245434f5645525900000000000000000000000000000000604482015260640161080b565b6134698786613c3f565b60008451116134ba5760405162461bcd60e51b815260206004820152601360248201527f5749544844524157414c5f434f4d504c45544500000000000000000000000000604482015260640161080b565b6060845167ffffffffffffffff8111156134e457634e487b7160e01b600052604160045260246000fd5b60405190808252806020026020018201604052801561350d578160200160208202803683370190505b50905060005b85518110156135f65760096000848152602001908152602001600020600087838151811061355157634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000205482828151811061358857634e487b7160e01b600052603260045260246000fd5b6020026020010181815250506009600084815260200190815260200160002060008783815181106135c957634e487b7160e01b600052603260045260246000fd5b602002602001015181526020019081526020016000206000905580806135ee90614ddc565b915050613513565b50600854604051631759616b60e11b81526001600160a01b0390911690632eb2c2d69061362d9030908b908a9087906004016148ef565b600060405180830381600087803b15801561364757600080fd5b505af115801561365b573d6000803e3d6000fd5b5050505061369b6040518060c001604052806060815260200160608152602001606081526020016060815260200160008019168152602001600081525090565b8581526020810182905260405160009088907f657b8278a92b609d44a59b6896d2357ddac36ef965a9fdd54edd6f66f1aafdcb906136da908590614aa8565b60405180910390a3505050505050505050565b604080516001600160a01b03848116825283151560208301528516917f2707ddf548cb7f4a367371209c363bce6cee97ae07a097ee0e40d882934b3ee9910160405180910390a26001600160a01b039283166000908152600c6020908152604080832094909516825292909252919020805460ff1916911515919091179055565b6001600160a01b03821660009081526001602052604090205460ff16156137d75760405162461bcd60e51b815260206004820152601760248201527f494e56414c49445f415050524f56414c5f4348414e4745000000000000000000604482015260640161080b565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b600080600080600085156138d8576007546001935061386a908b908a9060ff1686613d0c565b915063ffffffff198216600081815260046020526040902054909150156138d35760405162461bcd60e51b815260206004820152601a60248201527f53544f524147455f49445f52455553455f464f5242494444454e000000000000604482015260640161080b565b6138fb565b6007548793506138ef908b908a9060ff1686613d0c565b91505063ffffffff1981165b61392f6001600160a01b038a167affff0000000000000000000000000000000000000000000000000060c886901b16614bfe565b6000828152600460209081526040808320939093556001600160a01b038c1682526003905290812080549161396383614ddc565b909155505060405182906001600160a01b038b16906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a490999098509650505050505050565b60606139ba82613d92565b6040516020016139ca919061485d565b6040516020818303038152906040529050919050565b816001600160a01b0316836001600160a01b031614613a415760405162461bcd60e51b815260206004820152600960248201527f4e4f545f4f574e45520000000000000000000000000000000000000000000000604482015260640161080b565b63ffffffff198116600160a01b613a5d6001600160ff1b614d60565b6000838152600460209081526040808320805494909416949094179092556001600160a01b03871681526003909152908120805491613a9b83614da3565b909155505060405182906000906001600160a01b038716907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a450505050565b8015613b2a5763ffffffff1984166000908152600460205260409020600160ff1b6001600160a01b03841673ffffffffffffffffffffffffffffffffffffffff19861617179055610fc0565b6001600160a01b038216613b436001600160ff1b614d60565b841673ffffffffffffffffffffffffffffffffffffffff1916176004600063ffffffff198716815260208101919091526040016000205550505050565b600080846001600160a01b0316634b808c46888887876040518563ffffffff1660e01b8152600401613bb59493929190614947565b602060405180830381600087803b158015613bcf57600080fd5b505af1158015613be3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c0791906146eb565b6001600160e01b0319167f4b808c46000000000000000000000000000000000000000000000000000000001491505095945050505050565b6001600160a01b038216613c955760405162461bcd60e51b815260206004820152601360248201527f53454e4445525f5a45524f5f4144445245535300000000000000000000000000604482015260640161080b565b63ffffffff1981166000908152600460205260409020546001600160a01b0316826001600160a01b0316146113425760405162461bcd60e51b815260206004820152601b60248201527f4c4153545f4f574e45525f4e4f545f455155414c5f53454e4445520000000000604482015260640161080b565b600061ffff8216613d1f60106002614c70565b613d2c9060ff8616614d41565b613d3860206002614c70565b613d4c9067ffffffffffffffff8816614d41565b613d5860606002614c70565b613d6b906001600160a01b038a16614d41565b613d759190614bfe565b613d7f9190614bfe565b613d899190614bfe565b95945050505050565b60408051603480825260608281019093528391600090826020820181803683370190505090507f6162636465666768696a6b6c6d6e6f707172737475767778797a3233343536376002613de6600886614df7565b901b60ff1660208110613e0957634e487b7160e01b600052603260045260246000fd5b1a60f81b81613e1784614da3565b93508381518110613e3857634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613e72600884614c16565b92505b8115613f35577f6162636465666768696a6b6c6d6e6f707172737475767778797a323334353637613ea7602085614df7565b60208110613ec557634e487b7160e01b600052603260045260246000fd5b1a60f81b81613ed384614da3565b93508381518110613ef457634e487b7160e01b600052603260045260246000fd5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613f2e602084614c16565b9250613e75565b949350505050565b60008083601f840112613f4e578182fd5b50813567ffffffffffffffff811115613f65578182fd5b6020830191508360208083028501011115613f7f57600080fd5b9250929050565b600082601f830112613f96578081fd5b8135602067ffffffffffffffff821115613fb257613fb2614e37565b808202613fc0828201614b85565b838152828101908684018388018501891015613fda578687fd5b8693505b858410156127d5578035835260019390930192918401918401613fde565b803580151581146107a857600080fd5b60008083601f84011261401d578182fd5b50813567ffffffffffffffff811115614034578182fd5b602083019150836020828501011115613f7f57600080fd5b60006020828403121561405d578081fd5b813561091881614e4d565b6000806040838503121561407a578081fd5b823561408581614e4d565b9150602083013561409581614e4d565b809150509250929050565b60008060008060008060008060a0898b0312156140bb578384fd5b88356140c681614e4d565b975060208901356140d681614e4d565b9650604089013567ffffffffffffffff808211156140f2578586fd5b6140fe8c838d01613f3d565b909850965060608b0135915080821115614116578586fd5b6141228c838d01613f3d565b909650945060808b013591508082111561413a578384fd5b506141478b828c0161400c565b999c989b5096995094979396929594505050565b60008060008060008060808789031215614173578182fd5b863561417e81614e4d565b9550602087013561418e81614e4d565b9450604087013567ffffffffffffffff808211156141aa578384fd5b6141b68a838b01613f3d565b909650945060608901359150808211156141ce578384fd5b506141db89828a0161400c565b979a9699509497509295939492505050565b600080600060608486031215614201578283fd5b833561420c81614e4d565b9250602084013561421c81614e4d565b915061422a60408501613ffc565b90509250925092565b60008060008060808587031215614248578384fd5b843561425381614e4d565b9350602085013561426381614e4d565b9250604085013561427381614e4d565b9150606085013560ff81168114614288578182fd5b939692955090935050565b600080600080600060a086880312156142aa578283fd5b85356142b581614e4d565b945060208601356142c581614e4d565b9350604086013567ffffffffffffffff808211156142e1578485fd5b9087019060c0828a0312156142f4578485fd5b90935060608701359061430682614e4d565b909250608087013590808216821461431c578283fd5b50809150509295509295909350565b60008060006060848603121561433f578081fd5b833561434a81614e4d565b9250602084013561435a81614e4d565b929592945050506040919091013590565b600080600080600060808688031215614382578283fd5b853561438d81614e4d565b9450602086013561439d81614e4d565b935060408601359250606086013567ffffffffffffffff8111156143bf578182fd5b6143cb88828901613f3d565b969995985093965092949392505050565b600080600080608085870312156143f1578182fd5b84356143fc81614e4d565b9350602085013561440c81614e4d565b925060408501359150606085013567ffffffffffffffff81111561442e578182fd5b61443a87828801613f86565b91505092959194509250565b6000806000806080858703121561445b578182fd5b843561446681614e4d565b935060208581013561447781614e4d565b935060408601359250606086013567ffffffffffffffff8082111561449a578384fd5b818801915088601f8301126144ad578384fd5b8135818111156144bf576144bf614e37565b6144d184601f19601f84011601614b85565b915080825289848285010111156144e6578485fd5b8084840185840137810190920192909252939692955090935050565b60008060008060008060a0878903121561451a578384fd5b863561452581614e4d565b9550602087013561453581614e4d565b94506040870135935060608701359250608087013567ffffffffffffffff81111561455e578283fd5b6141db89828a0161400c565b6000806040838503121561457c578182fd5b823561458781614e4d565b915061459560208401613ffc565b90509250929050565b600080604083850312156145b0578182fd5b82356145bb81614e4d565b946020939093013593505050565b6000806000606084860312156145dd578081fd5b83356145e881614e4d565b925060208401359150604084013567ffffffffffffffff8082111561460b578283fd5b9085019060c0828803121561461e578283fd5b61462860c0614b85565b823582811115614636578485fd5b61464289828601613f86565b825250602083013582811115614656578485fd5b61466289828601613f86565b602083015250604083013582811115614679578485fd5b61468589828601613f86565b60408301525060608301358281111561469c578485fd5b6146a889828601613f86565b6060830152506080830135608082015260a083013560a08201528093505050509250925092565b6000602082840312156146e0578081fd5b813561091881614e62565b6000602082840312156146fc578081fd5b815161091881614e62565b600060208284031215614718578081fd5b5035919050565b600080600060608486031215614733578081fd5b83359250602084013561474581614e4d565b9150604084013561475581614e4d565b809150509250925092565b600080600060408486031215614774578081fd5b83359250602084013567ffffffffffffffff811115614791578182fd5b61479d86828701613f3d565b9497909650939450505050565b60008284527f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156147db578081fd5b6020830280836020870137939093016020019283525090919050565b6000815180845260208085019450808401835b838110156148265781518752958201959082019060010161480a565b509495945050505050565b60008151808452614849816020860160208601614d77565b601f01601f19169290920160200192915050565b60007f697066733a2f2f626166796265690000000000000000000000000000000000008252825161489581600e850160208701614d77565b7f2f00000000000000000000000000000000000000000000000000000000000000600e9390910192830152507f67616d652e6a736f6e0000000000000000000000000000000000000000000000600f820152601801919050565b60006001600160a01b03808716835280861660208401525060a0604083015261491b60a08301856147f7565b828103606084015261492d81856147f7565b838103608090940193909352508152602001949350505050565b60006001600160a01b0380871683528086166020840152506080604083015261497360808301856147f7565b82810360608401526149858185614831565b979650505050505050565b60006001600160a01b038087168352808616602084015250836040830152608060608301526120916080830184614831565b60006020825261091860208301846147f7565b6000602082526109186020830184614831565b6000602082526149f88384614bb6565b60c06020850152614a0d60e0850182846147aa565b915050614a1d6020850185614bb6565b601f1980868503016040870152614a358483856147aa565b9350614a446040880188614bb6565b9350915080868503016060870152614a5d8484846147aa565b9350614a6c6060880188614bb6565b935091508086850301608087015250614a868383836147aa565b92505050608084013560a084015260a084013560c08401528091505092915050565b600060208252825160c06020840152614ac460e08401826147f7565b90506020840151601f1980858403016040860152614ae283836147f7565b92506040860151915080858403016060860152614aff83836147f7565b9250606086015191508085840301608086015250614b1d82826147f7565b915050608084015160a084015260a084015160c08401528091505092915050565b6000808335601e19843603018112614b54578283fd5b83018035915067ffffffffffffffff821115614b6e578283fd5b6020908101925081023603821315613f7f57600080fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614bae57614bae614e37565b604052919050565b6000808335601e19843603018112614bcc578283fd5b830160208101925035905067ffffffffffffffff811115614bec57600080fd5b602081023603831315613f7f57600080fd5b60008219821115614c1157614c11614e0b565b500190565b600082614c2557614c25614e21565b500490565b80825b6001808611614c3c5750614c67565b818704821115614c4e57614c4e614e0b565b80861615614c5b57918102915b9490941c938002614c2d565b94509492505050565b600061091860001960ff851684600082614c8c57506001610918565b81614c9957506000610918565b8160018114614caf5760028114614cb957614ce6565b6001915050610918565b60ff841115614cca57614cca614e0b565b6001841b915084821115614ce057614ce0614e0b565b50610918565b5060208310610133831016604e8410600b8410161715614d19575081810a83811115614d1457614d14614e0b565b610918565b614d268484846001614c2a565b808604821115614d3857614d38614e0b565b02949350505050565b6000816000190483118215151615614d5b57614d5b614e0b565b500290565b600082821015614d7257614d72614e0b565b500390565b60005b83811015614d92578181015183820152602001614d7a565b83811115610fc05750506000910152565b600081614db257614db2614e0b565b506000190190565b600061ffff80831681811415614dd257614dd2614e0b565b6001019392505050565b6000600019821415614df057614df0614e0b565b5060010190565b600082614e0657614e06614e21565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610fb157600080fd5b6001600160e01b031981168114610fb157600080fdfea26469706673582212200a27bf308352f4dbcf9010dfafb5c169fe589c7b0866890567f90c6015aba07c64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "params": {
          "id": "The id of the token.",
          "operator": "The address receiving the approval."
        }
      },
      "approveFor(address,address,uint256)": {
        "params": {
          "id": "The id of the token.",
          "operator": "The address receiving the approval.",
          "sender": "The address giving the approval."
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address to look for."
        },
        "returns": {
          "_0": "The number of tokens owned by the address."
        }
      },
      "batchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "ids": "The ids of the tokens.",
          "to": "The recipient of the token."
        }
      },
      "burn(uint256)": {
        "params": {
          "gameId": "The id of the GAME to destroy."
        }
      },
      "burnAndRecover(address,address,uint256,uint256[])": {
        "params": {
          "assetIds": "The assets to recover from the burnt GAME.",
          "from": "The address of the one destroying the game.",
          "gameId": "The id of the GAME to destroy.",
          "to": "The address to send all GAME assets to."
        }
      },
      "burnFrom(address,uint256)": {
        "params": {
          "from": "The address whose GAME is being burnt.",
          "gameId": "The id of the GAME to burn."
        }
      },
      "changeAdmin(address)": {
        "details": "Change the administrator to be `newAdmin`.",
        "params": {
          "newAdmin": "The address of the new administrator."
        }
      },
      "changeMinter(address)": {
        "details": "Change the minter to be `newMinter`.",
        "params": {
          "newMinter": "The address of the new minter."
        }
      },
      "createGame(address,address,(uint256[],uint256[],uint256[],uint256[],bytes32,uint256),address,uint64)": {
        "params": {
          "creation": "The struct containing ids & ammounts of assets to add to this game, along with the uri to set.",
          "editor": "The address to allow to edit (can also be set later).",
          "from": "The address of the one creating the game (may be different from msg.sender if metaTx).",
          "subId": "A random id created on the backend.",
          "to": "The address who will be assigned ownership of this game."
        },
        "returns": {
          "id": "The id of the new GAME token (erc721)."
        }
      },
      "creatorOf(uint256)": {
        "params": {
          "gameId": "The id of the token to get the creator of."
        },
        "returns": {
          "_0": "the creator of the token type `id`."
        }
      },
      "getAdmin()": {
        "details": "Get the current administrator of this contract.",
        "returns": {
          "_0": "The current administrator of this contract."
        }
      },
      "getApproved(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "_0": "The address of the operator."
        }
      },
      "getAssetBalances(uint256,uint256[])": {
        "params": {
          "assetIds": "The assets to get balances for.",
          "gameId": "The game to query."
        }
      },
      "getMinter()": {
        "details": "Get the current minter of this contract.",
        "returns": {
          "_0": "The current minter of this contract."
        }
      },
      "getStorageId(uint256)": {
        "params": {
          "tokenId": "The tokenId for which to find the first token Id."
        },
        "returns": {
          "_0": "The storage id for this token."
        }
      },
      "isApprovedForAll(address,address)": {
        "params": {
          "operator": "The address of the operator.",
          "owner": "The address of the owner."
        },
        "returns": {
          "isOperator": "The status of the approval."
        }
      },
      "isGameEditor(address,address)": {
        "params": {
          "editor": "The address of the editor to set.",
          "gameOwner": "The address of the owner of the GAME."
        },
        "returns": {
          "isEditor": "Editor status of editor for given tokenId."
        }
      },
      "isSuperOperator(address)": {
        "params": {
          "who": "The address to query."
        },
        "returns": {
          "_0": "whether the address has superOperator rights."
        }
      },
      "name()": {
        "returns": {
          "_0": "The name of the token contract."
        }
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "params": {
          "operator": "The address of the operator in the current tx."
        },
        "returns": {
          "_0": "the bytes4 value 0xbc197c81."
        }
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "params": {
          "operator": "The address of the operator in the current tx."
        },
        "returns": {
          "_0": "the bytes4 value 0xf23a6e61."
        }
      },
      "ownerOf(uint256)": {
        "params": {
          "id": "The id of the token."
        },
        "returns": {
          "owner": "The address of the token owner."
        }
      },
      "recoverAssets(address,address,uint256,uint256[])": {
        "params": {
          "assetIds": "The assets to recover from the burnt GAME.",
          "from": "Previous owner of the burnt game.",
          "gameId": "Id of the burnt GAME token.",
          "to": "Address that will receive the assets."
        }
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "ids": "The ids of the tokens.",
          "to": "The recipient of the token."
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "params": {
          "from": "The send of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "params": {
          "data": "Additional data.",
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "setApprovalForAll(address,bool)": {
        "params": {
          "approved": "The determination of the approval.",
          "operator": "The address receiving the approval."
        }
      },
      "setApprovalForAllFor(address,address,bool)": {
        "params": {
          "approved": "The determination of the approval.",
          "operator": "The address receiving the approval.",
          "sender": "The address giving the approval."
        }
      },
      "setGameEditor(address,address,bool)": {
        "params": {
          "editor": "The address of the editor to set.",
          "gameOwner": "The address of a GAME token creator.",
          "isEditor": "Add or remove the ability to edit."
        }
      },
      "setSuperOperator(address,bool)": {
        "params": {
          "enabled": "set whether the superOperator is enabled or disabled.",
          "superOperator": "address that will be given/removed superOperator right."
        }
      },
      "supportsInterface(bytes4)": {
        "params": {
          "id": "The id of the interface."
        },
        "returns": {
          "_0": "if the interface is supported."
        }
      },
      "symbol()": {
        "returns": {
          "_0": "the symbol of the token contract."
        }
      },
      "tokenURI(uint256)": {
        "params": {
          "gameId": "The id of the token."
        },
        "returns": {
          "uri": "The URI of the token metadata."
        }
      },
      "transferCreatorship(uint256,address,address)": {
        "params": {
          "gameId": "The current id of the GAME token.",
          "sender": "The address of current registered creator.",
          "to": "The address to transfer the creatorship to"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "from": "The sender of the token.",
          "id": "The id of the token.",
          "to": "The recipient of the token."
        }
      },
      "updateGame(address,uint256,(uint256[],uint256[],uint256[],uint256[],bytes32,uint256))": {
        "params": {
          "from": "The one updating the GAME token.",
          "gameId": "The current id of the GAME token.",
          "update": "The values to use for the update."
        },
        "returns": {
          "_0": "The new gameId."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "approve(address,uint256)": {
        "notice": "Approve an operator to spend tokens on the senders behalf."
      },
      "approveFor(address,address,uint256)": {
        "notice": "Approve an operator to spend tokens on the sender behalf."
      },
      "balanceOf(address)": {
        "notice": "Get the number of tokens owned by an address."
      },
      "batchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses."
      },
      "burn(uint256)": {
        "notice": "Burn a GAME token."
      },
      "burnAndRecover(address,address,uint256,uint256[])": {
        "notice": "Burn a GAME token and recover assets."
      },
      "burnFrom(address,uint256)": {
        "notice": "Burn a GAME token on behalf of owner."
      },
      "createGame(address,address,(uint256[],uint256[],uint256[],uint256[],bytes32,uint256),address,uint64)": {
        "notice": "Create a new GAME token."
      },
      "creatorOf(uint256)": {
        "notice": "Get the creator of the token type `id`."
      },
      "getApproved(uint256)": {
        "notice": "Get the approved operator for a specific token."
      },
      "getAssetBalances(uint256,uint256[])": {
        "notice": "Get the amount of each assetId in a GAME."
      },
      "getStorageId(uint256)": {
        "notice": "Get the storageID (no chainIndex or version data), which is constant for a given token."
      },
      "isApprovedForAll(address,address)": {
        "notice": "Check if the sender approved the operator."
      },
      "isGameEditor(address,address)": {
        "notice": "Get game editor status."
      },
      "isSuperOperator(address)": {
        "notice": "check whether address `who` is given superOperator rights."
      },
      "name()": {
        "notice": "Return the name of the token contract."
      },
      "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)": {
        "notice": "Called by other contracts to check if this can receive erc1155 batch."
      },
      "onERC1155Received(address,address,uint256,uint256,bytes)": {
        "notice": "Called by other contracts to check if this can receive erc1155 tokens."
      },
      "ownerOf(uint256)": {
        "notice": "Get the owner of a token."
      },
      "recoverAssets(address,address,uint256,uint256[])": {
        "notice": "Transfer assets from a burnt GAME."
      },
      "safeBatchTransferFrom(address,address,uint256[],bytes)": {
        "notice": "Transfer many tokens between 2 addresses, while ensuring the receiving contract has a receiver method."
      },
      "safeTransferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses letting the receiver know of the transfer."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "notice": "Transfer a token between 2 addresses letting the receiver knows of the transfer."
      },
      "setApprovalForAll(address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender."
      },
      "setApprovalForAllFor(address,address,bool)": {
        "notice": "Set the approval for an operator to manage all the tokens of the sender."
      },
      "setGameEditor(address,address,bool)": {
        "notice": "Allow token owner to set game editors."
      },
      "setSuperOperator(address,bool)": {
        "notice": "Enable or disable the ability of `superOperator` to transfer tokens of all (superOperator rights)."
      },
      "supportsInterface(bytes4)": {
        "notice": "Check if the contract supports an interface. 0x01ffc9a7 is ERC-165. 0x80ac58cd is ERC-721."
      },
      "symbol()": {
        "notice": "Get the symbol of the token contract."
      },
      "tokenURI(uint256)": {
        "notice": "Return the URI of a specific token."
      },
      "transferCreatorship(uint256,address,address)": {
        "notice": "Transfers creatorship of `original` from `sender` to `to`."
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer a token between 2 addresses."
      },
      "updateGame(address,uint256,(uint256[],uint256[],uint256[],uint256[],bytes32,uint256))": {
        "notice": "Update an existing GAME token.This actually burns old token and mints new token with same basId & incremented version."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 31849,
        "contract": "src/solc_0.8/polygon/child/ChildGameTokenV1.sol:ChildGameTokenV1",
        "label": "_admin",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 32081,
        "contract": "src/solc_0.8/polygon/child/ChildGameTokenV1.sol:ChildGameTokenV1",
        "label": "_superOperators",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 29950,
        "contract": "src/solc_0.8/polygon/child/ChildGameTokenV1.sol:ChildGameTokenV1",
        "label": "_trustedForwarder",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 30134,
        "contract": "src/solc_0.8/polygon/child/ChildGameTokenV1.sol:ChildGameTokenV1",
        "label": "_numNFTPerAddress",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 30138,
        "contract": "src/solc_0.8/polygon/child/ChildGameTokenV1.sol:ChildGameTokenV1",
        "label": "_owners",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 30144,
        "contract": "src/solc_0.8/polygon/child/ChildGameTokenV1.sol:ChildGameTokenV1",
        "label": "_operatorsForAll",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 30148,
        "contract": "src/solc_0.8/polygon/child/ChildGameTokenV1.sol:ChildGameTokenV1",
        "label": "_operators",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 30150,
        "contract": "src/solc_0.8/polygon/child/ChildGameTokenV1.sol:ChildGameTokenV1",
        "label": "_chainIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_uint8"
      },
      {
        "astId": 31909,
        "contract": "src/solc_0.8/polygon/child/ChildGameTokenV1.sol:ChildGameTokenV1",
        "label": "_minter",
        "offset": 1,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 2675,
        "contract": "src/solc_0.8/polygon/child/ChildGameTokenV1.sol:ChildGameTokenV1",
        "label": "_initialized",
        "offset": 21,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 2678,
        "contract": "src/solc_0.8/polygon/child/ChildGameTokenV1.sol:ChildGameTokenV1",
        "label": "_initializing",
        "offset": 22,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 14627,
        "contract": "src/solc_0.8/polygon/child/ChildGameTokenV1.sol:ChildGameTokenV1",
        "label": "_asset",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IAssetToken)33851"
      },
      {
        "astId": 14639,
        "contract": "src/solc_0.8/polygon/child/ChildGameTokenV1.sol:ChildGameTokenV1",
        "label": "_gameAssets",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 14643,
        "contract": "src/solc_0.8/polygon/child/ChildGameTokenV1.sol:ChildGameTokenV1",
        "label": "_creatorship",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 14647,
        "contract": "src/solc_0.8/polygon/child/ChildGameTokenV1.sol:ChildGameTokenV1",
        "label": "_metaData",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 14653,
        "contract": "src/solc_0.8/polygon/child/ChildGameTokenV1.sol:ChildGameTokenV1",
        "label": "_gameEditors",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 14657,
        "contract": "src/solc_0.8/polygon/child/ChildGameTokenV1.sol:ChildGameTokenV1",
        "label": "_exactNumOfLandsRequired",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IAssetToken)33851": {
        "encoding": "inplace",
        "label": "contract IAssetToken",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}